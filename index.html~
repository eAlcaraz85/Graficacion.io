<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="es" xml:lang="es">
<head>
<!-- 2025-03-19 mié 13:14 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Apuntes Graficación</title>
<meta name="author" content="Eduardo Alcaraz" />
<meta name="generator" content="Org Mode" />
<style>
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { }
</style>
<link rel="stylesheet" type="text/css" href="src/readtheorg_theme/css/htmlize.css"/>
<link rel="stylesheet" type="text/css" href="src/readtheorg_theme/css/readtheorg.css"/>
<script type="text/javascript" src="src/lib/js/jquery.min.js"></script>
<script type="text/javascript" src="src/lib/js/bootstrap.min.js"></script>
<script type="text/javascript" src="src/lib/js/jquery.stickytableheaders.min.js"></script>
<script type="text/javascript" src="src/readtheorg_theme/js/readtheorg.js"></script>
<style> #content{max-width:1800px;}</style>
<style>pre.src {background-color: #303030; color: #e5e5e5;}</style>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        displayAlign: "center",
        displayIndent: "0em",

        "HTML-CSS": { scale: 100,
                        linebreaks: { automatic: "false" },
                        webFont: "TeX"
                       },
        SVG: {scale: 100,
              linebreaks: { automatic: "false" },
              font: "TeX"},
        NativeMML: {scale: 100},
        TeX: { equationNumbers: {autoNumber: "AMS"},
               MultLineWidth: "85%",
               TagSide: "right",
               TagIndent: ".8em"
             }
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body>
<div id="content" class="content">
<h1 class="title">Apuntes Graficación</h1>
<div id="table-of-contents" role="doc-toc">
<h2>&Iacute;ndice</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgaece522">Manual de Instalación de Git</a>
<ul>
<li><a href="#org76d4a62">Instalación en Windows</a></li>
<li><a href="#org794d387">Instalación en macOS</a>
<ul>
<li><a href="#org5f64be8">Método recomendado: usando Homebrew</a></li>
<li><a href="#orge0562df">Método alternativo: paquete descargado</a></li>
</ul>
</li>
<li><a href="#org53838c0">Instalación en Linux (Distribuciones basadas en Debian/Ubuntu)</a></li>
<li><a href="#org778e796">Configuración básica de Git</a></li>
<li><a href="#org4b0573d">Actualización de Git</a></li>
<li><a href="#orge0e741b">Configurar Llave SSH con GitHub</a>
<ul>
<li><a href="#orge517995">1. Verificar si ya tienes una llave SSH</a></li>
<li><a href="#orgd8662de">2. Generar una nueva llave SSH</a></li>
<li><a href="#org14be3bf">3. Añadir la llave SSH al agente SSH</a></li>
<li><a href="#org4a42166">4. Copiar la llave SSH pública</a></li>
<li><a href="#org9752ef3">5. Añadir la llave SSH a GitHub</a></li>
<li><a href="#org10f9f0d">6. Probar la conexión SSH con GitHub</a></li>
<li><a href="#orgb5011d0">7. Usar la conexión SSH en repositorios de GitHub</a></li>
</ul>
</li>
<li><a href="#orgf2a05a8">Configurar Llave SSH con GitHub en Windows</a>
<ul>
<li><a href="#orgf31160f">1. Abrir Git Bash</a></li>
<li><a href="#org87182c1">2. Verificar si ya tienes una llave SSH</a></li>
<li><a href="#orgda2adfb">3. Generar una nueva llave SSH</a></li>
<li><a href="#orgd747195">4. Añadir la llave SSH al agente SSH</a></li>
<li><a href="#orgea86213">5. Copiar la llave SSH pública</a></li>
<li><a href="#org87f8f7c">6. Añadir la llave SSH a GitHub</a></li>
<li><a href="#org246c66d">7. Probar la conexión SSH con GitHub</a></li>
<li><a href="#org55eac9c">8. Usar la conexión SSH en repositorios de GitHub</a></li>
</ul>
</li>
<li><a href="#orgdb3b333">Manual de Git en Windows</a>
<ul>
<li><a href="#org63b8aba">1. Instalar Git en Windows</a></li>
<li><a href="#org5130cb6">2. Configurar Git</a></li>
<li><a href="#orge687ae6">3. Clonar un repositorio</a></li>
<li><a href="#org0c2ae2f">4. Comandos básicos de Git</a></li>
<li><a href="#orgb7b9210">5. Actualizar el repositorio local</a></li>
<li><a href="#org5e87271">6. Crear y cambiar de ramas (branches)</a></li>
<li><a href="#org5200855">7. Ver historial de commits</a></li>
<li><a href="#org918a2b1">8. Configurar una llave SSH</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org1d915cd">Manual de Instalación de Python en Windows</a>
<ul>
<li><a href="#orgf739dc3">Paso 1: Descarga de Python</a></li>
<li><a href="#org4667da8">Paso 2: Ejecutar el instalador</a></li>
<li><a href="#orgfcb3b39">Paso 3: Verificación de la instalación</a></li>
<li><a href="#orgbbe8259">Paso 4: Instalar pip y otros paquetes</a></li>
<li><a href="#org8b6a994">Paso 5: Configuración del entorno de desarrollo</a></li>
<li><a href="#org650adc5">Paso 6: Actualización de Python (opcional)</a></li>
</ul>
</li>
<li><a href="#org5d00a09">Entornos Virtuales en Python</a>
<ul>
<li><a href="#org2950695">¿Qué es un Entorno Virtual?</a></li>
<li><a href="#orgdfed979">Preparación: Instalación de Python y Visual Studio Code</a></li>
<li><a href="#org293f33c">Crear un Entorno Virtual</a></li>
<li><a href="#org48986a9">Activar el Entorno Virtual</a></li>
<li><a href="#org286147d">Configurar el Entorno Virtual en Visual Studio Code</a></li>
<li><a href="#org20652b9">Instalar Paquetes en el Entorno Virtual</a></li>
<li><a href="#orgc25aa2c">Administrar Paquetes</a></li>
<li><a href="#org5cdbfa5">Desactivar el Entorno Virtual</a></li>
<li><a href="#orgc71f7f8">Eliminar el Entorno Virtual</a></li>
<li><a href="#org0d7c2a5">Consejos Adicionales para VS Code</a></li>
</ul>
</li>
<li><a href="#orgab0a203">Introducción a la Graficación por computadora</a>
<ul>
<li><a href="#org4ec4783">Graficación por Computadora</a>
<ul>
<li><a href="#org4b11fdb">Objetivos de la Graficación por Computadora</a></li>
<li><a href="#org22c0171">Áreas de estudio en Graficación por Computadora</a></li>
<li><a href="#org1bae212">Aplicaciones de la Graficación por Computadora</a></li>
<li><a href="#orgd6968e9">Temas principales en Graficación por Computadora</a></li>
</ul>
</li>
<li><a href="#org3a261de">Modelos de Color: RGB, CMY, HSV y HSL</a></li>
<li><a href="#orgf5fa200">Introducción</a></li>
<li><a href="#org591bf10">Modelo de Color RGB (Red, Green, Blue)</a></li>
<li><a href="#orgb8e0b81">Definición</a></li>
<li><a href="#orgb4b741b">Funcionamiento de la Mezcla Aditiva</a></li>
<li><a href="#orgc0cc421">Espacio de Color RGB</a></li>
<li><a href="#orgcd3dd2d">Conversión a otros modelos de color</a></li>
<li><a href="#org4741fe3">Aplicaciones del Modelo RGB</a></li>
<li><a href="#org57927b9">Limitaciones del Modelo RGB</a></li>
<li><a href="#org25fa17c">Modelo CMY (Cyan, Magenta, Yellow)</a></li>
<li><a href="#orgb0de064">Modelo HSV (Hue, Saturation, Value)</a>
<ul>
<li><a href="#org65289f3">HSV opencv</a></li>
<li><a href="#orgff5bb82">Tutorial: Umbrales en el Modelo de Color HSV</a></li>
<li><a href="#org23f59f1">Definición de los Parámetros del Modelo HSV</a></li>
<li><a href="#orge88ea6e">Detectar un color en el espacio HSV</a></li>
<li><a href="#org17ea087">Explicación de los Parámetros:</a></li>
<li><a href="#orga339474">Ajustes de los Umbrales</a></li>
<li><a href="#orgb343f1f">Ejemplo visual: Rango de tonos para detectar verde</a></li>
<li><a href="#org13f1482">Uso de <code>cv2.inRange</code></a></li>
</ul>
</li>
<li><a href="#orgdaaad8d">Modelo HSL (Hue, Saturation, Lightness)</a></li>
<li><a href="#org483de48">Función Bitwise opencv</a>
<ul>
<li><a href="#org323c3cc">Tutorial: Operaciones Bitwise en OpenCV</a></li>
</ul>
</li>
<li><a href="#org59769ff">Definición: Operación Bit a Bit</a>
<ul>
<li><a href="#orgd8ec891">Principales operaciones bit a bit</a></li>
</ul>
</li>
<li><a href="#orgcff32e2">Operadores Puntuales</a>
<ul>
<li><a href="#orge08e7a9">Definición</a></li>
<li><a href="#orgfa2363c">Características</a></li>
<li><a href="#org419f117">Tipos de Operadores Puntuales</a></li>
<li><a href="#org310c509">Aplicaciones de Operadores Puntuales</a></li>
</ul>
</li>
<li><a href="#org00ec752">Proceso de Multiplicación de una Matriz de Transformación por una Coordenada de Píxel</a>
<ul>
<li><a href="#org620bdc5">1. Representación de las coordenadas en forma homogénea</a></li>
<li><a href="#org5d6928a">2. Definición de la matriz de transformación</a></li>
<li><a href="#org3787537">3. Multiplicación de la matriz por las coordenadas</a></li>
<li><a href="#orga204821">4. Resultado final</a></li>
<li><a href="#orga4f25cd">Ejemplo concreto: Rotación</a></li>
<li><a href="#orge6d49e7">Resumen del proceso</a></li>
</ul>
</li>
<li><a href="#org263e069">Transformaciones Geométricas en Imágenes</a>
<ul>
<li><a href="#org3af3f4d">1. Traslación (Translation)</a></li>
<li><a href="#org633d0d3">2. Rotación (Rotation)</a></li>
<li><a href="#org87b4f9e">3. Escalado (Scalin</a></li>
<li><a href="#orgb85ed5b">4. Cizallamiento (Shearing)</a></li>
<li><a href="#org2524017">5. Reflexión (Reflection)</a></li>
<li><a href="#orgc736d54">6. Transformación Afín (Affine Transformation)</a></li>
<li><a href="#org1e49446">7. Transformación Proyectiva (Homografía)</a></li>
<li><a href="#orgf0c4f79">Aplicaciones</a></li>
</ul>
</li>
<li><a href="#orgd226f68">Landmarks</a>
<ul>
<li><a href="#orgc6e19fb">Fundamentos de los Landmarks</a></li>
<li><a href="#orgdf3dd63">Aplicaciones de los Landmarks</a></li>
<li><a href="#orgf4edd84">Métodos de Detección de Landmarks</a></li>
</ul>
</li>
<li><a href="#orgc63f002">Detección de Manos con MediaPipe en Python</a>
<ul>
<li><a href="#orgd83ef10">Introducción</a></li>
<li><a href="#org8b938fd">Instalación de Dependencias</a></li>
<li><a href="#org02d3337">Código para Detección de Manos en Tiempo Real</a></li>
<li><a href="#org67b982f">Explicación del Código</a></li>
<li><a href="#org7db890f">Mejoras Posibles</a></li>
<li><a href="#org4821891">Indice de dedos en mediapipe</a></li>
<li><a href="#org58e97b1">Medipipe Reconocimiento de letras</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgfa54f2e">Actividades</a></li>
<li><a href="#org85a7eaf">Programación</a>
<ul>
<li><a href="#org5840980">Programas Unidad 1</a>
<ul>
<li><a href="#org808135d">Creación de una Imagen</a></li>
<li><a href="#org7ba22eb">Cargar Imagen</a></li>
<li><a href="#org1815ea7">Split y Merge Imagen</a></li>
<li><a href="#orgda2d579">Ejemplo de Operador Puntual en Imágenes</a></li>
<li><a href="#org4be50be">Cargar vídeo Opencv</a></li>
</ul>
</li>
<li><a href="#org09c9198">Ejemplos de Transformaciones Geométricas en Modo Raw en Python</a>
<ul>
<li><a href="#orgf4064e7">1. Traslación</a></li>
<li><a href="#org74d3661">2. Rotación (alrededor del centro de la imagen)</a></li>
<li><a href="#orgb381d14">3. Escalado</a></li>
<li><a href="#org127cac2">4. Cizallamiento (Shearing)</a></li>
<li><a href="#orgc941c63">5. Reflexión (Reflection)</a></li>
</ul>
</li>
<li><a href="#org7ba284d">Ejemplos de Transformaciones Geométricas en Python usando OpenCV</a>
<ul>
<li><a href="#orgf545425">1. Traslación</a></li>
<li><a href="#orgd9bbe5f">2. Rotación (alrededor del centro de la imagen)</a></li>
<li><a href="#orgd237277">3. Escalado</a></li>
<li><a href="#orgf66e930">4. Cizallamiento (Shearing)</a></li>
<li><a href="#org80d3019">5. Reflexión (Reflection)</a></li>
</ul>
</li>
<li><a href="#orgce2793b">Primitivas de Dibujo</a></li>
<li><a href="#orgdfe6584">Parametricas</a></li>
<li><a href="#org37fda17">Segmentación de color mediante el modelo de color HSV</a></li>
<li><a href="#org4d1f3d2">Capa de Harry Potter</a></li>
<li><a href="#org18bd2e4">Efecto Gris np.where</a>
<ul>
<li><a href="#org4ee38c9">Sintaxis básica de np.where:</a></li>
<li><a href="#org7356b5f">Aplicación en procesamiento de imágenes:</a></li>
</ul>
</li>
<li><a href="#org85451b0">Flujo optico</a></li>
<li><a href="#org4fdd644">Ejemplo de clasificación utilizando Haarcascades</a></li>
<li><a href="#org9849e62">OpenGL</a></li>
<li><a href="#org0aeca90">Descripción de la Proyección Isométrica</a>
<ul>
<li><a href="#org4793504">Ejemplo de Proyección Isométrica en OpenCV</a></li>
</ul>
</li>
<li><a href="#orge432357">Opengl Ejemplo</a></li>
</ul>
</li>
<li><a href="#org8e86612">Introducción a OpenGL</a>
<ul>
<li><a href="#org18df048">Características de OpenGL</a></li>
<li><a href="#orgc2acf93">Primeros pasos en OpenGL</a>
<ul>
<li><a href="#org6a7fa54">Configuración del Entorno</a></li>
<li><a href="#org8a21921">Estructura básica de un programa OpenGL</a></li>
</ul>
</li>
<li><a href="#org574bd20">Sistema de Coordenadas en OpenGL</a>
<ul>
<li><a href="#org45769de">Coordenadas del Objeto</a></li>
<li><a href="#org5d0bdc6">Coordenadas del Mundo</a></li>
<li><a href="#orgc0026a9">Coordenadas de Vista</a></li>
<li><a href="#org265e574">Coordenadas de Recorte</a></li>
<li><a href="#org495435b">Coordenadas Normalizadas del Dispositivo (NDC)</a></li>
<li><a href="#org63cc1e7">Coordenadas de Pantalla</a></li>
</ul>
</li>
<li><a href="#org916312a">Primitivas de Dibujo en OpenGL</a></li>
<li><a href="#org7f24568">Tutorial de gluPerspective en OpenGL</a>
<ul>
<li><a href="#org6cef578">¿Qué es gluPerspective?</a></li>
<li><a href="#orgc81565d">Sintaxis</a></li>
<li><a href="#orgf65911c">Ejemplo Básico de Uso de gluPerspective</a></li>
</ul>
</li>
<li><a href="#org2d11dc2">Objetos de Glut</a></li>
<li><a href="#org9ac9378">Transformaciones en OpenGL</a>
<ul>
<li><a href="#org24f7b70">Traslación</a></li>
<li><a href="#orgda80c48">Rotación</a></li>
<li><a href="#org1de38d3">Escalado</a></li>
</ul>
</li>
<li><a href="#org3f4c65f">Iluminación y Materiales</a>
<ul>
<li><a href="#orgcd58640">Tipos de luces</a></li>
<li><a href="#org6ffbb21">Materiales</a></li>
</ul>
</li>
<li><a href="#org5498b78">Sombras y Efectos Avanzados</a></li>
<li><a href="#org82abc04">OpenGL Moderno: Shaders y el Pipeline Gráfico</a>
<ul>
<li><a href="#org9f34a79">Vertex Shader</a></li>
<li><a href="#orgc48b544">Fragment Shader</a></li>
<li><a href="#org96605df">Geometry Shader</a></li>
</ul>
</li>
<li><a href="#org0c83f93">Conclusión</a></li>
</ul>
</li>
<li><a href="#org9712a11">Proyecto Final</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgaece522" class="outline-2">
<h2 id="orgaece522">Manual de Instalación de Git</h2>
<div class="outline-text-2" id="text-orgaece522">
</div>
<div id="outline-container-org76d4a62" class="outline-3">
<h3 id="org76d4a62">Instalación en Windows</h3>
<div class="outline-text-3" id="text-org76d4a62">
<ul class="org-ul">
<li>Descarga el instalador desde [<a href="https://git-scm.com/">https://git-scm.com/</a>].</li>
</ul>



<ul class="org-ul">
<li>Haz clic en el botón “Download for Windows”.
<ul class="org-ul">
<li>Ejecuta el archivo descargado (.exe).</li>

<li>Configuración de las opciones recomendadas durante la instalación:
<ul class="org-ul">
<li>Seleccionar el editor por defecto (por ejemplo, Vim o Notepad++).</li>
<li>Usar Git desde la línea de comandos y aplicaciones de terceros (opción recomendada).</li>
<li>Opciones de formato de fin de línea: selecciona la opción predeterminada para Windows.</li>
</ul></li>

<li>Completa la instalación.</li>
<li>Verifica la instalación abriendo Git Bash o Command Prompt y ejecutando:</li>
</ul></li>
</ul>
<div class="org-src-container">
<pre class="src src-bash">git --version
</pre>
</div>
</div>
</div>

<div id="outline-container-org794d387" class="outline-3">
<h3 id="org794d387">Instalación en macOS</h3>
<div class="outline-text-3" id="text-org794d387">
</div>
<div id="outline-container-org5f64be8" class="outline-4">
<h4 id="org5f64be8">Método recomendado: usando Homebrew</h4>
<div class="outline-text-4" id="text-org5f64be8">
<ul class="org-ul">
<li>Si tienes Homebrew instalado, abre la terminal y ejecuta:</li>
</ul>
<div class="org-src-container">
<pre class="src src-bash">brew install git
</pre>
</div>
</div>
</div>

<div id="outline-container-orge0562df" class="outline-4">
<h4 id="orge0562df">Método alternativo: paquete descargado</h4>
<div class="outline-text-4" id="text-orge0562df">
<ul class="org-ul">
<li>Descarga el instalador desde [<a href="https://git-scm.com/">https://git-scm.com/</a>].</li>
<li>Ejecuta el paquete descargado (.dmg).</li>
<li>Sigue las instrucciones de instalación.</li>

<li><p>
Verifica la instalación abriendo la terminal y ejecutando:
</p>
<div class="org-src-container">
<pre class="src src-bash">     git --version
</pre>
</div></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-org53838c0" class="outline-3">
<h3 id="org53838c0">Instalación en Linux (Distribuciones basadas en Debian/Ubuntu)</h3>
<div class="outline-text-3" id="text-org53838c0">
<ul class="org-ul">
<li><p>
Abre la terminal y ejecuta:
</p>
<div class="org-src-container">
<pre class="src src-bash">     sudo apt update
     sudo apt install git
</pre>
</div></li>

<li><p>
Verifica la instalación ejecutando:
</p>
<div class="org-src-container">
<pre class="src src-bash">     git --version
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-org778e796" class="outline-3">
<h3 id="org778e796">Configuración básica de Git</h3>
<div class="outline-text-3" id="text-org778e796">
<ul class="org-ul">
<li><p>
Configura tu nombre de usuario:
</p>
<div class="org-src-container">
<pre class="src src-bash">     git config --global user.name <span style="color: #8b2252;">"Tu Nombre"</span>
</pre>
</div></li>

<li><p>
Configura tu correo electrónico:
</p>
<div class="org-src-container">
<pre class="src src-bash">     git config --global user.email <span style="color: #8b2252;">"tuemail@ejemplo.com"</span>
</pre>
</div></li>

<li><p>
Verifica la configuración:
</p>
<div class="org-src-container">
<pre class="src src-bash">     git config --list
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-org4b0573d" class="outline-3">
<h3 id="org4b0573d">Actualización de Git</h3>
<div class="outline-text-3" id="text-org4b0573d">
<ul class="org-ul">
<li><b>Windows</b>: Ejecuta el instalador más reciente desde el sitio oficial.</li>
<li><p>
<b>macOS</b>: Ejecuta:
</p>
<div class="org-src-container">
<pre class="src src-bash">     brew upgrade git
</pre>
</div></li>
<li><p>
<b>Linux</b>: Ejecuta:
</p>
<div class="org-src-container">
<pre class="src src-bash">     sudo apt update &amp;&amp; sudo apt upgrade git
</pre>
</div></li>
</ul>
</div>
</div>



<div id="outline-container-orge0e741b" class="outline-3">
<h3 id="orge0e741b">Configurar Llave SSH con GitHub</h3>
<div class="outline-text-3" id="text-orge0e741b">
</div>
<div id="outline-container-orge517995" class="outline-4">
<h4 id="orge517995">1. Verificar si ya tienes una llave SSH</h4>
<div class="outline-text-4" id="text-orge517995">
<ul class="org-ul">
<li><p>
Abre la terminal y ejecuta el siguiente comando para verificar si ya tienes llaves SSH generadas:
</p>
<div class="org-src-container">
<pre class="src src-bash">     ls -al ~/.ssh
</pre>
</div></li>

<li>Si ves archivos como `id<sub>rsa</sub>` o `id<sub>ed25519</sub>`, ya tienes llaves SSH. Si no, continúa con el siguiente paso.</li>
</ul>
</div>
</div>

<div id="outline-container-orgd8662de" class="outline-4">
<h4 id="orgd8662de">2. Generar una nueva llave SSH</h4>
<div class="outline-text-4" id="text-orgd8662de">
<ul class="org-ul">
<li><p>
Si no tienes una llave SSH, genera una nueva con el siguiente comando (puedes cambiar `ed25519` por `rsa` si lo prefieres):
</p>
<div class="org-src-container">
<pre class="src src-bash">     ssh-keygen -t ed25519 -C <span style="color: #8b2252;">"tuemail@ejemplo.com"</span>
</pre>
</div></li>

<li>Cuando se te pregunte por la ubicación del archivo, presiona `Enter` para usar la ubicación predeterminada (`~/.ssh/id<sub>ed25519</sub>`).</li>
<li>Puedes agregar una contraseña para proteger tu llave, pero también puedes dejarlo en blanco.</li>
</ul>
</div>
</div>

<div id="outline-container-org14be3bf" class="outline-4">
<h4 id="org14be3bf">3. Añadir la llave SSH al agente SSH</h4>
<div class="outline-text-4" id="text-org14be3bf">
<ul class="org-ul">
<li><p>
Para añadir tu nueva llave SSH al agente, asegúrate de que esté en ejecución:
</p>
<div class="org-src-container">
<pre class="src src-bash">     <span style="color: #483d8b;">eval</span> <span style="color: #8b2252;">"$(ssh-agent -s)"</span>
</pre>
</div></li>

<li><p>
Añade la llave SSH al agente:
</p>
<div class="org-src-container">
<pre class="src src-bash">     ssh-add ~/.ssh/id_ed25519
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-org4a42166" class="outline-4">
<h4 id="org4a42166">4. Copiar la llave SSH pública</h4>
<div class="outline-text-4" id="text-org4a42166">
<ul class="org-ul">
<li><p>
Copia el contenido de tu llave pública para añadirla a GitHub:
</p>
<div class="org-src-container">
<pre class="src src-bash">     cat ~/.ssh/id_ed25519.pub
</pre>
</div></li>

<li>Copia el texto que aparece en la terminal (comienza con `ssh-ed25519` o `ssh-rsa`).</li>
</ul>
</div>
</div>

<div id="outline-container-org9752ef3" class="outline-4">
<h4 id="org9752ef3">5. Añadir la llave SSH a GitHub</h4>
<div class="outline-text-4" id="text-org9752ef3">
<ul class="org-ul">
<li>Inicia sesión en tu cuenta de GitHub.</li>
<li>Ve a la sección de <b>Settings</b> (Configuración).</li>
<li>En el menú lateral izquierdo, selecciona <b><b>SSH and GPG keys</b></b>.</li>
<li>Haz clic en <b>New SSH key</b>.</li>
<li>Introduce un título para identificar la llave (por ejemplo, "Mi computadora personal") y pega la llave pública copiada en el campo correspondiente.</li>
<li>Haz clic en <b>Add SSH key</b>.</li>
</ul>
</div>
</div>

<div id="outline-container-org10f9f0d" class="outline-4">
<h4 id="org10f9f0d">6. Probar la conexión SSH con GitHub</h4>
<div class="outline-text-4" id="text-org10f9f0d">
<ul class="org-ul">
<li><p>
Para verificar que todo está configurado correctamente, ejecuta el siguiente comando:
</p>
<div class="org-src-container">
<pre class="src src-bash">     ssh -T git@github.com
</pre>
</div></li>

<li>Si es la primera vez que te conectas, verás una advertencia preguntando si deseas continuar. Escribe `yes`.</li>
<li><p>
Si la conexión es exitosa, verás un mensaje similar a:
</p>
<blockquote>
<p>
Hi username! You've successfully authenticated, but GitHub does not provide shell access.
</p>
</blockquote></li>
</ul>
</div>
</div>

<div id="outline-container-orgb5011d0" class="outline-4">
<h4 id="orgb5011d0">7. Usar la conexión SSH en repositorios de GitHub</h4>
<div class="outline-text-4" id="text-orgb5011d0">
<ul class="org-ul">
<li><p>
Para clonar un repositorio usando SSH, utiliza la URL SSH del repositorio:
</p>
<div class="org-src-container">
<pre class="src src-bash">     git clone git@github.com:usuario/repo.git
</pre>
</div></li>
</ul>
</div>
</div>
</div>



<div id="outline-container-orgf2a05a8" class="outline-3">
<h3 id="orgf2a05a8">Configurar Llave SSH con GitHub en Windows</h3>
<div class="outline-text-3" id="text-orgf2a05a8">
<ol class="org-ol">
<li>Git Bash: En Windows, utilizas Git Bash como terminal para ejecutar los comandos, en lugar de la terminal estándar de Linux o macOS.</li>

<li>Ruta de las llaves: En Git Bash, las rutas siguen el formato Unix (<i>c/Users/tu<sub>usuario</sub></i>.ssh/ en lugar de C:\Users\tu<sub>usuario\.ssh</sub>).</li>
</ol>
</div>



<div id="outline-container-orgf31160f" class="outline-4">
<h4 id="orgf31160f">1. Abrir Git Bash</h4>
<div class="outline-text-4" id="text-orgf31160f">
<ul class="org-ul">
<li>Abre <b><b>Git Bash</b></b> (es la terminal que se instala junto con Git en Windows).</li>
</ul>
</div>
</div>

<div id="outline-container-org87182c1" class="outline-4">
<h4 id="org87182c1">2. Verificar si ya tienes una llave SSH</h4>
<div class="outline-text-4" id="text-org87182c1">
<ul class="org-ul">
<li><p>
En la terminal de Git Bash, ejecuta el siguiente comando para ver si ya tienes llaves SSH generadas:
</p>
<div class="org-src-container">
<pre class="src src-bash">     ls -al ~/.ssh
</pre>
</div></li>

<li>Si ves archivos como `id<sub>rsa</sub>` o `id<sub>ed25519</sub>`, ya tienes llaves SSH. Si no, continúa con el siguiente paso.</li>
</ul>
</div>
</div>

<div id="outline-container-orgda2adfb" class="outline-4">
<h4 id="orgda2adfb">3. Generar una nueva llave SSH</h4>
<div class="outline-text-4" id="text-orgda2adfb">
<ul class="org-ul">
<li><p>
Si no tienes una llave SSH, genera una nueva con el siguiente comando:
</p>
<div class="org-src-container">
<pre class="src src-bash">     ssh-keygen -t ed25519 -C <span style="color: #8b2252;">"tuemail@ejemplo.com"</span>
</pre>
</div></li>

<li>Cuando se te pregunte por la ubicación del archivo, presiona `Enter` para usar la ubicación predeterminada (`/c/Users/tu<sub>usuario</sub>/.ssh/id<sub>ed25519</sub>`).</li>
<li>Puedes agregar una contraseña para proteger tu llave, pero también puedes dejar el campo vacío si no deseas protegerla con una contraseña.</li>
</ul>
</div>
</div>

<div id="outline-container-orgd747195" class="outline-4">
<h4 id="orgd747195">4. Añadir la llave SSH al agente SSH</h4>
<div class="outline-text-4" id="text-orgd747195">
<ul class="org-ul">
<li><p>
Asegúrate de que el agente SSH esté en ejecución. En Git Bash, ejecuta:
</p>
<div class="org-src-container">
<pre class="src src-bash">     <span style="color: #483d8b;">eval</span> <span style="color: #8b2252;">"$(ssh-agent -s)"</span>
</pre>
</div></li>

<li><p>
Añade tu nueva llave SSH al agente:
</p>
<div class="org-src-container">
<pre class="src src-bash">     ssh-add ~/.ssh/id_ed25519
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-orgea86213" class="outline-4">
<h4 id="orgea86213">5. Copiar la llave SSH pública</h4>
<div class="outline-text-4" id="text-orgea86213">
<ul class="org-ul">
<li><p>
Para añadir la llave SSH a GitHub, necesitas copiar tu llave pública. Ejecuta el siguiente comando en Git Bash:
</p>
<div class="org-src-container">
<pre class="src src-bash">     cat ~/.ssh/id_ed25519.pub
</pre>
</div></li>

<li>Copia el texto que aparece en la terminal, que comenzará con `ssh-ed25519` o `ssh-rsa`.</li>
</ul>
</div>
</div>

<div id="outline-container-org87f8f7c" class="outline-4">
<h4 id="org87f8f7c">6. Añadir la llave SSH a GitHub</h4>
<div class="outline-text-4" id="text-org87f8f7c">
<ul class="org-ul">
<li>Abre tu navegador web e inicia sesión en GitHub.</li>
<li>Ve a la sección de <b>Settings</b> (Configuración).</li>
<li>En el menú lateral izquierdo, selecciona <b><b>SSH and GPG keys</b></b>.</li>
<li>Haz clic en <b>New SSH key</b>.</li>
<li>Ponle un título descriptivo (como "Mi computadora con Windows") y pega la llave pública copiada en el campo correspondiente.</li>
<li>Haz clic en <b>Add SSH key</b>.</li>
</ul>
</div>
</div>

<div id="outline-container-org246c66d" class="outline-4">
<h4 id="org246c66d">7. Probar la conexión SSH con GitHub</h4>
<div class="outline-text-4" id="text-org246c66d">
<ul class="org-ul">
<li><p>
Para asegurarte de que todo está correctamente configurado, prueba la conexión con GitHub desde Git Bash:
</p>
<div class="org-src-container">
<pre class="src src-bash">     ssh -T git@github.com
</pre>
</div></li>

<li>Si es la primera vez que te conectas, te pedirá confirmar la conexión escribiendo `yes`.</li>
<li><p>
Si todo está bien, deberías ver un mensaje como:
</p>
<blockquote>
<p>
Hi username! You've successfully authenticated, but GitHub does not provide shell access.
</p>
</blockquote></li>
</ul>
</div>
</div>

<div id="outline-container-org55eac9c" class="outline-4">
<h4 id="org55eac9c">8. Usar la conexión SSH en repositorios de GitHub</h4>
<div class="outline-text-4" id="text-org55eac9c">
<ul class="org-ul">
<li><p>
Para clonar un repositorio usando la URL SSH, ejecuta:
</p>
<div class="org-src-container">
<pre class="src src-bash">     git clone git@github.com:usuario/repo.git
</pre>
</div></li>
</ul>
</div>
</div>
</div>




<div id="outline-container-orgdb3b333" class="outline-3">
<h3 id="orgdb3b333">Manual de Git en Windows</h3>
<div class="outline-text-3" id="text-orgdb3b333">
</div>
<div id="outline-container-org63b8aba" class="outline-4">
<h4 id="org63b8aba">1. Instalar Git en Windows</h4>
<div class="outline-text-4" id="text-org63b8aba">
<ul class="org-ul">
<li>Visita [<a href="https://git-scm.com/">https://git-scm.com/</a>](<a href="https://git-scm.com/">https://git-scm.com/</a>) y descarga el instalador de Git para Windows.</li>
<li>Ejecuta el archivo descargado (.exe).</li>
<li>Durante la instalación, selecciona las opciones predeterminadas recomendadas.</li>
<li>Abre <b>Git Bash</b> al finalizar la instalación.</li>
</ul>
</div>
</div>

<div id="outline-container-org5130cb6" class="outline-4">
<h4 id="org5130cb6">2. Configurar Git</h4>
<div class="outline-text-4" id="text-org5130cb6">
<ul class="org-ul">
<li>Abre <b>Git Bash</b> y ejecuta los siguientes comandos para configurar tu identidad:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git config --global user.name <span style="color: #8b2252;">"Tu Nombre"</span>
   git config --global user.email <span style="color: #8b2252;">"tuemail@ejemplo.com"</span>
</pre>
</div>

<ul class="org-ul">
<li>Para verificar la configuración:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git config --list
</pre>
</div>
</div>
</div>

<div id="outline-container-orge687ae6" class="outline-4">
<h4 id="orge687ae6">3. Clonar un repositorio</h4>
<div class="outline-text-4" id="text-orge687ae6">
<ul class="org-ul">
<li>Para clonar un repositorio desde GitHub, usa el siguiente comando:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git clone https://github.com/usuario/repo.git
</pre>
</div>

<p>
Esto descargará el repositorio a tu computadora.
</p>
</div>
</div>

<div id="outline-container-org0c2ae2f" class="outline-4">
<h4 id="org0c2ae2f">4. Comandos básicos de Git</h4>
<div class="outline-text-4" id="text-org0c2ae2f">
<ul class="org-ul">
<li><b>Verificar el estado del repositorio</b>:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git status
</pre>
</div>

<ul class="org-ul">
<li><b>Añadir archivos al área de preparación (staging)</b>:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git add nombre_de_archivo
</pre>
</div>

<ul class="org-ul">
<li>Para añadir todos los archivos modificados:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git add .
</pre>
</div>

<ul class="org-ul">
<li><b>Hacer un commit</b> (guardar los cambios localmente):</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git commit -m <span style="color: #8b2252;">"Mensaje de commit"</span>
</pre>
</div>

<ul class="org-ul">
<li><b>Enviar los cambios al repositorio remoto</b>:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git push
</pre>
</div>
</div>
</div>

<div id="outline-container-orgb7b9210" class="outline-4">
<h4 id="orgb7b9210">5. Actualizar el repositorio local</h4>
<div class="outline-text-4" id="text-orgb7b9210">
<ul class="org-ul">
<li>Para obtener los últimos cambios del repositorio remoto:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git pull
</pre>
</div>
</div>
</div>

<div id="outline-container-org5e87271" class="outline-4">
<h4 id="org5e87271">6. Crear y cambiar de ramas (branches)</h4>
<div class="outline-text-4" id="text-org5e87271">
<ul class="org-ul">
<li><b>Crear una nueva rama</b>:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git branch nombre_de_la_rama
</pre>
</div>

<ul class="org-ul">
<li><b>Cambiar a una rama existente</b>:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git checkout nombre_de_la_rama
</pre>
</div>

<ul class="org-ul">
<li><b>Crear y cambiar a una nueva rama</b>:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git checkout -b nombre_de_la_rama
</pre>
</div>
</div>
</div>

<div id="outline-container-org5200855" class="outline-4">
<h4 id="org5200855">7. Ver historial de commits</h4>
<div class="outline-text-4" id="text-org5200855">
<ul class="org-ul">
<li>Para ver el historial de cambios del repositorio:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git log
</pre>
</div>

<ul class="org-ul">
<li>Para un historial más compacto:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   git log --oneline
</pre>
</div>
</div>
</div>

<div id="outline-container-org918a2b1" class="outline-4">
<h4 id="org918a2b1">8. Configurar una llave SSH</h4>
<div class="outline-text-4" id="text-org918a2b1">
<ul class="org-ul">
<li><b>Generar una llave SSH</b>:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   ssh-keygen -t ed25519 -C <span style="color: #8b2252;">"tuemail@ejemplo.com"</span>
</pre>
</div>

<ul class="org-ul">
<li><b>Añadir la llave al agente SSH</b>:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   <span style="color: #483d8b;">eval</span> <span style="color: #8b2252;">"$(ssh-agent -s)"</span>
   ssh-add ~/.ssh/id_ed25519
</pre>
</div>

<ul class="org-ul">
<li><b>Copiar la llave pública</b>:</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">   cat ~/.ssh/id_ed25519.pub
</pre>
</div>

<ul class="org-ul">
<li>Añádela a tu cuenta de GitHub en <b>Settings &gt; SSH and GPG keys</b>.</li>
</ul>
</div>
</div>
</div>
</div>


<div id="outline-container-org1d915cd" class="outline-2">
<h2 id="org1d915cd">Manual de Instalación de Python en Windows</h2>
<div class="outline-text-2" id="text-org1d915cd">
</div>
<div id="outline-container-orgf739dc3" class="outline-3">
<h3 id="orgf739dc3">Paso 1: Descarga de Python</h3>
<div class="outline-text-3" id="text-orgf739dc3">
<ol class="org-ol">
<li>Abre el navegador web y visita el sitio: <a href="https://www.python.org">https://www.python.org</a>.</li>
<li>Ve a la pestaña "Downloads" y selecciona la versión más reciente para Windows.</li>
<li>Haz clic en el botón que dice "Download Python (versión actual)" para descargar el instalador de Python.</li>
</ol>
</div>
</div>

<div id="outline-container-org4667da8" class="outline-3">
<h3 id="org4667da8">Paso 2: Ejecutar el instalador</h3>
<div class="outline-text-3" id="text-org4667da8">
<ol class="org-ol">
<li>Ejecuta el archivo descargado (.exe).</li>
<li>Asegúrate de marcar la opción <code>Add Python to PATH</code> antes de proceder con la instalación.</li>
<li>Haz clic en <code>Install Now</code> para instalar con la configuración predeterminada.</li>
<li>Espera a que finalice el proceso de instalación y verifica el mensaje de éxito.</li>
</ol>
</div>
</div>

<div id="outline-container-orgfcb3b39" class="outline-3">
<h3 id="orgfcb3b39">Paso 3: Verificación de la instalación</h3>
<div class="outline-text-3" id="text-orgfcb3b39">
<ol class="org-ol">
<li>Abre la línea de comandos (cmd) escribiendo "cmd" en el menú de inicio.</li>
<li><p>
Verifica que Python se instaló correctamente ejecutando el siguiente comando:
</p>
<div class="org-src-container">
<pre class="src src-bash">      python --version
</pre>
</div></li>
<li><p>
Abre el intérprete de Python escribiendo <code>python</code> en la línea de comandos:
</p>
<div class="org-src-container">
<pre class="src src-bash">      python
</pre>
</div>
<p>
Si todo está bien, verás el prompt interactivo de Python (tres símbolos <code>&gt;&gt;&gt;</code>).
</p></li>
<li>Para salir del intérprete, escribe <code>exit()</code> o presiona <code>Ctrl + Z</code> seguido de <code>Enter</code>.</li>
</ol>
</div>
</div>

<div id="outline-container-orgbbe8259" class="outline-3">
<h3 id="orgbbe8259">Paso 4: Instalar pip y otros paquetes</h3>
<div class="outline-text-3" id="text-orgbbe8259">
<ol class="org-ol">
<li><p>
Verifica si pip está instalado escribiendo en la línea de comandos:
</p>
<div class="org-src-container">
<pre class="src src-bash">      pip --version
</pre>
</div></li>
<li><p>
Si necesitas instalar paquetes, usa pip con el siguiente comando:
</p>
<div class="org-src-container">
<pre class="src src-bash">      pip install nombre_paquete
</pre>
</div></li>
</ol>
</div>
</div>

<div id="outline-container-org8b6a994" class="outline-3">
<h3 id="org8b6a994">Paso 5: Configuración del entorno de desarrollo</h3>
<div class="outline-text-3" id="text-org8b6a994">
<ol class="org-ol">
<li>Instala un editor de código como:
<ul class="org-ul">
<li><a href="https://code.visualstudio.com">Visual Studio Code</a></li>
<li><a href="https://www.jetbrains.com/pycharm/">PyCharm</a></li>
</ul></li>
<li>Configura el editor instalando las extensiones de Python. En Visual Studio Code, busca la extensión "Python" en el panel de extensiones.</li>
</ol>
</div>
</div>

<div id="outline-container-org650adc5" class="outline-3">
<h3 id="org650adc5">Paso 6: Actualización de Python (opcional)</h3>
<div class="outline-text-3" id="text-org650adc5">
<ul class="org-ul">
<li>Para actualizar Python a una nueva versión en el futuro, descarga la última versión desde <a href="https://www.python.org/downloads/">python.org</a> y sigue los pasos de instalación.</li>
</ul>
</div>
</div>
</div>



<div id="outline-container-org5d00a09" class="outline-2">
<h2 id="org5d00a09">Entornos Virtuales en Python</h2>
<div class="outline-text-2" id="text-org5d00a09">
</div>
<div id="outline-container-org2950695" class="outline-3">
<h3 id="org2950695">¿Qué es un Entorno Virtual?</h3>
<div class="outline-text-3" id="text-org2950695">
<p>
Un <b>entorno virtual</b> es una herramienta que permite crear un espacio
aislado para instalar dependencias específicas de un proyecto en
Python. Esto evita conflictos entre paquetes de diferentes proyectos.
</p>
</div>
</div>

<div id="outline-container-orgdfed979" class="outline-3">
<h3 id="orgdfed979">Preparación: Instalación de Python y Visual Studio Code</h3>
<div class="outline-text-3" id="text-orgdfed979">
<ol class="org-ol">
<li><p>
Asegúrate de tener Python instalado en tu sistema. Puedes verificarlo con:
</p>
<div class="org-src-container">
<pre class="src src-sh">   python --version
</pre>
</div></li>
<li>Descarga e instala [Visual Studio Code](<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a>).</li>
<li>Instala la extensión de <b>Python</b> en VS Code para habilitar características avanzadas, como la detección de entornos virtuales, depuración, y autocompletado.</li>
</ol>
</div>
</div>

<div id="outline-container-org293f33c" class="outline-3">
<h3 id="org293f33c">Crear un Entorno Virtual</h3>
<div class="outline-text-3" id="text-org293f33c">
<p>
Para crear un entorno virtual en la carpeta de tu proyecto:
</p>

<ol class="org-ol">
<li>Abre la terminal integrada en VS Code (menú <b>Terminal &gt; New Terminal</b>).</li>
<li><p>
Usa el siguiente comando para crear el entorno virtual:
</p>
<div class="org-src-container">
<pre class="src src-sh">   python -m venv nombre_entorno
</pre>
</div>
<ul class="org-ul">
<li>Sustituye <b>nombre<sub>entorno</sub></b> con el nombre que quieras para el entorno virtual, como `env` o `venv`.</li>
</ul></li>
</ol>
</div>
</div>

<div id="outline-container-org48986a9" class="outline-3">
<h3 id="org48986a9">Activar el Entorno Virtual</h3>
<div class="outline-text-3" id="text-org48986a9">
<p>
Para activar el entorno virtual en la terminal de VS Code:
</p>

<ul class="org-ul">
<li><p>
En Linux/macOS:
</p>
<div class="org-src-container">
<pre class="src src-sh">  <span style="color: #483d8b;">source</span> nombre_entorno/bin/activate
</pre>
</div></li>

<li><p>
En Windows:
</p>
<div class="org-src-container">
<pre class="src src-sh">  .\nombre_entorno\Scripts\activate
</pre>
</div></li>
</ul>

<p>
Cuando el entorno esté activado, verás el nombre del entorno en la terminal.
</p>
</div>
</div>

<div id="outline-container-org286147d" class="outline-3">
<h3 id="org286147d">Configurar el Entorno Virtual en Visual Studio Code</h3>
<div class="outline-text-3" id="text-org286147d">
<p>
Para que VS Code use el entorno virtual para ejecutar el código y detectar dependencias:
</p>

<ol class="org-ol">
<li>Presiona `Ctrl+Shift+P` (o `Cmd+Shift+P` en macOS) para abrir la <b>Command Palette</b>.</li>
<li>Busca y selecciona `Python: Select Interpreter`.</li>
<li>En la lista de intérpretes, selecciona el que corresponde a tu
entorno virtual (debería tener el nombre del entorno que creaste).</li>
</ol>
</div>
</div>

<div id="outline-container-org20652b9" class="outline-3">
<h3 id="org20652b9">Instalar Paquetes en el Entorno Virtual</h3>
<div class="outline-text-3" id="text-org20652b9">
<p>
Con el entorno activado en la terminal de VS Code, puedes instalar paquetes con `pip`:
</p>

<div class="org-src-container">
<pre class="src src-sh">pip install nombre_paquete
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc25aa2c" class="outline-3">
<h3 id="orgc25aa2c">Administrar Paquetes</h3>
<div class="outline-text-3" id="text-orgc25aa2c">
<p>
Para ver los paquetes instalados en el entorno virtual:
</p>

<div class="org-src-container">
<pre class="src src-sh">pip list
</pre>
</div>

<p>
También puedes usar el archivo <b>requirements.txt</b> para gestionar dependencias del proyecto. Para crearlo:
</p>

<ol class="org-ol">
<li><p>
Ejecuta:
</p>
<div class="org-src-container">
<pre class="src src-sh">   pip freeze &gt; requirements.txt
</pre>
</div></li>

<li><p>
Para instalar todas las dependencias listadas en <b>requirements.txt</b> en otro entorno, usa:
</p>
<div class="org-src-container">
<pre class="src src-sh">   pip install -r requirements.txt
</pre>
</div></li>
</ol>
</div>
</div>

<div id="outline-container-org5cdbfa5" class="outline-3">
<h3 id="org5cdbfa5">Desactivar el Entorno Virtual</h3>
<div class="outline-text-3" id="text-org5cdbfa5">
<p>
Para desactivar el entorno virtual en la terminal, ejecuta:
</p>

<div class="org-src-container">
<pre class="src src-sh">deactivate
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc71f7f8" class="outline-3">
<h3 id="orgc71f7f8">Eliminar el Entorno Virtual</h3>
<div class="outline-text-3" id="text-orgc71f7f8">
<p>
Si deseas eliminar el entorno virtual, puedes simplemente borrar la carpeta:
</p>

<div class="org-src-container">
<pre class="src src-sh">rm -rf nombre_entorno
</pre>
</div>
</div>
</div>


<div id="outline-container-org0d7c2a5" class="outline-3">
<h3 id="org0d7c2a5">Consejos Adicionales para VS Code</h3>
<div class="outline-text-3" id="text-org0d7c2a5">
<ul class="org-ul">
<li><p>
<b><b>Terminal automática</b></b>: Cuando creas y activas un entorno en VS Code, puedes configurar el archivo `.vscode/settings.json` para que VS Code lo active automáticamente en cada terminal nueva:
</p>
<div class="org-src-container">
<pre class="src src-json">  {
    "python.venvPath": "${workspaceFolder}/nombre_entorno",
    "python.defaultInterpreterPath": "${workspaceFolder}/nombre_entorno/bin/python"
  }
</pre>
</div></li>
</ul>
</div>
</div>
</div>





<div id="outline-container-orgab0a203" class="outline-2">
<h2 id="orgab0a203">Introducción a la Graficación por computadora</h2>
<div class="outline-text-2" id="text-orgab0a203">
</div>
<div id="outline-container-org4ec4783" class="outline-3">
<h3 id="org4ec4783">Graficación por Computadora</h3>
<div class="outline-text-3" id="text-org4ec4783">
<p>
La  Graficación por Computadora (o simplemente Graficación)
se enfoca en el estudio y aplicación de técnicas, algoritmos y
herramientas para la generación y manipulación de imágenes digitales
mediante el uso de computadoras. Es una rama de la informática que
combina conceptos de matemáticas, física y programación para crear
imágenes, animaciones y efectos visuales. A continuación, te describo
los aspectos clave de esta disciplina:
</p>
</div>

<div id="outline-container-org4b11fdb" class="outline-4">
<h4 id="org4b11fdb">Objetivos de la Graficación por Computadora</h4>
<div class="outline-text-4" id="text-org4b11fdb">
<ol class="org-ol">
<li><b>Generación de imágenes</b>: Crear imágenes digitales a partir de descripciones matemáticas y geométricas de objetos, en 2D y 3D.</li>
<li><b>Modelado de objetos</b>: Crear representaciones matemáticas de objetos y escenas usando técnicas como polígonos, mallas y curvas.</li>
<li><b>Renderizado</b>: Convertir representaciones matemáticas en imágenes visuales, simulando iluminación, sombras y texturas.</li>
<li><b>Transformaciones geométricas</b>: Aplicar traslaciones, rotaciones, escalados y proyecciones a objetos en sistemas de coordenadas 2D y 3D.</li>
<li><b>Iluminación y sombreado</b>: Simular cómo la luz interactúa con los objetos para crear efectos realistas.</li>
<li><b>Animación</b>: Generar secuencias de imágenes que cambian a lo largo del tiempo, incluyendo movimientos y simulaciones físicas.</li>
<li><b>Texturizado</b>: Aplicar imágenes (texturas) sobre superficies para dar detalles visuales sin aumentar la complejidad geométrica.</li>
<li><b>Interacción gráfica</b>: Estudiar técnicas para interactuar con imágenes o modelos gráficos, como interfaces gráficas, realidad aumentada o virtual.</li>
</ol>
</div>
</div>

<div id="outline-container-org22c0171" class="outline-4">
<h4 id="org22c0171">Áreas de estudio en Graficación por Computadora</h4>
<div class="outline-text-4" id="text-org22c0171">
<ol class="org-ol">
<li><b>Matemáticas</b>: Uso de geometría y álgebra lineal para realizar transformaciones geométricas y modelar objetos.</li>
<li><b>Programación</b>: Conocimiento de lenguajes como C++, Python, GLSL y HLSL para implementar algoritmos gráficos.</li>
<li><b>Algoritmos gráficos</b>: Estudio de algoritmos como el trazado de rayos (ray tracing), rasterización y z-buffering.</li>
<li><b>Herramientas gráficas</b>: Uso de APIs como OpenGL, DirectX o Vulkan para crear gráficos y animaciones.</li>
<li><b>Física aplicada</b>: Simulación de fenómenos físicos como gravedad y movimiento para generar gráficos realistas.</li>
</ol>
</div>
</div>

<div id="outline-container-org1bae212" class="outline-4">
<h4 id="org1bae212">Aplicaciones de la Graficación por Computadora</h4>
<div class="outline-text-4" id="text-org1bae212">
<ul class="org-ul">
<li><b>Videojuegos</b>: Creación de ambientes, personajes y efectos visuales.</li>
<li><b>Cine y efectos visuales</b>: Creación de efectos especiales y animación por computadora.</li>
<li><b>Diseño industrial y arquitectónico</b>: Modelado y visualización de prototipos y estructuras.</li>
<li><b>Simulaciones</b>: Uso en medicina, aeronáutica y otras industrias para crear simulaciones realistas.</li>
<li><b>Realidad virtual y aumentada</b>: Generación de entornos interactivos virtuales.</li>
</ul>
</div>
</div>

<div id="outline-container-orgd6968e9" class="outline-4">
<h4 id="orgd6968e9">Temas principales en Graficación por Computadora</h4>
<div class="outline-text-4" id="text-orgd6968e9">
<ul class="org-ul">
<li><b>Modelado 2D y 3D</b></li>
<li><b>Algoritmos de rasterización</b></li>
<li><b>Transformaciones y proyecciones</b></li>
<li><b>Renderizado y sombreado</b></li>
<li><b>Texturizado</b></li>
<li><b>Iluminación global y local</b></li>
<li><b>Técnicas de animación</b></li>
<li><b>Programación de shaders</b></li>
<li><b>Interacción gráfica y diseño de interfaces</b></li>
</ul>
</div>
</div>
</div>


<div id="outline-container-org3a261de" class="outline-3">
<h3 id="org3a261de">Modelos de Color: RGB, CMY, HSV y HSL</h3>
</div>

<div id="outline-container-orgf5fa200" class="outline-3">
<h3 id="orgf5fa200">Introducción</h3>
<div class="outline-text-3" id="text-orgf5fa200">
<p>
Los <b>modelos de color</b> son representaciones matemáticas que describen
cómo los colores pueden representarse en diversas formas utilizando
valores numéricos. Estos modelos son esenciales en gráficos por
computadora, procesamiento de imágenes y en la percepción del color. A
continuación, se detallan los modelos más comunes: RGB, CMY, HSV y
HSL.
</p>
</div>
</div>

<div id="outline-container-org591bf10" class="outline-3">
<h3 id="org591bf10">Modelo de Color RGB (Red, Green, Blue)</h3>
</div>

<div id="outline-container-orgb8e0b81" class="outline-3">
<h3 id="orgb8e0b81">Definición</h3>
<div class="outline-text-3" id="text-orgb8e0b81">
<p>
El modelo de color <b>RGB</b> (Rojo, Verde, Azul) es un modelo de mezcla aditiva, que se utiliza principalmente en dispositivos que emiten luz, como pantallas, cámaras digitales y proyectores. Los tres colores primarios (Rojo, Verde y Azul) se combinan de diferentes maneras para crear una amplia gama de colores.
</p>
</div>
</div>

<div id="outline-container-orgb4b741b" class="outline-3">
<h3 id="orgb4b741b">Funcionamiento de la Mezcla Aditiva</h3>
<div class="outline-text-3" id="text-orgb4b741b">
<p>
En el modelo RGB, los colores se generan mediante la combinación de luz. Cuanto más intensa es la luz en cada canal (rojo, verde o azul), más claro es el color resultante. Cuando todas las intensidades están al máximo, el color resultante es blanco; cuando todas las intensidades están al mínimo, el resultado es negro.
</p>

<ul class="org-ul">
<li><b>Fórmula para la mezcla aditiva</b>:
\[
  \text{Color} = R \cdot \mathbf{r} + G \cdot \mathbf{g} + B \cdot \mathbf{b}
  \]
donde:
<ul class="org-ul">
<li>\(R\), \(G\) y \(B\) son las intensidades de los canales rojo, verde y azul, respectivamente.</li>
<li>\( \mathbf{r} \), \( \mathbf{g} \) y \( \mathbf{b} \) son los vectores unitarios que representan los colores primarios.</li>
</ul></li>

<li><b>Ejemplo</b>:
<ul class="org-ul">
<li>Si \( R = 255 \), \( G = 0 \), \( B = 0 \), obtenemos un color rojo puro.</li>
<li>Si \( R = 0 \), \( G = 255 \), \( B = 0 \), obtenemos un color verde puro.</li>
<li>Si \( R = 255 \), \( G = 255 \), \( B = 0 \), obtenemos el color amarillo.</li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-orgc0cc421" class="outline-3">
<h3 id="orgc0cc421">Espacio de Color RGB</h3>
<div class="outline-text-3" id="text-orgc0cc421">
<p>
El espacio de color <b>RGB</b> puede representarse como un cubo tridimensional, donde:
</p>
<ul class="org-ul">
<li>El eje X corresponde al canal rojo (\(R\)),</li>
<li>El eje Y al canal verde (\(G\)),</li>
<li>Y el eje Z al canal azul (\(B\)).</li>
</ul>

<p>
Cada vértice del cubo representa un color primario o la combinación de ellos, como se muestra a continuación:
</p>
<ul class="org-ul">
<li>\( (0, 0, 0) \): Negro (ausencia de luz).</li>
<li>\( (255, 0, 0) \): Rojo.</li>
<li>\( (0, 255, 0) \): Verde.</li>
<li>\( (0, 0, 255) \): Azul.</li>
<li>\( (255, 255, 255) \): Blanco (máxima intensidad en todos los canales).</li>
<li>\( (255, 255, 0) \): Amarillo (combinación de rojo y verde).</li>
</ul>

<p>
Este espacio de color es útil para representar los colores generados en dispositivos electrónicos, ya que estos emiten luz en diferentes combinaciones de rojo, verde y azul.
</p>
</div>
</div>

<div id="outline-container-orgcd3dd2d" class="outline-3">
<h3 id="orgcd3dd2d">Conversión a otros modelos de color</h3>
<div class="outline-text-3" id="text-orgcd3dd2d">
<p>
El modelo RGB puede convertirse a otros espacios de color como <b>CMY</b>, <b>HSV</b> o <b>HSL</b>. A continuación se muestra la conversión básica de RGB a CMY:
</p>

<ul class="org-ul">
<li><b>Conversión de RGB a CMY</b>:
\[
  C = 1 - \left( \frac{R}{255} \right), \quad M = 1 - \left( \frac{G}{255} \right), \quad Y = 1 - \left( \frac{B}{255} \right)
  \]
donde \(R\), \(G\), y \(B\) son las intensidades de los canales en el rango de [0, 255].</li>
</ul>
</div>
</div>

<div id="outline-container-org4741fe3" class="outline-3">
<h3 id="org4741fe3">Aplicaciones del Modelo RGB</h3>
<div class="outline-text-3" id="text-org4741fe3">
<p>
El modelo de color RGB se usa ampliamente en:
</p>
<ul class="org-ul">
<li><b>Monitores y pantallas</b>: Dispositivos como televisores, monitores de computadora y pantallas de teléfonos móviles utilizan píxeles que emiten luz en diferentes intensidades de rojo, verde y azul para representar imágenes.</li>
<li><b>Cámaras digitales</b>: Los sensores de las cámaras capturan la luz en estos tres canales para generar imágenes en color.</li>
<li><b>Gráficos por computadora</b>: El modelo RGB es esencial en software de edición de imágenes, renderizado 3D y creación de gráficos visuales.</li>
</ul>
</div>
</div>

<div id="outline-container-org57927b9" class="outline-3">
<h3 id="org57927b9">Limitaciones del Modelo RGB</h3>
<div class="outline-text-3" id="text-org57927b9">
<p>
Aunque el modelo RGB es excelente para dispositivos que emiten luz, tiene algunas limitaciones:
</p>
<ul class="org-ul">
<li>No es intuitivo para el ser humano al ajustar el brillo o la saturación de un color, ya que requiere manipular los tres canales de manera independiente.</li>
<li>El modelo RGB no es el más adecuado para tareas de impresión, ya que en impresiones se usan modelos basados en la mezcla sustractiva de colores, como CMY o CMYK.</li>
</ul>
</div>
</div>





<div id="outline-container-org25fa17c" class="outline-3">
<h3 id="org25fa17c">Modelo CMY (Cyan, Magenta, Yellow)</h3>
<div class="outline-text-3" id="text-org25fa17c">
<p>
El modelo <b>CMY</b> es un modelo de mezcla sustractiva que utiliza los colores cian, magenta y amarillo. Es el modelo base para la impresión en color.
</p>

<ul class="org-ul">
<li><b>Características</b>:
<ul class="org-ul">
<li>Cada color se describe en términos de cuánto absorbe (resta) de la luz blanca que incide.</li>
</ul></li>

<li><b>Mezcla sustractiva</b>:
<ul class="org-ul">
<li><p>
La relación entre CMY y RGB es:
\[
	\text{C} = 1 - \left( \frac{R}{L} \right), \quad \text{M} = 1 - \left( \frac{G}{L} \right), \quad \text{Y} = 1 - \left( \frac{B}{L} \right)
	\]
</p>

<p>
donde \( L \) es el valor máximo de intensidad (por ejemplo, 255).
</p></li>
</ul></li>

<li><b>Conversión de RGB a CMY</b>:
<ul class="org-ul">
<li><p>
Si los valores RGB están normalizados entre 0 y 1:
</p>

<p>
\[
    \text{C} = 1 - R, \quad \text{M} = 1 - G, \quad \text{Y} = 1 - B
    \]
</p></li>
</ul></li>

<li><b>Aplicaciones</b>:
<ul class="org-ul">
<li>Utilizado en la impresión de imágenes en color, como impresoras de inyección de tinta y offset.</li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-orgb0de064" class="outline-3">
<h3 id="orgb0de064">Modelo HSV (Hue, Saturation, Value)</h3>
<div class="outline-text-3" id="text-orgb0de064">
<p>
El modelo <b>HSV</b> es una representación más intuitiva del color basada en la percepción humana, donde el matiz, la saturación y el valor describen un color.
</p>

<ul class="org-ul">
<li><b>Características</b>:
<ul class="org-ul">
<li><b>Matiz (Hue, H)</b>: Representa el ángulo en el círculo cromático, en grados [0°, 360°).</li>
<li><b>Saturación (S)</b>: Indica la pureza del color, rango de [0,1].</li>
<li><b>Valor (V)</b>: Define el brillo del color, rango de [0,1].</li>
</ul></li>

<li><b>Conversión de RGB a HSV</b>:
<ul class="org-ul">
<li><p>
Primero, normalizar los valores RGB entre 0 y 1:
\[
    R' = \frac{R}{L}, \quad G' = \frac{G}{L}, \quad B' = \frac{B}{L}
    \]
</p>

<p>
donde \( L \) es el valor máximo de intensidad (por ejemplo, 255).
</p></li>

<li>Calcular el valor máximo y mínimo:
\[
    C_{\max} = \max(R', G', B'), \quad C_{\min} = \min(R', G', B')
    \]</li>

<li>Diferencia:
\[
    \Delta = C_{\max} - C_{\min}
    \]</li>

<li><b>Cálculo del Matiz (H)</b>:
\[
    \text{Si } \Delta = 0 \Rightarrow H = 0 \\
    \text{Si } C_{\max} = R' \Rightarrow H = 60^\circ \times \left( \frac{G' - B'}{\Delta} \mod 6 \right) \\
    \text{Si } C_{\max} = G' \Rightarrow H = 60^\circ \times \left( \frac{B' - R'}{\Delta} + 2 \right) \\
    \text{Si } C_{\max} = B' \Rightarrow H = 60^\circ \times \left( \frac{R' - G'}{\Delta} + 4 \right)
    \]</li>

<li><b>Cálculo de la Saturación (S)</b>:
\[
    \text{Si } C_{\max} = 0 \Rightarrow S = 0 \\
    \text{Si no} \Rightarrow S = \frac{\Delta}{C_{\max}}
    \]</li>

<li><b>Cálculo del Valor (V)</b>:
\[
	V = C_{\max}
    \]</li>
</ul></li>

<li><b>Aplicaciones</b>:
<ul class="org-ul">
<li>Edición de imágenes, interfaces de selección de color y en procesamiento de video.</li>
</ul></li>

<li><b>Ejemplo</b>:
<ul class="org-ul">
<li>Convertir RGB (255, 255, 0) a HSV:
<ul class="org-ul">
<li>Normalizar:
\[
      R' = 1, \quad G' = 1, \quad B' = 0
      \]</li>
<li>\( C_{\max} = 1 \), \( C_{\min} = 0 \), \( \Delta = 1 \)</li>
<li>Calcular H:
\[
      H = 60^\circ \times \left( \frac{G' - B'}{\Delta} \mod 6 \right) = 60^\circ \times (1 \mod 6) = 60^\circ
      \]</li>
<li>Calcular S:
\[
      S = \frac{\Delta}{C_{\max}} = \frac{1}{1} = 1
      \]</li>
<li>Calcular V:
\[
      V = C_{\max} = 1
      \]</li>
<li><b>Resultado</b>: H = 60°, S = 1, V = 1 (Color amarillo)</li>
</ul></li>
</ul></li>
</ul>
</div>

<div id="outline-container-org65289f3" class="outline-4">
<h4 id="org65289f3">HSV opencv</h4>
</div>

<div id="outline-container-orgff5bb82" class="outline-4">
<h4 id="orgff5bb82">Tutorial: Umbrales en el Modelo de Color HSV</h4>
<div class="outline-text-4" id="text-orgff5bb82">
<p>
El espacio de color <b>HSV</b> (Hue, Saturation, Value) se utiliza para la segmentación de colores en OpenCV. A continuación, explicaremos los tres parámetros principales y cómo definir umbrales para detectar colores.
</p>
</div>
</div>

<div id="outline-container-org23f59f1" class="outline-4">
<h4 id="org23f59f1">Definición de los Parámetros del Modelo HSV</h4>
<div class="outline-text-4" id="text-org23f59f1">
<ul class="org-ul">
<li><b>Hue (H)</b>: Tono o color básico (rojo, verde, azul, etc.). En OpenCV va de 0 a 179.</li>
<li><b>Saturation (S)</b>: Intensidad del color. Va de 0 a 255.</li>
<li><b>Value (V)</b>: Brillo del color. Va de 0 a 255.</li>
</ul>
</div>
</div>

<div id="outline-container-orge88ea6e" class="outline-4">
<h4 id="orge88ea6e">Detectar un color en el espacio HSV</h4>
<div class="outline-text-4" id="text-orge88ea6e">
<p>
Puedes definir un rango de color utilizando los valores de Hue, Saturation y Value para segmentar colores específicos en una imagen.
</p>
</div>

<ul class="org-ul">
<li><a id="orgb7623ee"></a>Código en Python para detectar un color (Verde)<br />
<div class="outline-text-5" id="text-orgb7623ee">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Leer la imagen</span>
<span style="color: #a0522d;">img</span> = cv2.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'imagen.jpg'</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir la imagen al espacio de color HSV</span>
<span style="color: #a0522d;">hsv</span> = cv2.cvtColor<span style="color: #707183;">(</span>img, cv2.COLOR_BGR2HSV<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir el rango inferior y superior para detectar verde</span>
<span style="color: #a0522d;">lower_green</span> = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>35, 100, 100<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Hue, Saturaci&#243;n, Brillo m&#237;nimos</span>
<span style="color: #a0522d;">upper_green</span> = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>85, 255, 255<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Hue, Saturaci&#243;n, Brillo m&#225;ximos</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una m&#225;scara que solo incluya los p&#237;xeles dentro del rango</span>
<span style="color: #a0522d;">mask</span> = cv2.inRange<span style="color: #707183;">(</span>hsv, lower_green, upper_green<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar la m&#225;scara a la imagen original</span>
<span style="color: #a0522d;">result</span> = cv2.bitwise_and<span style="color: #707183;">(</span>img, img, mask=mask<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen original y la imagen con el color detectado</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Imagen Original"</span>, img<span style="color: #707183;">)</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Color Detectado"</span>, result<span style="color: #707183;">)</span>
cv2.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</li>
</ul>
</div>

<div id="outline-container-org17ea087" class="outline-4">
<h4 id="org17ea087">Explicación de los Parámetros:</h4>
<div class="outline-text-4" id="text-org17ea087">
<ul class="org-ul">
<li><b>lower<sub>green</sub> = np.array([35, 100, 100])</b>:
<ul class="org-ul">
<li>El valor mínimo del tono es 35, correspondiente a un verde.</li>
<li>La saturación mínima es 100 para evitar colores desaturados.</li>
<li>El valor mínimo de brillo es 100 para evitar colores muy oscuros.</li>
</ul></li>

<li><b>upper<sub>green</sub> = np.array([85, 255, 255])</b>:
<ul class="org-ul">
<li>El valor máximo del tono es 85, cubriendo tonos verdes claros y oscuros.</li>
<li>La saturación máxima es 255 para incluir verdes vibrantes.</li>
<li>El valor máximo de brillo es 255 para incluir colores brillantes.</li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-orga339474" class="outline-4">
<h4 id="orga339474">Ajustes de los Umbrales</h4>
<div class="outline-text-4" id="text-orga339474">
<p>
Dependiendo de las condiciones de luz y el color exacto que deseas detectar, puedes ajustar los valores de Hue, Saturación y Brillo:
</p>

<ul class="org-ul">
<li><b><b>Hue (H)</b></b>: Ajusta el rango para detectar tonos específicos del color.</li>
<li><b><b>Saturation (S)</b></b>: Ajusta para incluir colores más o menos saturados.</li>
<li><b><b>Value (V)</b></b>: Ajusta para incluir colores más claros o más oscuros.</li>
</ul>
</div>
</div>

<div id="outline-container-orgb343f1f" class="outline-4">
<h4 id="orgb343f1f">Ejemplo visual: Rango de tonos para detectar verde</h4>
<div class="outline-text-4" id="text-orgb343f1f">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Color</th>
<th scope="col" class="org-right">Hue (H)</th>
<th scope="col" class="org-right">Saturación (S)</th>
<th scope="col" class="org-right">Brillo (V)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Verde claro</td>
<td class="org-right">35</td>
<td class="org-right">100</td>
<td class="org-right">100</td>
</tr>

<tr>
<td class="org-left">Verde oscuro</td>
<td class="org-right">85</td>
<td class="org-right">255</td>
<td class="org-right">255</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-org13f1482" class="outline-4">
<h4 id="org13f1482">Uso de <code>cv2.inRange</code></h4>
<div class="outline-text-4" id="text-org13f1482">
<p>
La función <code>cv2.inRange()</code> crea una máscara binaria donde los píxeles dentro del rango son blancos (255) y los fuera del rango son negros (0).
</p>
</div>
</div>
</div>




<div id="outline-container-orgdaaad8d" class="outline-3">
<h3 id="orgdaaad8d">Modelo HSL (Hue, Saturation, Lightness)</h3>
<div class="outline-text-3" id="text-orgdaaad8d">
<p>
El modelo <b>HSL</b> es similar al modelo HSV, pero en lugar de "valor" utiliza el término <b>luminosidad (Lightness)</b>, que representa la cantidad de luz que refleja un color.
</p>

<ul class="org-ul">
<li><b>Características</b>:
<ul class="org-ul">
<li><b>Matiz (Hue, H)</b>: Mismo que en HSV.</li>
<li><b>Saturación (S)</b>: Diferente definición que en HSV.</li>
<li><b>Luminosidad (L)</b>: Rango de [0,1], donde 0 es negro, 0.5 es el color puro, y 1 es blanco.</li>
</ul></li>

<li><b>Conversión de RGB a HSL</b>:
<ul class="org-ul">
<li>Normalizar RGB:
\[
    R' = \frac{R}{L}, \quad G' = \frac{G}{L}, \quad B' = \frac{B}{L}
    \]</li>

<li>Calcular \( C_{\max} \) y \( C_{\min} \), y \( \Delta \) como en HSV.</li>

<li><b><b>Cálculo de la Luminosidad (L)</b></b>:
\[
    L = \frac{C_{\max} + C_{\min}}{2}
    \]</li>

<li><b>Cálculo de la Saturación (S)</b>:
\[
    \text{Si } \Delta = 0 \Rightarrow S = 0 \\
    \text{Si } L \leq 0.5 \Rightarrow S = \frac{\Delta}{C_{\max} + C_{\min}} \\
    \text{Si } L > 0.5 \Rightarrow S = \frac{\Delta}{2 - (C_{\max} + C_{\min})}
    \]</li>

<li><b>Cálculo del Matiz (H)</b>:
<ul class="org-ul">
<li>Igual que en HSV.</li>
</ul></li>
</ul></li>

<li><b>Aplicaciones</b>:
<ul class="org-ul">
<li>Herramientas de diseño gráfico y edición de imágenes, donde se necesita un control preciso sobre la luz y el color.</li>
</ul></li>

<li><b>Ejemplo</b>:
<ul class="org-ul">
<li>Convertir RGB (255, 0, 0) a HSL:
<ul class="org-ul">
<li>Normalizar:
\[
      R' = 1, \quad G' = 0, \quad B' = 0
      \]</li>
<li>\( C_{\max} = 1 \), \( C_{\min} = 0 \), \( \Delta = 1 \)</li>
<li>Calcular L:
\[
      L = \frac{1 + 0}{2} = 0.5
      \]</li>
<li>Calcular S:
\[
      S = \frac{\Delta}{C_{\max} + C_{\min}} = \frac{1}{1 + 0} = 1
      \]</li>
<li>Calcular H:
\[
      H = 60^\circ \times \left( \frac{G' - B'}{\Delta} \mod 6 \right) = 0^\circ
      \]</li>
<li><b><b>Resultado</b></b>: H = 0°, S = 1, L = 0.5 (Color rojo puro)</li>
</ul></li>
</ul></li>
</ul>
</div>
</div>



<div id="outline-container-org483de48" class="outline-3">
<h3 id="org483de48">Función Bitwise opencv</h3>
<div class="outline-text-3" id="text-org483de48">
</div>
<div id="outline-container-org323c3cc" class="outline-4">
<h4 id="org323c3cc">Tutorial: Operaciones Bitwise en OpenCV</h4>
<div class="outline-text-4" id="text-org323c3cc">
<p>
Las operaciones bitwise en OpenCV son útiles para realizar
manipulaciones de imágenes como la creación de máscaras, la
combinación de imágenes, o efectos visuales.
</p>
</div>


<ul class="org-ul">
<li><a id="org13af498"></a>1. Operación <code>cv2.bitwise_and</code><br />
<div class="outline-text-5" id="text-org13af498">
<p>
Esta operación realiza una operación AND bit a bit sobre los píxeles
correspondientes de dos imágenes. Devuelve una imagen donde un píxel
será 1 si ambos píxeles en las imágenes de entrada son 1.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear dos im&#225;genes en negro</span>
<span style="color: #a0522d;">img1</span> = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>300, 300<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>
img2 = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>300, 300<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar un rect&#225;ngulo blanco en img1</span>
cv2.rectangle<span style="color: #707183;">(</span>img1, <span style="color: #7388d6;">(</span>50, 50<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>250, 250<span style="color: #7388d6;">)</span>, 255, -1<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar un c&#237;rculo blanco en img2</span>
cv2.circle<span style="color: #707183;">(</span>img2, <span style="color: #7388d6;">(</span>150, 150<span style="color: #7388d6;">)</span>, 100, 255, -1<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar la operaci&#243;n bitwise AND</span>
result = cv2.bitwise_and<span style="color: #707183;">(</span>img1, img2<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar las im&#225;genes</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"img1"</span>, img1<span style="color: #707183;">)</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"img2"</span>, img2<span style="color: #707183;">)</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"AND Result"</span>, result<span style="color: #707183;">)</span>
cv2.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</li>

<li><a id="org4a209b8"></a>2. Operación <code>cv2.bitwise_or</code><br />
<div class="outline-text-5" id="text-org4a209b8">
<p>
Realiza una operación OR bit a bit entre los píxeles de dos imágenes. El resultado será 1 si al menos uno de los píxeles correspondientes es 1.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear dos im&#225;genes en negro</span>
<span style="color: #a0522d;">img1</span> = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>300, 300<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>
img2 = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>300, 300<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar un rect&#225;ngulo blanco en img1</span>
cv2.rectangle<span style="color: #707183;">(</span>img1, <span style="color: #7388d6;">(</span>50, 50<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>250, 250<span style="color: #7388d6;">)</span>, 255, -1<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar un c&#237;rculo blanco en img2</span>
cv2.circle<span style="color: #707183;">(</span>img2, <span style="color: #7388d6;">(</span>150, 150<span style="color: #7388d6;">)</span>, 100, 255, -1<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar la operaci&#243;n bitwise OR</span>
result = cv2.bitwise_or<span style="color: #707183;">(</span>img1, img2<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar las im&#225;genes</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"img1"</span>, img1<span style="color: #707183;">)</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"img2"</span>, img2<span style="color: #707183;">)</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"OR Result"</span>, result<span style="color: #707183;">)</span>
cv2.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</li>

<li><a id="org38d4da4"></a>3. Operación <code>cv2.bitwise_xor</code><br />
<div class="outline-text-5" id="text-org38d4da4">
<p>
La operación XOR devuelve una imagen donde un píxel será 1 si exactamente uno de los píxeles correspondientes en las imágenes de entrada es 1.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear dos im&#225;genes en negro</span>
<span style="color: #a0522d;">img1</span> = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>300, 300<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>
img2 = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>300, 300<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar un rect&#225;ngulo blanco en img1</span>
cv2.rectangle<span style="color: #707183;">(</span>img1, <span style="color: #7388d6;">(</span>50, 50<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>250, 250<span style="color: #7388d6;">)</span>, 255, -1<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar un c&#237;rculo blanco en img2</span>
cv2.circle<span style="color: #707183;">(</span>img2, <span style="color: #7388d6;">(</span>150, 150<span style="color: #7388d6;">)</span>, 100, 255, -1<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar la operaci&#243;n bitwise XOR</span>
result = cv2.bitwise_xor<span style="color: #707183;">(</span>img1, img2<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar las im&#225;genes</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"img1"</span>, img1<span style="color: #707183;">)</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"img2"</span>, img2<span style="color: #707183;">)</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"XOR Result"</span>, result<span style="color: #707183;">)</span>
cv2.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</li>

<li><a id="org8918562"></a>4. Operación <code>cv2.bitwise_not</code><br />
<div class="outline-text-5" id="text-org8918562">
<p>
La operación NOT invierte los colores de la imagen. Los píxeles blancos se convierten en negros y viceversa.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una imagen en negro</span>
<span style="color: #a0522d;">img</span> = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>300, 300<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar un rect&#225;ngulo blanco</span>
cv2.rectangle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>50, 50<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>250, 250<span style="color: #7388d6;">)</span>, 255, -1<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar la operaci&#243;n bitwise NOT</span>
result = cv2.bitwise_not<span style="color: #707183;">(</span>img<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar las im&#225;genes</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Original"</span>, img<span style="color: #707183;">)</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"NOT Result"</span>, result<span style="color: #707183;">)</span>
cv2.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</li>

<li><a id="org0b45865"></a>Ejemplo práctico: Enmascarar una región de interés (ROI)<br />
<div class="outline-text-5" id="text-org0b45865">
<p>
Aquí aplicamos operaciones bitwise para enmascarar y combinar una imagen.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen principal</span>
<span style="color: #a0522d;">img1</span> = cv2.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'imagen_principal.jpg'</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen que queremos enmascarar</span>
<span style="color: #a0522d;">img2</span> = cv2.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'logo.png'</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener las dimensiones de la segunda imagen (logo)</span>
<span style="color: #a0522d;">rows</span>, <span style="color: #a0522d;">cols</span>, <span style="color: #a0522d;">channels</span> = img2.shape

<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir la regi&#243;n de inter&#233;s (ROI) en la imagen principal</span>
<span style="color: #a0522d;">roi</span> = img1<span style="color: #707183;">[</span>0:rows, 0:cols<span style="color: #707183;">]</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir la imagen del logo a escala de grises</span>
<span style="color: #a0522d;">img2gray</span> = cv2.cvtColor<span style="color: #707183;">(</span>img2, cv2.COLOR_BGR2GRAY<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una m&#225;scara binaria a partir de la imagen en escala de grises</span>
<span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">mask</span> = cv2.threshold<span style="color: #707183;">(</span>img2gray, 10, 255, cv2.THRESH_BINARY<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Invertir la m&#225;scara</span>
<span style="color: #a0522d;">mask_inv</span> = cv2.bitwise_not<span style="color: #707183;">(</span>mask<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Hacer visible el fondo de la imagen principal en la regi&#243;n del logo</span>
<span style="color: #a0522d;">img1_bg</span> = cv2.bitwise_and<span style="color: #707183;">(</span>roi, roi, mask=mask_inv<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Extraer el logo</span>
img2_fg = cv2.bitwise_and<span style="color: #707183;">(</span>img2, img2, mask=mask<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Combinar el fondo y el logo</span>
dst = cv2.add<span style="color: #707183;">(</span>img1_bg, img2_fg<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Colocar la imagen combinada en la imagen principal</span>
img1<span style="color: #707183;">[</span>0:rows, 0:cols<span style="color: #707183;">]</span> = dst

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen final</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Resultado"</span>, img1<span style="color: #707183;">)</span>
cv2.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</li>
</ul>
</div>
</div>


<div id="outline-container-org59769ff" class="outline-3">
<h3 id="org59769ff">Definición: Operación Bit a Bit</h3>
<div class="outline-text-3" id="text-org59769ff">
<p>
Una <b><b>operación bit a bit</b></b> (en inglés, <b>bitwise operation</b>) es una operación que se realiza directamente sobre los bits de los operandos. Las operaciones se ejecutan sobre los bits correspondientes de los números en formato binario.
</p>
</div>

<div id="outline-container-orgd8ec891" class="outline-4">
<h4 id="orgd8ec891">Principales operaciones bit a bit</h4>
<div class="outline-text-4" id="text-orgd8ec891">
</div>
<ul class="org-ul">
<li><a id="orge4933a1"></a>1. AND bit a bit (<code>&amp;</code>)<br />
<div class="outline-text-5" id="text-orge4933a1">
<p>
Devuelve `1` si ambos bits en la misma posición son `1`, de lo contrario devuelve `0`.
</p>

<pre class="example" id="org8c6df14">
A = 1010 (10 en decimal)
B = 1100 (12 en decimal)
Resultado: 1000 (8 en decimal)
</pre>
</div>
</li>

<li><a id="org315c694"></a>2. OR bit a bit (<code>|</code>)<br />
<div class="outline-text-5" id="text-org315c694">
<p>
Devuelve `1` si al menos uno de los bits en la misma posición es `1`, de lo contrario devuelve `0`.
</p>

<pre class="example" id="orgca9985d">
A = 1010 (10 en decimal)
B = 1100 (12 en decimal)
Resultado: 1110 (14 en decimal)
</pre>
</div>
</li>

<li><a id="orgd1a1db2"></a>3. XOR bit a bit (<code>^</code>)<br />
<div class="outline-text-5" id="text-orgd1a1db2">
<p>
Devuelve `1` si los bits en la misma posición son diferentes, y `0` si son iguales.
</p>

<pre class="example" id="org3609c4d">
A = 1010 (10 en decimal)
B = 1100 (12 en decimal)
Resultado: 0110 (6 en decimal)
</pre>
</div>
</li>

<li><a id="org6e7b2b1"></a>4. NOT bit a bit (~~)<br />
<div class="outline-text-5" id="text-org6e7b2b1">
<p>
Invierte los bits de un número: convierte los `0` en `1` y los `1` en `0`. En sistemas de complemento a dos, esto también implica cambiar el signo de un número entero.
</p>

<pre class="example" id="org5502c4b">
A = 1010 (10 en decimal)
Resultado: 0101 (-11 en decimal, si estamos usando complemento a dos)
</pre>
</div>
</li>

<li><a id="org0163478"></a>5. Desplazamiento a la izquierda (<code>&lt;&lt;</code>)<br />
<div class="outline-text-5" id="text-org0163478">
<p>
Desplaza todos los bits del número hacia la izquierda por un número específico de posiciones. Los bits desplazados fuera del límite se descartan y se rellenan con ceros en el extremo derecho.
</p>

<pre class="example" id="org5a55629">
A = 0001 (1 en decimal)
A &lt;&lt; 2 = 0100 (4 en decimal)
</pre>
</div>
</li>

<li><a id="orgdf65c2a"></a>6. Desplazamiento a la derecha (<code>&gt;&gt;</code>)<br />
<div class="outline-text-5" id="text-orgdf65c2a">
<p>
Desplaza todos los bits del número hacia la derecha por un número específico de posiciones. Los bits desplazados fuera del límite se descartan y el bit más significativo depende del signo del número.
</p>

<pre class="example" id="org23d2e57">
A = 1000 (8 en decimal)
A &gt;&gt; 2 = 0010 (2 en decimal)
</pre>
</div>
</li>

<li><a id="orgb22a52e"></a>Aplicaciones de las operaciones bit a bit<br />
<div class="outline-text-5" id="text-orgb22a52e">
<ul class="org-ul">
<li><b><b>Máscaras de bits</b></b>: Las operaciones bit a bit se usan para aplicar máscaras que seleccionan o modifican partes específicas de un número o secuencia binaria.</li>
<li><b><b>Manipulación de imágenes</b></b>: En procesamiento de imágenes, las operaciones bit a bit son útiles para combinar y modificar píxeles en OpenCV.</li>
<li><b><b>Optimización de algoritmos</b></b>: Las operaciones bit a bit permiten optimizar cálculos en sistemas de bajo nivel o con restricciones de recursos.</li>
</ul>
</div>
</li>
</ul>
</div>
</div>



<div id="outline-container-orgcff32e2" class="outline-3">
<h3 id="orgcff32e2">Operadores Puntuales</h3>
<div class="outline-text-3" id="text-orgcff32e2">
</div>
<div id="outline-container-orge08e7a9" class="outline-4">
<h4 id="orge08e7a9">Definición</h4>
<div class="outline-text-4" id="text-orge08e7a9">
<p>
Los <b>operadores puntuales</b> son una clase de transformaciones aplicadas
en el procesamiento digital de imágenes que operan sobre cada píxel de
manera independiente. Esto significa que el valor de salida de un
píxel depende únicamente del valor de ese mismo píxel en la imagen de
entrada, sin considerar los valores de los píxeles vecinos.
</p>
</div>
</div>

<div id="outline-container-orgfa2363c" class="outline-4">
<h4 id="orgfa2363c">Características</h4>
<div class="outline-text-4" id="text-orgfa2363c">
<ol class="org-ol">
<li><b>Independencia espacial</b>: Los operadores puntuales solo modifican
cada píxel basado en su valor original, sin tener en cuenta su
entorno.</li>
<li><b>Simplicidad computacional</b>: Dado que no se necesita información de
los píxeles vecinos, estas operaciones suelen ser más rápidas y
eficientes.</li>
<li><b>Aplicación en tiempo real</b>: Su bajo costo computacional los hace
adecuados para aplicaciones de procesamiento de imágenes en tiempo
real.</li>
</ol>
</div>
</div>

<div id="outline-container-org419f117" class="outline-4">
<h4 id="org419f117">Tipos de Operadores Puntuales</h4>
<div class="outline-text-4" id="text-org419f117">
</div>
<ul class="org-ul">
<li><a id="org20e00cd"></a>Operador de Identidad<br />
<div class="outline-text-5" id="text-org20e00cd">
<ul class="org-ul">
<li>No altera la imagen. Cada píxel de la imagen de salida tiene el
mismo valor que el píxel correspondiente en la imagen de entrada.</li>
<li>Fórmula: \( g(x, y) = f(x, y) \), donde \( f(x, y) \) es el valor del píxel original y \( g(x, y) \) es el valor del píxel modificado.</li>
</ul>
</div>
</li>

<li><a id="orgcf979fe"></a>Negativo de la Imagen<br />
<div class="outline-text-5" id="text-orgcf979fe">
<ul class="org-ul">
<li>Este operador invierte los valores de los píxeles de una imagen, produciendo su negativo.</li>
<li>Fórmula: \( g(x, y) = L - 1 - f(x, y) \), donde \( L \) es el valor máximo posible en la imagen (por ejemplo, 255 en imágenes de 8 bits).</li>
<li>Uso: Se utiliza en técnicas como la extracción de detalles o cuando es necesario invertir una imagen para un análisis.</li>
</ul>
</div>
</li>

<li><a id="orgbf8be32"></a>Umbralización (Thresholding)<br />
<div class="outline-text-5" id="text-orgbf8be32">
<ul class="org-ul">
<li>Convierte la imagen a una versión binaria, donde los píxeles con valores por encima de un umbral se establecen en un valor (generalmente blanco), y los que están por debajo se establecen en otro (generalmente negro).</li>
<li>Fórmula: 
\[
     g(x, y) =
     0, & \text{si } f(x, y) \leq T \\
     L, & \text{si } f(x, y) > T
     \]</li>
<li>Uso: Se utiliza para segmentación de imágenes y procesamiento de imágenes en blanco y negro.</li>
</ul>
</div>
</li>

<li><a id="orgaffc2e7"></a>Corrección Gamma<br />
<div class="outline-text-5" id="text-orgaffc2e7">
<ul class="org-ul">
<li>Ajusta los valores de intensidad de los píxeles para modificar el brillo o contraste de la imagen.</li>
<li>Fórmula: \( g(x, y) = c \cdot f(x, y)^\gamma \), donde \( c \) es una constante de escala, y \( \gamma \) es el factor de corrección.</li>
<li>Uso: Corrige la distorsión de brillo en pantallas o para obtener una mejor representación visual.</li>
</ul>
</div>
</li>

<li><a id="org6580a68"></a>Transformaciones Logarítmicas<br />
<div class="outline-text-5" id="text-org6580a68">
<ul class="org-ul">
<li>Aumentan los detalles en regiones oscuras de la imagen al expandir los valores de intensidad bajos.</li>
<li>Fórmula: \( g(x, y) = c \cdot \log(1 + f(x, y)) \), donde \( c \) es una constante.</li>
<li>Uso: Mejora la visualización de imágenes con una alta gama dinámica (HDR), como imágenes astronómicas.</li>
</ul>
</div>
</li>

<li><a id="org97b6ec5"></a>Corrección Lineal o Estiramiento de Contraste<br />
<div class="outline-text-5" id="text-org97b6ec5">
<ul class="org-ul">
<li>Expande los valores de intensidad en una imagen para cubrir un rango más amplio, aumentando el contraste.</li>
<li>Fórmula:
\[
     g(x, y) = \frac{f(x, y) - f_{\min}}{f_{\max} - f_{\min}} \cdot (L - 1)
     \]</li>
<li>Uso: Aumenta el contraste en imágenes con poca variación de intensidad.</li>
</ul>
</div>
</li>

<li><a id="org7c868fb"></a>Transformaciones de Potencia (Raise to Power Transform)<br />
<div class="outline-text-5" id="text-org7c868fb">
<ul class="org-ul">
<li>Eleva cada valor de píxel a una potencia \( n \), lo que permite ajustar el brillo y contraste de una imagen.</li>
<li>Fórmula: \( g(x, y) = c \cdot f(x, y)^n \).</li>
</ul>
</div>
</li>
</ul>
</div>

<div id="outline-container-org310c509" class="outline-4">
<h4 id="org310c509">Aplicaciones de Operadores Puntuales</h4>
<div class="outline-text-4" id="text-org310c509">
<ul class="org-ul">
<li><b>Corrección de imágenes</b>: Mejoran el brillo, contraste, y otros aspectos visuales de una imagen.</li>
<li><b>Segmentación</b>: La umbralización es comúnmente usada para separar objetos de fondo en una imagen.</li>
<li><b>Análisis médico</b>: Se utiliza para mejorar la visualización de imágenes de rayos X, resonancias magnéticas o ultrasonidos.</li>
<li><b>Procesamiento en tiempo real</b>: Los operadores puntuales son útiles en sistemas que requieren una rápida respuesta, como cámaras de vigilancia o sistemas de visión artificial.</li>
</ul>

<p>
En resumen, los <b>operadores puntuales</b> son una herramienta fundamental en el procesamiento de imágenes que permiten realizar transformaciones sencillas pero efectivas, mejorando la calidad visual o preparándolas para análisis posteriores.
</p>
</div>
</div>
</div>



<div id="outline-container-org00ec752" class="outline-3">
<h3 id="org00ec752">Proceso de Multiplicación de una Matriz de Transformación por una Coordenada de Píxel</h3>
<div class="outline-text-3" id="text-org00ec752">
<p>
Cuando aplicamos una transformación geométrica a una imagen, multiplicamos las coordenadas de cada píxel por una <b>matriz de transformación</b>. Este proceso se desglosa paso a paso de la siguiente manera.
</p>
</div>

<div id="outline-container-org620bdc5" class="outline-4">
<h4 id="org620bdc5">1. Representación de las coordenadas en forma homogénea</h4>
<div class="outline-text-4" id="text-org620bdc5">
<p>
Las coordenadas \((x, y)\) de un píxel se convierten a <b>coordenadas homogéneas</b> para que las traslaciones puedan representarse mediante multiplicaciones de matrices. Un píxel en coordenadas homogéneas es:
</p>

\begin{pmatrix}
x \\
y \\
1
\end{pmatrix}
</div>
</div>

<div id="outline-container-org5d6928a" class="outline-4">
<h4 id="org5d6928a">2. Definición de la matriz de transformación</h4>
<div class="outline-text-4" id="text-org5d6928a">
<p>
La matriz de transformación afín general tiene la forma:
\[
T= \begin{pmatrix}
a_{11} & a_{12} & t_x \\
a_{21} & a_{22} & t_y \\
0 & 0 & 1
\end{pmatrix}
\]
</p>

<ul class="org-ul">
<li>\(a_{11}, a_{12}, a_{21}, a_{22}\) definen las transformaciones de rotación, escalado y cizallamiento.</li>
<li>\(t_x, t_y\) son los parámetros de traslación en los ejes \(x\) e \(y\).</li>
</ul>
</div>
</div>

<div id="outline-container-org3787537" class="outline-4">
<h4 id="org3787537">3. Multiplicación de la matriz por las coordenadas</h4>
<div class="outline-text-4" id="text-org3787537">
<p>
Multiplicamos la matriz de transformación \(T\) por las coordenadas homogéneas \((x, y, 1)\) para obtener las nuevas coordenadas \((x', y', 1)\).
</p>

<p>
$$
</p>
\begin{pmatrix}
x' \\
y' \\
1
\end{pmatrix}
<p>
=
</p>
\begin{pmatrix}
a_{11} & a_{12} & t_x \\
a_{21} & a_{22} & t_y \\
0 & 0 & 1
\end{pmatrix}
<p>
&sdot;
</p>
\begin{pmatrix}
x \\
y \\
1
\end{pmatrix}
<p>
$$
</p>


<p>
La multiplicación de matrices se desglosa a continuación.
</p>
</div>

<ul class="org-ul">
<li><a id="orgbd44296"></a>3.1 Cálculo del nuevo valor de \(x'\)<br />
<div class="outline-text-5" id="text-orgbd44296">
<p>
\[
x' = a_{11} \cdot x + a_{12} \cdot y + t_x
\]
</p>
</div>
</li>

<li><a id="org01cb444"></a>3.2 Cálculo del nuevo valor de \(y'\)<br />
<div class="outline-text-5" id="text-org01cb444">
<p>
\[
y' = a_{21} \cdot x + a_{22} \cdot y + t_y
\]
</p>
</div>
</li>

<li><a id="orgaed0296"></a>3.3 El valor constante de la tercera coordenada<br />
<div class="outline-text-5" id="text-orgaed0296">
<p>
La tercera coordenada se mantiene como \(1\), ya que no cambia en las transformaciones afines.
</p>

<p>
\[1 = (0 \cdot x) + (0 \cdot y) + 1 \]
</p>
</div>
</li>
</ul>
</div>

<div id="outline-container-orga204821" class="outline-4">
<h4 id="orga204821">4. Resultado final</h4>
<div class="outline-text-4" id="text-orga204821">
<p>
El resultado de la multiplicación es un nuevo vector con las coordenadas transformadas:
</p>

\begin{pmatrix}
x' \\
y' \\
1
\end{pmatrix}
</div>
</div>

<div id="outline-container-orga4f25cd" class="outline-4">
<h4 id="orga4f25cd">Ejemplo concreto: Rotación</h4>
<div class="outline-text-4" id="text-orga4f25cd">
<p>
Si queremos rotar un píxel \((x, y)\) en un ángulo \(\theta\), usamos la matriz de rotación:
</p>

<p>
\[
R = \begin{pmatrix}
\cos(\theta) & -\sin(\theta) & 0 \\
\sin(\theta) & \cos(\theta) & 0 \\
0 & 0 & 1
\end{pmatrix}
\]
</p>

<p>
Multiplicamos esta matriz por las coordenadas homogéneas:
</p>

<p>
\[
</p>
\begin{pmatrix}
x' \\
y' \\
1
\end{pmatrix}
<p>
=
</p>
\begin{pmatrix}
\cos(\theta) & -\sin(\theta) & 0 \\
\sin(\theta) & \cos(\theta) & 0 \\
0 & 0 & 1
\end{pmatrix}
<p>
&sdot;
</p>
\begin{pmatrix}
x \\
y \\
1
\end{pmatrix}
<p>
\]
Esto resulta en las nuevas coordenadas después de la rotación:
</p>

<p>
\[
x' = x \cdot \cos(\theta) - y \cdot \sin(\theta)
y' = x \cdot \sin(\theta) + y \cdot \cos(\theta)
\]
</p>
</div>
</div>
<div id="outline-container-orge6d49e7" class="outline-4">
<h4 id="orge6d49e7">Resumen del proceso</h4>
<div class="outline-text-4" id="text-orge6d49e7">
<ol class="org-ol">
<li>Convertir las coordenadas \((x, y)\) a coordenadas homogéneas \((x, y, 1)\).</li>
<li>Definir la matriz de transformación \(T\).</li>
<li>Multiplicar la matriz \(T\) por las coordenadas homogéneas.</li>
<li>Obtener las nuevas coordenadas \((x', y')\) que represe</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-org263e069" class="outline-3">
<h3 id="org263e069">Transformaciones Geométricas en Imágenes</h3>
<div class="outline-text-3" id="text-org263e069">
<p>
Las <b>transformaciones geométricas</b> en imágenes permiten cambiar la posición, orientación y escala de las imágenes sin alterar su contenido. Estas transformaciones son esenciales en tareas como alineación de imágenes, registro de imágenes, realidad aumentada, y sistemas de visión por computadora.
</p>
</div>

<div id="outline-container-org3af3f4d" class="outline-4">
<h4 id="org3af3f4d">1. Traslación (Translation)</h4>
<div class="outline-text-4" id="text-org3af3f4d">
<p>
La traslación desplaza la imagen en el espacio sin modificar su forma o tamaño. La fórmula matemática es:
</p>

<p>
\[
   T(x, y) = (x + t_x, y + t_y)
   \]
</p>

<p>
Donde \(t_x\) y \(t_y\) son las cantidades de desplazamiento. La matriz de traslación es:
</p>

<p>
\[
   T = \begin{pmatrix}
   1 & 0 & t_x \\
   0 & 1 & t_y \\
   0 & 0 & 1
   \end{pmatrix}
   \]
</p>
</div>
</div>

<div id="outline-container-org633d0d3" class="outline-4">
<h4 id="org633d0d3">2. Rotación (Rotation)</h4>
<div class="outline-text-4" id="text-org633d0d3">
<p>
La rotación gira la imagen un ángulo \(\theta\). La ecuación de rotación es:
</p>

<p>
\[
   R(x, y) = (x' , y') = \left( x \cdot \cos(\theta) - y \cdot \sin(\theta), x \cdot \sin(\theta) + y \cdot \cos(\theta) \right)
   \]
</p>

<p>
La matriz de rotación es:
</p>

<p>
\[
   R = \begin{pmatrix}
   \cos(\theta) & -\sin(\theta) & 0 \\
   \sin(\theta) & \cos(\theta) & 0 \\
   0 & 0 & 1
   \end{pmatrix}
   \]
</p>
</div>
</div>

<div id="outline-container-org87b4f9e" class="outline-4">
<h4 id="org87b4f9e">3. Escalado (Scalin</h4>
<div class="outline-text-4" id="text-org87b4f9e">
<p>
g)
</p>

<p>
El escalado modifica el tamaño de la imagen mediante factores \(s_x\) y \(s_y\). La fórmula es:
</p>

<p>
\[
   S(x, y) = (s_x \cdot x, s_y \cdot y)
   \]
</p>

<p>
La matriz correspondiente es:
</p>

<p>
\[
   S = \begin{pmatrix}
   s_x & 0 & 0 \\
   0 & s_y & 0 \\
   0 & 0 & 1
   \end{pmatrix}
   \]
</p>
</div>
</div>

<div id="outline-container-orgb85ed5b" class="outline-4">
<h4 id="orgb85ed5b">4. Cizallamiento (Shearing)</h4>
<div class="outline-text-4" id="text-orgb85ed5b">
<p>
El cizallamiento inclina la imagen en una dirección específica. Las ecuaciones para un cizallamiento horizontal y vertical son:
</p>

<p>
\[
   Sh_x(x, y) = (x + h_x \cdot y, y)
   \]
\[
   Sh_y(x, y) = (x, y + h_y \cdot x)
   \]
</p>

<p>
Las matrices correspondientes son:
</p>

<p>
Horizontal:
</p>

<p>
\[
   Sh_x = \begin{pmatrix}
   1 & h_x & 0 \\
   0 & 1 & 0 \\
   0 & 0 & 1
   \end{pmatrix}
   \]
</p>

<p>
Vertical:
</p>

<p>
\[
   Sh_y = \begin{pmatrix}
   1 & 0 & 0 \\
   h_y & 1 & 0 \\
   0 & 0 & 1
   \end{pmatrix}
   \]
</p>
</div>
</div>

<div id="outline-container-org2524017" class="outline-4">
<h4 id="org2524017">5. Reflexión (Reflection)</h4>
<div class="outline-text-4" id="text-org2524017">
<p>
La reflexión voltea la imagen sobre un eje. Las matrices para reflexiones sobre el eje \(x\) o \(y\) son:
</p>

<p>
\[
   R_x = \begin{pmatrix}
   1 & 0 & 0 \\
   0 & -1 & 0 \\
   0 & 0 & 1
   \end{pmatrix}
   \]
</p>

<p>
\[
   R_y = \begin{pmatrix}
   -1 & 0 & 0 \\
   0 & 1 & 0 \\
   0 & 0 & 1
   \end{pmatrix}
   \]
</p>
</div>
</div>

<div id="outline-container-orgc736d54" class="outline-4">
<h4 id="orgc736d54">6. Transformación Afín (Affine Transformation)</h4>
<div class="outline-text-4" id="text-orgc736d54">
<p>
Una transformación afín combina varias de las anteriores. Su matriz es:
</p>

<p>
\[
   A = \begin{pmatrix}
   a_{11} & a_{12} & t_x \\
   a_{21} & a_{22} & t_y \\
   0 & 0 & 1
   \end{pmatrix}
   \]
</p>
</div>
</div>

<div id="outline-container-org1e49446" class="outline-4">
<h4 id="org1e49446">7. Transformación Proyectiva (Homografía)</h4>
<div class="outline-text-4" id="text-org1e49446">
<p>
La homografía proyecta una imagen en un nuevo plano, alterando su perspectiva. La matriz homográfica es:
</p>

<p>
\[
   H = \begin{pmatrix}
   h_{11} & h_{12} & h_{13} \\
   h_{21} & h_{22} & h_{23} \\
   h_{31} & h_{32} & h_{33}
   \end{pmatrix}
   \]
</p>
</div>
</div>

<div id="outline-container-orgf0c4f79" class="outline-4">
<h4 id="orgf0c4f79">Aplicaciones</h4>
<div class="outline-text-4" id="text-orgf0c4f79">
<p>
Las transformaciones geométricas se utilizan en:
</p>

<ul class="org-ul">
<li><b>Alineación de imágenes</b>: Registrar imágenes para tener la misma perspectiva.</li>
<li><b>Corrección de distorsión</b>: Corregir distorsiones causadas por lentes de cámaras.</li>
<li><b>Visión artificial</b>: Identificar objetos en diferentes orientaciones.</li>
<li><b>Realidad aumentada</b>: Ajustar objetos virtuales al mundo real.</li>
</ul>
</div>
</div>
</div>







<div id="outline-container-orgd226f68" class="outline-3">
<h3 id="orgd226f68">Landmarks</h3>
<div class="outline-text-3" id="text-orgd226f68">
<p>
En visión artificial, el término landmark se refiere a puntos clave
dentro de una imagen que ayudan a describir características
importantes de un objeto. Estos puntos de referencia se utilizan en
tareas como el reconocimiento facial, el registro de imágenes médicas,
la segmentación de objetos y la detección de estructuras en imágenes
biomédicas.
</p>
</div>

<div id="outline-container-orgc6e19fb" class="outline-4">
<h4 id="orgc6e19fb">Fundamentos de los Landmarks</h4>
<div class="outline-text-4" id="text-orgc6e19fb">
<p>
Los landmarks se caracterizan por ser:
</p>

<ul class="org-ul">
<li>Puntos de interés dentro de una imagen que representan estructuras significativas.</li>

<li>Invariantes a transformaciones como traslación, rotación y cambios de escala.</li>

<li>Utilizados en modelos de alineación y reconocimiento de patrones.</li>
</ul>

<p>
Dependiendo del contexto, los landmarks pueden ser seleccionados manualmente o detectados automáticamente mediante algoritmos especializados.
</p>
</div>
</div>

<div id="outline-container-orgdf3dd63" class="outline-4">
<h4 id="orgdf3dd63">Aplicaciones de los Landmarks</h4>
<div class="outline-text-4" id="text-orgdf3dd63">
</div>
<ul class="org-ul">
<li><a id="org1ee4170"></a>Reconocimiento Facial<br />
<div class="outline-text-5" id="text-org1ee4170">
<p>
En el reconocimiento facial, se utilizan landmarks para identificar
estructuras anatómicas del rostro, como los ojos, la nariz y la
boca. Un ejemplo común es el modelo de 68 puntos faciales utilizado en
bibliotecas como dlib, donde cada punto representa una característica
clave del rostro.
</p>
</div>
</li>

<li><a id="orga439c92"></a>Registro y Segmentación de Imágenes Médicas<br />
<div class="outline-text-5" id="text-orga439c92">
<p>
Los landmarks juegan un papel clave en el registro de imágenes
médicas, facilitando la comparación de imágenes de distintos pacientes
o en diferentes momentos temporales. Se utilizan en la detección de
estructuras anatómicas en radiografías, tomografías y microscopía.
</p>
</div>
</li>

<li><a id="org698708d"></a>Seguimiento de Movimiento y Estimación de Postura<br />
<div class="outline-text-5" id="text-org698708d">
<p>
Los sistemas de visión artificial pueden detectar landmarks en el
cuerpo humano para el análisis de la postura y el seguimiento de
movimientos en tiempo real, como en aplicaciones deportivas y
rehabilitación médica.
</p>
</div>
</li>

<li><a id="org5583112"></a>Detección de Características en Citología Cervical<br />
<div class="outline-text-5" id="text-org5583112">
<p>
En el análisis de imágenes de citología cervical, los landmarks pueden
utilizarse para localizar estructuras celulares relevantes,
facilitando la segmentación y clasificación de células en exámenes de
Papanicolaou.
</p>
</div>
</li>
</ul>
</div>

<div id="outline-container-orgf4edd84" class="outline-4">
<h4 id="orgf4edd84">Métodos de Detección de Landmarks</h4>
<div class="outline-text-4" id="text-orgf4edd84">
<p>
Existen varios métodos para la detección de landmarks, que se pueden clasificar en dos grandes categorías:
</p>
</div>

<ul class="org-ul">
<li><a id="org25cdaec"></a>Métodos Clásicos<br />
<div class="outline-text-5" id="text-org25cdaec">
<p>
SIFT (Scale-Invariant Feature Transform): Detecta puntos clave
invariables a cambios de escala y rotación.
</p>

<p>
SURF (Speeded-Up Robust Features): Similar a SIFT pero más rápido.
</p>

<p>
ORB (Oriented FAST and Rotated BRIEF): Optimizado para detección
rápida en tiempo real.
</p>
</div>
</li>

<li><a id="org3cd6f4f"></a>Métodos Basados en Aprendizaje Profundo<br />
<div class="outline-text-5" id="text-org3cd6f4f">
<p>
Redes neuronales convolucionales (CNNs): Utilizadas en el
reconocimiento facial y análisis biomédico.
</p>

<p>
MediaPipe: Biblioteca de Google para la detección de landmarks en
tiempo real.
</p>

<p>
Modelos de Regresión de Forma Activa (ASM) y Modelos de Forma
Constrained Local Models (CLM): Métodos específicos para la detección
de formas anatómicas.
</p>
</div>
</li>
</ul>
</div>
</div>






<div id="outline-container-orgc63f002" class="outline-3">
<h3 id="orgc63f002">Detección de Manos con MediaPipe en Python</h3>
<div class="outline-text-3" id="text-orgc63f002">
</div>
<div id="outline-container-orgd83ef10" class="outline-4">
<h4 id="orgd83ef10">Introducción</h4>
<div class="outline-text-4" id="text-orgd83ef10">
<p>
  MediaPipe es una
librería desarrollada por Google Research, diseñada para el
procesamiento eficiente de datos en tiempo real. Fue lanzada para
facilitar el desarrollo de aplicaciones de visión por computadora,
realidad aumentada y aprendizaje automático en dispositivos móviles y
computadoras.
</p>

<p>
MediaPipe Hands utiliza modelos preentrenados basados en redes
neuronales para detectar y seguir 21 puntos clave de la mano,
permitiendo análisis de gestos y seguimiento preciso.
</p>
</div>
</div>



<div id="outline-container-org8b938fd" class="outline-4">
<h4 id="org8b938fd">Instalación de Dependencias</h4>
<div class="outline-text-4" id="text-org8b938fd">
<p>
Para ejecutar el código, se necesita instalar los siguientes paquetes en Python:
</p>

<div class="org-src-container">
<pre class="src src-sh">pip install mediapipe opencv-python
</pre>
</div>
</div>
</div>

<div id="outline-container-org02d3337" class="outline-4">
<h4 id="org02d3337">Código para Detección de Manos en Tiempo Real</h4>
<div class="outline-text-4" id="text-org02d3337">
<p>
Este es un un código en Python que detecta manos usando MediaPipe y OpenCV.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> mediapipe <span style="color: #a020f0;">as</span> mp

<span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar MediaPipe Hands</span>
<span style="color: #a0522d;">mp_hands</span> = mp.solutions.hands
<span style="color: #a0522d;">mp_drawing</span> = mp.solutions.drawing_utils
<span style="color: #a0522d;">hands</span> = mp_hands.Hands<span style="color: #707183;">(</span>min_detection_confidence=0.5, min_tracking_confidence=0.5<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Captura de video</span>
cap = cv2.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>

<span style="color: #a020f0;">while</span> cap.isOpened<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">frame</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> ret:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir imagen a RGB</span>
<span style="background-color: #f2f2f2;"> </span>   frame_rgb = cv2.cvtColor<span style="color: #707183;">(</span>frame, cv2.COLOR_BGR2RGB<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Detectar manos</span>
<span style="background-color: #f2f2f2;"> </span>   results = hands.process<span style="color: #707183;">(</span>frame_rgb<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar los puntos clave y conexiones</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> results.multi_hand_landmarks:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> hand_landmarks <span style="color: #a020f0;">in</span> results.multi_hand_landmarks:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   mp_drawing.draw_landmarks<span style="color: #707183;">(</span>frame, hand_landmarks, mp_hands.HAND_CONNECTIONS<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Salida"</span>, frame<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Salir con 'q'</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> cv2.waitKey<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span> &amp; 0xFF == <span style="color: #483d8b;">ord</span><span style="color: #707183;">(</span><span style="color: #8b2252;">'q'</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

cap.release<span style="color: #707183;">()</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> mediapipe <span style="color: #a020f0;">as</span> mp

<span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar MediaPipe Hands</span>
<span style="color: #a0522d;">mp_hands</span> = mp.solutions.hands
<span style="color: #a0522d;">mp_drawing</span> = mp.solutions.drawing_utils
<span style="color: #a0522d;">hands</span> = mp_hands.Hands<span style="color: #707183;">(</span>min_detection_confidence=0.5, min_tracking_confidence=0.5<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Captura de video</span>
cap = cv2.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>

<span style="color: #a020f0;">while</span> cap.isOpened<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">frame</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> ret:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir imagen a RGB</span>
<span style="background-color: #f2f2f2;"> </span>   frame_rgb = cv2.cvtColor<span style="color: #707183;">(</span>frame, cv2.COLOR_BGR2RGB<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Detectar manos</span>
<span style="background-color: #f2f2f2;"> </span>   results = hands.process<span style="color: #707183;">(</span>frame_rgb<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar los puntos clave y conexiones</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> results.multi_hand_landmarks:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> hand_landmarks <span style="color: #a020f0;">in</span> results.multi_hand_landmarks:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> idx, landmark <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">enumerate</span><span style="color: #707183;">(</span>hand_landmarks.landmark<span style="color: #707183;">)</span>:

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">h</span>,<span style="color: #a0522d;">w</span>,<span style="color: #a0522d;">_</span> =frame.shape
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">x</span>,<span style="color: #a0522d;">y</span>=<span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>landmark.x*w<span style="color: #707183;">)</span>, <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>landmark.y*h<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv2.circle<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span>x,y<span style="color: #7388d6;">)</span>, 2, <span style="color: #7388d6;">(</span>12, 233,4<span style="color: #7388d6;">)</span>, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;">#</span><span style="color: #b22222;">mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Salida"</span>, frame<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Salir con 'q'</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> cv2.waitKey<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span> &amp; 0xFF == <span style="color: #483d8b;">ord</span><span style="color: #707183;">(</span><span style="color: #8b2252;">'q'</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

cap.release<span style="color: #707183;">()</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</div>



<div id="outline-container-org67b982f" class="outline-4">
<h4 id="org67b982f">Explicación del Código</h4>
<div class="outline-text-4" id="text-org67b982f">
<ol class="org-ol">
<li>Se inicializa MediaPipe Hands con una confianza mínima de detección y seguimiento del 50%.</li>
<li>Se usa OpenCV para capturar video en tiempo real.</li>
<li>Se convierte el fotograma de BGR a RGB, ya que MediaPipe trabaja con imágenes en formato RGB.</li>
<li>Se procesan los fotogramas y se extraen las coordenadas de la mano si se detecta.</li>
<li>Se dibujan los puntos clave de la mano y sus conexiones en la imagen original.</li>
<li>Se muestra el resultado en una ventana de OpenCV.</li>
</ol>
</div>
</div>

<div id="outline-container-org7db890f" class="outline-4">
<h4 id="org7db890f">Mejoras Posibles</h4>
<div class="outline-text-4" id="text-org7db890f">
<ul class="org-ul">
<li>Contar cuántas manos hay con <code>len(results.multi_hand_landmarks)</code>.</li>
<li>Detectar gestos analizando las posiciones de los dedos.</li>
<li>Guardar las coordenadas para análisis posterior.</li>
</ul>
</div>
</div>

<div id="outline-container-org4821891" class="outline-4">
<h4 id="org4821891">Indice de dedos en mediapipe</h4>
<div class="outline-text-4" id="text-org4821891">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-right" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-right">Índice</th>
<th scope="col" class="org-left">Dedo / Punto</th>
<th scope="col" class="org-left">Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-right">0</td>
<td class="org-left">Muñeca (wrist)</td>
<td class="org-left">Base de la mano</td>
</tr>

<tr>
<td class="org-right">1</td>
<td class="org-left">Base del pulgar</td>
<td class="org-left">Unión del pulgar con la palma</td>
</tr>

<tr>
<td class="org-right">2</td>
<td class="org-left">Primera falange del pulgar</td>
<td class="org-left">Parte inferior del pulgar</td>
</tr>

<tr>
<td class="org-right">3</td>
<td class="org-left">Segunda falange del pulgar</td>
<td class="org-left">Parte media del pulgar</td>
</tr>

<tr>
<td class="org-right">4</td>
<td class="org-left">Punta del pulgar</td>
<td class="org-left">Extremo del pulgar</td>
</tr>

<tr>
<td class="org-right">5</td>
<td class="org-left">Base del índice</td>
<td class="org-left">Unión del índice con la palma</td>
</tr>

<tr>
<td class="org-right">6</td>
<td class="org-left">Primera falange del índice</td>
<td class="org-left">Parte inferior del índice</td>
</tr>

<tr>
<td class="org-right">7</td>
<td class="org-left">Segunda falange del índice</td>
<td class="org-left">Parte media del índice</td>
</tr>

<tr>
<td class="org-right">8</td>
<td class="org-left">Punta del índice</td>
<td class="org-left">Extremo del índice</td>
</tr>

<tr>
<td class="org-right">9</td>
<td class="org-left">Base del medio</td>
<td class="org-left">Unión del dedo medio con la palma</td>
</tr>

<tr>
<td class="org-right">10</td>
<td class="org-left">Primera falange del medio</td>
<td class="org-left">Parte inferior del medio</td>
</tr>

<tr>
<td class="org-right">11</td>
<td class="org-left">Segunda falange del medio</td>
<td class="org-left">Parte media del medio</td>
</tr>

<tr>
<td class="org-right">12</td>
<td class="org-left">Punta del medio</td>
<td class="org-left">Extremo del medio</td>
</tr>

<tr>
<td class="org-right">13</td>
<td class="org-left">Base del anular</td>
<td class="org-left">Unión del anular con la palma</td>
</tr>

<tr>
<td class="org-right">14</td>
<td class="org-left">Primera falange del anular</td>
<td class="org-left">Parte inferior del anular</td>
</tr>

<tr>
<td class="org-right">15</td>
<td class="org-left">Segunda falange del anular</td>
<td class="org-left">Parte media del anular</td>
</tr>

<tr>
<td class="org-right">16</td>
<td class="org-left">Punta del anular</td>
<td class="org-left">Extremo del anular</td>
</tr>

<tr>
<td class="org-right">17</td>
<td class="org-left">Base del meñique</td>
<td class="org-left">Unión del meñique con la palma</td>
</tr>

<tr>
<td class="org-right">18</td>
<td class="org-left">Primera falange del meñique</td>
<td class="org-left">Parte inferior del meñique</td>
</tr>

<tr>
<td class="org-right">19</td>
<td class="org-left">Segunda falange del meñique</td>
<td class="org-left">Parte media del meñique</td>
</tr>

<tr>
<td class="org-right">20</td>
<td class="org-left">Punta del meñique</td>
<td class="org-left">Extremo del meñique</td>
</tr>
</tbody>
</table>
</div>
</div>


<div id="outline-container-org58e97b1" class="outline-4">
<h4 id="org58e97b1">Medipipe Reconocimiento de letras</h4>
<div class="outline-text-4" id="text-org58e97b1">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> mediapipe <span style="color: #a020f0;">as</span> mp
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar MediaPipe Hands</span>
<span style="color: #a0522d;">mp_hands</span> = mp.solutions.hands
<span style="color: #a0522d;">mp_drawing</span> = mp.solutions.drawing_utils
<span style="color: #a0522d;">hands</span> = mp_hands.Hands<span style="color: #707183;">(</span>min_detection_confidence=0.7, min_tracking_confidence=0.7<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Funci&#243;n para determinar la letra seg&#250;n la posici&#243;n de los dedos</span>
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">reconocer_letra</span><span style="color: #707183;">(</span>hand_landmarks, frame<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener coordenadas de los puntos clave de la mano</span>
<span style="background-color: #f2f2f2;"> </span>   dedos = <span style="color: #707183;">[</span>hand_landmarks.landmark<span style="color: #7388d6;">[</span>i<span style="color: #7388d6;">]</span> <span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #7388d6;">(</span>21<span style="color: #7388d6;">)</span><span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener posiciones clave (puntas y base de los dedos)</span>
<span style="background-color: #f2f2f2;"> </span>   pulgar = dedos<span style="color: #707183;">[</span>4<span style="color: #707183;">]</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Punta del pulgar</span>
<span style="background-color: #f2f2f2;"> </span>   indice = dedos<span style="color: #707183;">[</span>8<span style="color: #707183;">]</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Punta del &#237;ndice</span>
<span style="background-color: #f2f2f2;"> </span>   medio = dedos<span style="color: #707183;">[</span>12<span style="color: #707183;">]</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Punta del medio</span>
<span style="background-color: #f2f2f2;"> </span>   anular = dedos<span style="color: #707183;">[</span>16<span style="color: #707183;">]</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Punta del anular</span>
<span style="background-color: #f2f2f2;"> </span>   me&#241;ique = dedos<span style="color: #707183;">[</span>20<span style="color: #707183;">]</span> <span style="color: #b22222;"># </span><span style="color: #b22222;">Punta del me&#241;ique</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Distancias entre puntos (para definir gestos)</span>
<span style="background-color: #f2f2f2;"> </span>   distancia_pulgar_indice = np.linalg.norm<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>pulgar.x - indice.x, pulgar.y - indice.y<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   distancia_indice_medio = np.linalg.norm<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>indice.x - medio.x, indice.y - medio.y<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">L&#243;gica para reconocer algunas letras</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> distancia_pulgar_indice &lt; 0.05 <span style="color: #a020f0;">and</span> distancia_indice_medio &gt; 0.1:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> <span style="color: #8b2252;">"A"</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Se&#241;a de la letra A (pu&#241;o cerrado con pulgar al lado)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">elif</span> indice.y &lt; medio.y <span style="color: #a020f0;">and</span> medio.y &lt; anular.y <span style="color: #a020f0;">and</span> anular.y &lt; me&#241;ique.y:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> <span style="color: #8b2252;">"B"</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Se&#241;a de la letra B (todos los dedos estirados, pulgar en la palma)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">elif</span> distancia_pulgar_indice &gt; 0.1 <span style="color: #a020f0;">and</span> distancia_indice_medio &gt; 0.1:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> <span style="color: #8b2252;">"C"</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Se&#241;a de la letra C (mano en forma de "C")</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> <span style="color: #8b2252;">"Desconocido"</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Captura de video en tiempo real</span>
cap = cv2.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>

<span style="color: #a020f0;">while</span> cap.isOpened<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">frame</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> ret:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir a RGB</span>
<span style="background-color: #f2f2f2;"> </span>   frame_rgb = cv2.cvtColor<span style="color: #707183;">(</span>frame, cv2.COLOR_BGR2RGB<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Procesar la imagen con MediaPipe</span>
<span style="background-color: #f2f2f2;"> </span>   results = hands.process<span style="color: #707183;">(</span>frame_rgb<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar puntos de la mano y reconocer letras</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> results.multi_hand_landmarks:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> hand_landmarks <span style="color: #a020f0;">in</span> results.multi_hand_landmarks:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   mp_drawing.draw_landmarks<span style="color: #707183;">(</span>frame, hand_landmarks, mp_hands.HAND_CONNECTIONS<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Identificar la letra</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   letra_detectada = reconocer_letra<span style="color: #707183;">(</span>hand_landmarks, frame<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la letra en pantalla</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv2.putText<span style="color: #707183;">(</span>frame, f<span style="color: #8b2252;">"Letra: </span>{letra_detectada}<span style="color: #8b2252;">"</span>, <span style="color: #7388d6;">(</span>50, 50<span style="color: #7388d6;">)</span>, 
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv2.FONT_HERSHEY_SIMPLEX, 1, <span style="color: #7388d6;">(</span>0, 255, 0<span style="color: #7388d6;">)</span>, 2, cv2.LINE_AA<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar el video</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Reconocimiento de Letras"</span>, frame<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Salir con la tecla 'q'</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> cv2.waitKey<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span> &amp; 0xFF == <span style="color: #483d8b;">ord</span><span style="color: #707183;">(</span><span style="color: #8b2252;">'q'</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Liberar recursos</span>
cap.release<span style="color: #707183;">()</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>

</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> mediapipe <span style="color: #a020f0;">as</span> mp
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar MediaPipe Hands</span>
<span style="color: #a0522d;">mp_hands</span> = mp.solutions.hands
<span style="color: #a0522d;">mp_drawing</span> = mp.solutions.drawing_utils
<span style="color: #a0522d;">hands</span> = mp_hands.Hands<span style="color: #707183;">(</span>min_detection_confidence=0.7, min_tracking_confidence=0.7<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Funci&#243;n para determinar la letra seg&#250;n la posici&#243;n de los dedos</span>
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">reconocer_letra</span><span style="color: #707183;">(</span>hand_landmarks, frame<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">h</span>, <span style="color: #a0522d;">w</span>, <span style="color: #a0522d;">_</span> = frame.shape  <span style="color: #b22222;"># </span><span style="color: #b22222;">Tama&#241;o de la imagen</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener coordenadas de los puntos clave en p&#237;xeles</span>
<span style="background-color: #f2f2f2;"> </span>   dedos = <span style="color: #707183;">[</span><span style="color: #7388d6;">(</span><span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>hand_landmarks.landmark<span style="color: #709870;">[</span>i<span style="color: #709870;">]</span>.x * w<span style="color: #909183;">)</span>, <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>hand_landmarks.landmark<span style="color: #709870;">[</span>i<span style="color: #709870;">]</span>.y * h<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span> <span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #7388d6;">(</span>21<span style="color: #7388d6;">)</span><span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener posiciones clave (puntas de los dedos)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">pulgar</span>, <span style="color: #a0522d;">indice</span>, <span style="color: #a0522d;">medio</span>, <span style="color: #a0522d;">anular</span>, <span style="color: #a0522d;">me&#241;ique</span> = dedos<span style="color: #707183;">[</span>4<span style="color: #707183;">]</span>, dedos<span style="color: #707183;">[</span>8<span style="color: #707183;">]</span>, dedos<span style="color: #707183;">[</span>12<span style="color: #707183;">]</span>, dedos<span style="color: #707183;">[</span>16<span style="color: #707183;">]</span>, dedos<span style="color: #707183;">[</span>20<span style="color: #707183;">]</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar los n&#250;meros de los landmarks en la imagen</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> i, <span style="color: #707183;">(</span>x, y<span style="color: #707183;">)</span> <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">enumerate</span><span style="color: #707183;">(</span>dedos<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv2.circle<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span>x, y<span style="color: #7388d6;">)</span>, 5, <span style="color: #7388d6;">(</span>0, 255, 0<span style="color: #7388d6;">)</span>, -1<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Puntos verdes</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv2.putText<span style="color: #707183;">(</span>frame, <span style="color: #483d8b;">str</span><span style="color: #7388d6;">(</span>i<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>x, y - 10<span style="color: #7388d6;">)</span>, cv2.FONT_HERSHEY_SIMPLEX, 0.5, <span style="color: #7388d6;">(</span>0, 255, 255<span style="color: #7388d6;">)</span>, 1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar coordenadas del pulgar</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.putText<span style="color: #707183;">(</span>frame, f<span style="color: #8b2252;">'(</span>{<span style="color: #483d8b;">int</span>(pulgar[0])}<span style="color: #8b2252;">, </span>{<span style="color: #483d8b;">int</span>(pulgar[1])}<span style="color: #8b2252;">)'</span>, <span style="color: #7388d6;">(</span>pulgar<span style="color: #909183;">[</span>0<span style="color: #909183;">]</span>, pulgar<span style="color: #909183;">[</span>1<span style="color: #909183;">]</span> - 15<span style="color: #7388d6;">)</span>, 
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv2.FONT_HERSHEY_SIMPLEX, 0.6, <span style="color: #7388d6;">(</span>245, 0, 0<span style="color: #7388d6;">)</span>, 2, cv2.LINE_AA<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   cv2.line<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span><span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>pulgar<span style="color: #709870;">[</span>0<span style="color: #709870;">]</span><span style="color: #909183;">)</span>, <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>pulgar<span style="color: #709870;">[</span>1<span style="color: #709870;">]</span><span style="color: #909183;">)</span><span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span><span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>indice<span style="color: #709870;">[</span>0<span style="color: #709870;">]</span><span style="color: #909183;">)</span>, <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>indice<span style="color: #709870;">[</span>1<span style="color: #709870;">]</span><span style="color: #909183;">)</span><span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>244,34,12<span style="color: #7388d6;">)</span>, 2<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Calcular distancias en p&#237;xeles</span>
<span style="background-color: #f2f2f2;"> </span>   distancia_pulgar_indice = np.linalg.norm<span style="color: #707183;">(</span>np.array<span style="color: #7388d6;">(</span>pulgar<span style="color: #7388d6;">)</span> - np.array<span style="color: #7388d6;">(</span>indice<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   distancia_indice_medio = np.linalg.norm<span style="color: #707183;">(</span>np.array<span style="color: #7388d6;">(</span>indice<span style="color: #7388d6;">)</span> - np.array<span style="color: #7388d6;">(</span>medio<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">L&#243;gica para reconocer algunas letras</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> distancia_pulgar_indice &lt; 30 <span style="color: #a020f0;">and</span> distancia_indice_medio &gt; 50:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> <span style="color: #8b2252;">"A"</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Se&#241;a de la letra A (pu&#241;o cerrado con pulgar al lado)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">elif</span> indice<span style="color: #707183;">[</span>1<span style="color: #707183;">]</span> &lt; medio<span style="color: #707183;">[</span>1<span style="color: #707183;">]</span> <span style="color: #a020f0;">and</span> medio<span style="color: #707183;">[</span>1<span style="color: #707183;">]</span> &lt; anular<span style="color: #707183;">[</span>1<span style="color: #707183;">]</span> <span style="color: #a020f0;">and</span> anular<span style="color: #707183;">[</span>1<span style="color: #707183;">]</span> &lt; me&#241;ique<span style="color: #707183;">[</span>1<span style="color: #707183;">]</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> <span style="color: #8b2252;">"B"</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Se&#241;a de la letra B (todos los dedos estirados, pulgar en la palma)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">elif</span> distancia_pulgar_indice &gt; 50 <span style="color: #a020f0;">and</span> distancia_indice_medio &gt; 50:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> <span style="color: #8b2252;">"C"</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Se&#241;a de la letra C (mano en forma de "C")</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> <span style="color: #8b2252;">"Desconocido"</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Captura de video en tiempo real</span>
cap = cv2.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>

<span style="color: #a020f0;">while</span> cap.isOpened<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">frame</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> ret:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir a RGB</span>
<span style="background-color: #f2f2f2;"> </span>   frame_rgb = cv2.cvtColor<span style="color: #707183;">(</span>frame, cv2.COLOR_BGR2RGB<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Procesar la imagen con MediaPipe</span>
<span style="background-color: #f2f2f2;"> </span>   results = hands.process<span style="color: #707183;">(</span>frame_rgb<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar puntos de la mano y reconocer letras</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> results.multi_hand_landmarks:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> hand_landmarks <span style="color: #a020f0;">in</span> results.multi_hand_landmarks:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   mp_drawing.draw_landmarks<span style="color: #707183;">(</span>frame, hand_landmarks, mp_hands.HAND_CONNECTIONS<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Identificar la letra</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   letra_detectada = reconocer_letra<span style="color: #707183;">(</span>hand_landmarks, frame<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la letra en pantalla</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv2.putText<span style="color: #707183;">(</span>frame, f<span style="color: #8b2252;">"Letra: </span>{letra_detectada}<span style="color: #8b2252;">"</span>, <span style="color: #7388d6;">(</span>50, 50<span style="color: #7388d6;">)</span>, 
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv2.FONT_HERSHEY_SIMPLEX, 1, <span style="color: #7388d6;">(</span>0, 255, 0<span style="color: #7388d6;">)</span>, 2, cv2.LINE_AA<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar el video</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Reconocimiento de Letras"</span>, frame<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Salir con la tecla 'q'</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> cv2.waitKey<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span> &amp; 0xFF == <span style="color: #483d8b;">ord</span><span style="color: #707183;">(</span><span style="color: #8b2252;">'q'</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Liberar recursos</span>
cap.release<span style="color: #707183;">()</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>

</pre>
</div>
</div>
</div>
</div>
</div>


<div id="outline-container-orgfa54f2e" class="outline-2">
<h2 id="orgfa54f2e">Actividades</h2>
<div class="outline-text-2" id="text-orgfa54f2e">
<ul class="org-ul">
<li>Generar una imagen tipo pixel art utilizando una matriz de enteros en el rango de 0 a 255.</li>
<li>Generar al menos cinco operadores puntuales utilizando la imagen generada o una imagen previamente cargada.</li>
<li>Aplicar las transformaciones geométricas vistas en clase.</li>
<li>Investigar qué son las ecuaciones paramétricas.</li>
<li>Crear un dibujo mediante primitivas de dibujo utilizando OpenCV.</li>
<li>Programar al menos 10 ecuaciones paramétricas.</li>
</ul>

<p>
Todas las actividades anteriores deben estar documentadas en formato Markdown en el repositorio.  
</p>
</div>
</div>


<div id="outline-container-org85a7eaf" class="outline-2">
<h2 id="org85a7eaf">Programación</h2>
<div class="outline-text-2" id="text-org85a7eaf">
</div>
<div id="outline-container-org5840980" class="outline-3">
<h3 id="org5840980">Programas Unidad 1</h3>
<div class="outline-text-3" id="text-org5840980">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np 

<span style="color: #a0522d;">img</span> =cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>,1<span style="color: #707183;">)</span>
<span style="color: #a0522d;">img2</span> =cv.cvtColor<span style="color: #707183;">(</span>img, cv.COLOR_BGR2GRAY<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'img2a'</span>, img2<span style="color: #707183;">)</span>
<span style="color: #a0522d;">x</span>,<span style="color: #a0522d;">y</span>=img2.shape<span style="color: #707183;">[</span>:2<span style="color: #707183;">]</span>
<span style="color: #483d8b;">print</span><span style="color: #707183;">(</span>x,y<span style="color: #707183;">)</span>
<span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>x<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> j <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>y<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img2</span><span style="color: #707183;">[</span><span style="color: #a0522d;">i</span>,<span style="color: #a0522d;">j</span><span style="color: #707183;">]</span>=255-img2<span style="color: #707183;">[</span>i,j<span style="color: #707183;">]</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'img2b'</span>, img2<span style="color: #707183;">)</span>

<span style="color: #b22222;">#</span><span style="color: #b22222;">img3 =cv.cvtColor(img, cv.COLOR_BGR2RGB)</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">img4 =cv.cvtColor(img, cv.COLOR_BGR2BGRA)</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">img5 =cv.cvtColor(img4, cv.COLOR_BGRA2BGR65)</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">cv.imshow('img', img)</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">cv.imshow('img2', img2)</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">cv.imshow('img3', img3)3</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">cv.imshow('img4', img4)</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">cv.imshow('img4', img5)</span>

cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>





<div id="outline-container-org808135d" class="outline-4">
<h4 id="org808135d">Creación de una Imagen</h4>
<div class="outline-text-4" id="text-org808135d">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np   <span style="color: #b22222;"># </span><span style="color: #b22222;">Importa la librer&#237;a NumPy, &#250;til para trabajar con arreglos y operaciones num&#233;ricas.</span>
<span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv     <span style="color: #b22222;"># </span><span style="color: #b22222;">Importa la librer&#237;a OpenCV, que se utiliza para procesamiento de im&#225;genes.</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crea una imagen de 500x500 p&#237;xeles, todos con valor 240 (gris claro). </span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">La imagen tiene solo un canal (escala de grises) y est&#225; inicializada con valores de tipo uint8 (enteros sin signo de 8 bits).</span>
<span style="color: #a0522d;">img</span> = np.ones<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>500, 500<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span> * 240

<span style="color: #b22222;"># </span><span style="color: #b22222;">Modifica algunos p&#237;xeles espec&#237;ficos en las coordenadas (30, 30) a (30, 35) para que tengan un valor de 1 (casi negro).</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Esto crear&#225; una peque&#241;a l&#237;nea vertical de 6 p&#237;xeles en la imagen de color casi negro.</span>
img<span style="color: #707183;">[</span>30, 30<span style="color: #707183;">]</span> = 1
img<span style="color: #707183;">[</span>30, 31<span style="color: #707183;">]</span> = 1
img<span style="color: #707183;">[</span>30, 32<span style="color: #707183;">]</span> = 1
img<span style="color: #707183;">[</span>30, 33<span style="color: #707183;">]</span> = 1
img<span style="color: #707183;">[</span>30, 34<span style="color: #707183;">]</span> = 1
img<span style="color: #707183;">[</span>30, 35<span style="color: #707183;">]</span> = 1

<span style="color: #b22222;"># </span><span style="color: #b22222;">Muestra la imagen en una ventana con el t&#237;tulo 'img'. </span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'img'</span>, img<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Espera a que el usuario presione cualquier tecla para continuar.</span>
cv.waitKey<span style="color: #707183;">()</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cierra todas las ventanas creadas por OpenCV.</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org7ba22eb" class="outline-4">
<h4 id="org7ba22eb">Cargar Imagen</h4>
<div class="outline-text-4" id="text-org7ba22eb">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv  <span style="color: #b22222;"># </span><span style="color: #b22222;">Importa la librer&#237;a OpenCV, que se usa para el procesamiento de im&#225;genes y videos.</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Lee una imagen desde el archivo 'tr.png'. </span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">El segundo argumento '1' indica que se leer&#225; la imagen en color (1 para color, 0 para escala de grises, -1 para incluir el canal alfa si existe).</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 1<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Muestra la imagen le&#237;da en una ventana llamada 'ejemplo'.</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'ejemplo'</span>, img<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Espera indefinidamente hasta que el usuario presione una tecla.</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cierra todas las ventanas abiertas por OpenCV.</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org1815ea7" class="outline-4">
<h4 id="org1815ea7">Split y Merge Imagen</h4>
<div class="outline-text-4" id="text-org1815ea7">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv  <span style="color: #b22222;"># </span><span style="color: #b22222;">Importa OpenCV, que es &#250;til para procesamiento de im&#225;genes.</span>
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np  <span style="color: #b22222;"># </span><span style="color: #b22222;">Importa NumPy, que es &#250;til para trabajar con matrices y operaciones num&#233;ricas.</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Carga la imagen '1a.png' en color (1 para color, 0 para escala de grises).</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'1a.png'</span>, 1<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crea una imagen vac&#237;a (llena de ceros, que representa color negro) con el mismo tama&#241;o que la imagen original.</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">La imagen vac&#237;a tiene un solo canal (escala de grises), por lo que se usa `img.shape[:2]` para obtener las dimensiones de la imagen (alto, ancho).</span>
<span style="color: #a0522d;">img2</span> = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>img.shape<span style="color: #909183;">[</span>:2<span style="color: #909183;">]</span><span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Imprime las dimensiones de la imagen en la terminal (alto, ancho).</span>
<span style="color: #483d8b;">print</span><span style="color: #707183;">(</span>img.shape<span style="color: #7388d6;">[</span>:2<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Separa los canales rojo (r), verde (g) y azul (b) de la imagen utilizando la funci&#243;n `cv.split()`.</span>
<span style="color: #a0522d;">r</span>, <span style="color: #a0522d;">g</span>, <span style="color: #a0522d;">b</span> = cv.split<span style="color: #707183;">(</span>img<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Recombina los canales, pero los reorganiza como rojo, azul y verde (RBG en lugar de RGB).</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">r2 = cv.merge([img2, img2, r])</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">g2 = cv.merge([img2, g, img2])</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">b2 = cv.merge([b, img2, img2])</span>
img3 = cv.merge<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>b, r, g<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Crea una imagen que contiene solo el canal rojo, llenando los otros dos canales (verde y azul) con ceros (negro).</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">r = cv.merge([r, img2, img2])</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crea una imagen que contiene solo el canal verde, llenando los otros dos canales (rojo y azul) con ceros.</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">g = cv.merge([img2, g, img2])</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crea una imagen que contiene solo el canal azul, llenando los otros dos canales (rojo y verde) con ceros.#</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">b = cv.merge([img2, img2, b])</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Muestra la imagen original en una ventana llamada 'ejemplo'.</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'ejemplo'</span>, img<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Muestra la imagen que contiene solo el canal rojo.</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">cv.imshow('r', r)</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">cv.imshow('r2', r2)</span>



<span style="color: #b22222;"># </span><span style="color: #b22222;">Muestra la imagen que contiene solo el canal verde.</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">cv.imshow('g', g)</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">cv.imshow('g2', g2)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Muestra la imagen que contiene solo el canal azul.</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">cv.imshow('b', b)</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">cv.imshow('b2', b2)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Muestra la imagen con los canales reorganizados (RBG en lugar de RGB).</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'img3'</span>, img3<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Espera indefinidamente a que el usuario presione una tecla.</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cierra todas las ventanas abiertas por OpenCV.</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgda2d579" class="outline-4">
<h4 id="orgda2d579">Ejemplo de Operador Puntual en Imágenes</h4>
<div class="outline-text-4" id="text-orgda2d579">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv

<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 0<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'salida'</span>, img<span style="color: #707183;">)</span>
<span style="color: #a0522d;">x</span>,<span style="color: #a0522d;">y</span>=img.shape
<span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>x<span style="color: #707183;">)</span>:
        <span style="color: #a020f0;">for</span> j <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>y<span style="color: #707183;">)</span>:
                <span style="color: #a020f0;">if</span><span style="color: #707183;">(</span>img<span style="color: #7388d6;">[</span>i,j<span style="color: #7388d6;">]</span>&gt;150<span style="color: #707183;">)</span>:
                        <span style="color: #a0522d;">img</span><span style="color: #707183;">[</span><span style="color: #a0522d;">i</span>,<span style="color: #a0522d;">j</span><span style="color: #707183;">]</span>=255
                <span style="color: #a020f0;">else</span>:
                        img<span style="color: #707183;">[</span><span style="color: #a0522d;">i</span>,<span style="color: #a0522d;">j</span><span style="color: #707183;">]</span>=0


cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'negativo'</span>, img<span style="color: #707183;">)</span>
<span style="color: #483d8b;">print</span><span style="color: #707183;">(</span> img.shape, x , y<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org4be50be" class="outline-4">
<h4 id="org4be50be">Cargar vídeo Opencv</h4>
<div class="outline-text-4" id="text-org4be50be">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a0522d;">cap</span> = cv.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>

<span style="color: #a020f0;">while</span><span style="color: #707183;">(</span><span style="color: #008b8b;">True</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">img</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a0522d;">ret</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'video'</span>, img<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   k =cv.waitKey<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span> &amp; 0xFF
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> k == 27 :
            <span style="color: #a020f0;">break</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">else</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>
<span style="background-color: #f2f2f2;"> </span>  
cap.release<span style="color: #707183;">()</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>




<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a0522d;">cap</span> = cv.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>

<span style="color: #a020f0;">while</span><span style="color: #707183;">(</span><span style="color: #008b8b;">True</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">img</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a0522d;">ret</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'video'</span>, img<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   img2 = cv.cvtColor<span style="color: #707183;">(</span>img, cv.COLOR_BGR2GRAY<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">hsv</span> = cv.cvtColor<span style="color: #707183;">(</span>img, cv.COLOR_BGR2HSV<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">w</span>,<span style="color: #a0522d;">h</span> = img2.shape
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img3</span>=255-img2
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'img2'</span>, img2<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'hsv'</span>, hsv<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'img3'</span>, img3<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">k</span> =cv.waitKey<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span> &amp; 0xFF
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> k == 27 :
            <span style="color: #a020f0;">break</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">else</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>
<span style="background-color: #f2f2f2;"> </span>   
cap.release<span style="color: #707183;">()</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</div>
</div>



<div id="outline-container-org09c9198" class="outline-3">
<h3 id="org09c9198">Ejemplos de Transformaciones Geométricas en Modo Raw en Python</h3>
<div class="outline-text-3" id="text-org09c9198">
</div>
<div id="outline-container-orgf4064e7" class="outline-4">
<h4 id="orgf4064e7">1. Traslación</h4>
<div class="outline-text-4" id="text-orgf4064e7">
<p>
En esta transformación, desplazamos la imagen en el espacio sumando un valor fijo a las coordenadas de los píxeles.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen en escala de grises</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener el tama&#241;o de la imagen</span>
<span style="color: #a0522d;">x</span>, <span style="color: #a0522d;">y</span> = img.shape

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una imagen vac&#237;a para la traslaci&#243;n</span>
<span style="color: #a0522d;">translated_img</span> = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>x, y<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir el desplazamiento en x e y</span>
<span style="color: #a0522d;">dx</span>, <span style="color: #a0522d;">dy</span> = 100, 50

<span style="color: #b22222;"># </span><span style="color: #b22222;">Trasladar la imagen</span>
<span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>x<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> j <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>y<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   new_x = i + dy
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   new_y = j + dx
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> 0 &lt;= new_x &lt; x <span style="color: #a020f0;">and</span> 0 &lt;= new_y &lt; y:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   translated_img<span style="color: #707183;">[</span><span style="color: #a0522d;">new_x</span>, <span style="color: #a0522d;">new_y</span><span style="color: #707183;">]</span> = img<span style="color: #707183;">[</span>i, j<span style="color: #707183;">]</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen original y la trasladada</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Original'</span>, img<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Trasladada'</span>, translated_img<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org74d3661" class="outline-4">
<h4 id="org74d3661">2. Rotación (alrededor del centro de la imagen)</h4>
<div class="outline-text-4" id="text-org74d3661">
<p>
La rotación se realiza alrededor del centro de la imagen, utilizando las fórmulas matemáticas correspondientes.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a020f0;">import</span> math

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen en escala de grises</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener el tama&#241;o de la imagen</span>
<span style="color: #a0522d;">x</span>, <span style="color: #a0522d;">y</span> = img.shape

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una imagen vac&#237;a para almacenar el resultado</span>
<span style="color: #a0522d;">rotated_img</span> = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>x*2, y*2<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>
<span style="color: #a0522d;">xx</span>, <span style="color: #a0522d;">yy</span> = rotated_img.shape
<span style="color: #b22222;"># </span><span style="color: #b22222;">Calcular el centro de la imagen</span>
<span style="color: #a0522d;">cx</span>, <span style="color: #a0522d;">cy</span> = <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>x  // 2<span style="color: #707183;">)</span>, <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>y  // 2<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir el &#225;ngulo de rotaci&#243;n (en grados) y convertirlo a radianes</span>
angle = 45
theta = math.radians<span style="color: #707183;">(</span>angle<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Rotar la imagen</span>
<span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>x<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> j <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>y<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   new_x = <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>j - cx<span style="color: #7388d6;">)</span> * math.cos<span style="color: #7388d6;">(</span>theta<span style="color: #7388d6;">)</span> - <span style="color: #7388d6;">(</span>i - cy<span style="color: #7388d6;">)</span> * math.sin<span style="color: #7388d6;">(</span>theta<span style="color: #7388d6;">)</span> + cx<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   new_y = <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>j - cx<span style="color: #7388d6;">)</span> * math.sin<span style="color: #7388d6;">(</span>theta<span style="color: #7388d6;">)</span> + <span style="color: #7388d6;">(</span>i - cy<span style="color: #7388d6;">)</span> * math.cos<span style="color: #7388d6;">(</span>theta<span style="color: #7388d6;">)</span> + cy<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> 0 &lt;= new_x &lt; y <span style="color: #a020f0;">and</span> 0 &lt;= new_y &lt; x:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   rotated_img<span style="color: #707183;">[</span><span style="color: #a0522d;">new_y</span>, <span style="color: #a0522d;">new_x</span><span style="color: #707183;">]</span> = img<span style="color: #707183;">[</span>i, j<span style="color: #707183;">]</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen original y la rotada</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Original'</span>, img<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Rotada (modo raw)'</span>, rotated_img<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgb381d14" class="outline-4">
<h4 id="orgb381d14">3. Escalado</h4>
<div class="outline-text-4" id="text-orgb381d14">
<p>
El escalado cambia el tamaño de la imagen multiplicando las coordenadas por un factor de escala.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen en escala de grises</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 0<span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener el tama&#241;o de la imagen</span>
<span style="color: #a0522d;">x</span>, <span style="color: #a0522d;">y</span> = img.shape
<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir el factor de escala</span>
<span style="color: #a0522d;">scale_x</span>, <span style="color: #a0522d;">scale_y</span> = 2, 2
<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una nueva imagen para almacenar el escalado</span>
<span style="color: #a0522d;">scaled_img</span> = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span><span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>x * scale_y<span style="color: #909183;">)</span>, <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>y * scale_x<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar el escalado</span>
<span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>x<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> j <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>y<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>  <span style="color: #b22222;">#</span><span style="color: #b22222;">orig_x = int(i * scale_y)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>  <span style="color: #b22222;">#</span><span style="color: #b22222;">orig_y = int(j * scale_x)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>  scaled_img<span style="color: #707183;">[</span>i*2, j*2<span style="color: #707183;">]</span> = img<span style="color: #707183;">[</span>i, j<span style="color: #707183;">]</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen original y la escalada</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Original'</span>, img<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Escalada (modo raw)'</span>, scaled_img<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org127cac2" class="outline-4">
<h4 id="org127cac2">4. Cizallamiento (Shearing)</h4>
<div class="outline-text-4" id="text-org127cac2">
<p>
En el cizallamiento, los píxeles se desplazan en una dirección proporcional a otra, lo que inclina la imagen.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen en escala de grises</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener el tama&#241;o de la imagen</span>
<span style="color: #a0522d;">x</span>, <span style="color: #a0522d;">y</span> = img.shape

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una imagen vac&#237;a para el cizallamiento</span>
<span style="color: #a0522d;">sheared_img</span> = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>x, y<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir el factor de cizallamiento</span>
shear_factor_x = 0.5

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar el cizallamiento en el eje x</span>
<span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>x<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> j <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>y<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   new_x = i
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   new_y = <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>j + shear_factor_x * i<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> 0 &lt;= new_x &lt; x <span style="color: #a020f0;">and</span> 0 &lt;= new_y &lt; y:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sheared_img<span style="color: #707183;">[</span><span style="color: #a0522d;">new_x</span>, <span style="color: #a0522d;">new_y</span><span style="color: #707183;">]</span> = img<span style="color: #707183;">[</span>i, j<span style="color: #707183;">]</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen original y la cizallada</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Original'</span>, img<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Cizallada (modo raw)'</span>, sheared_img<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc941c63" class="outline-4">
<h4 id="orgc941c63">5. Reflexión (Reflection)</h4>
<div class="outline-text-4" id="text-orgc941c63">
<p>
La reflexión voltea la imagen sobre un eje, como el eje vertical o horizontal.
</p>
</div>

<ul class="org-ul">
<li><a id="org6ad8bf4"></a>Reflexión horizontal<br />
<div class="outline-text-5" id="text-org6ad8bf4">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen en escala de grises</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener el tama&#241;o de la imagen</span>
<span style="color: #a0522d;">x</span>, <span style="color: #a0522d;">y</span> = img.shape

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una imagen vac&#237;a para la reflexi&#243;n</span>
<span style="color: #a0522d;">reflected_img</span> = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>x, y<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar la reflexi&#243;n horizontal</span>
<span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>x<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> j <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>y<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   reflected_img<span style="color: #707183;">[</span>i, y - j - 1<span style="color: #707183;">]</span> = img<span style="color: #707183;">[</span>i, j<span style="color: #707183;">]</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen original y la reflejada</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Original'</span>, img<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Reflejada Horizontalmente (modo raw)'</span>, reflected_img<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</li>

<li><a id="org4f0c2fb"></a>Reflexión vertical<br />
<div class="outline-text-5" id="text-org4f0c2fb">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen en escala de grises</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener el tama&#241;o de la imagen</span>
<span style="color: #a0522d;">x</span>, <span style="color: #a0522d;">y</span> = img.shape

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una imagen vac&#237;a para la reflexi&#243;n</span>
<span style="color: #a0522d;">reflected_img</span> = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>x, y<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar la reflexi&#243;n vertical</span>
<span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>x<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> j <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>y<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   reflected_img<span style="color: #707183;">[</span>x - i - 1, j<span style="color: #707183;">]</span> = img<span style="color: #707183;">[</span>i, j<span style="color: #707183;">]</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen original y la reflejada</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Original'</span>, img<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Reflejada Verticalmente (modo raw)'</span>, reflected_img<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</li>
</ul>
</div>
</div>


<div id="outline-container-org7ba284d" class="outline-3">
<h3 id="org7ba284d">Ejemplos de Transformaciones Geométricas en Python usando OpenCV</h3>
<div class="outline-text-3" id="text-org7ba284d">
</div>
<div id="outline-container-orgf545425" class="outline-4">
<h4 id="orgf545425">1. Traslación</h4>
<div class="outline-text-4" id="text-orgf545425">
<p>
En OpenCV, la traslación se realiza usando matrices de transformación afín y la función `cv.warpAffine()`.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen en escala de grises</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener el tama&#241;o de la imagen</span>
<span style="color: #a0522d;">x</span>, <span style="color: #a0522d;">y</span> = img.shape

<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir el desplazamiento en x e y</span>
<span style="color: #a0522d;">dx</span>, <span style="color: #a0522d;">dy</span> = 100, 50

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear la matriz de traslaci&#243;n</span>
<span style="color: #a0522d;">M</span> = np.float32<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span><span style="color: #909183;">[</span>1, 0, dx<span style="color: #909183;">]</span>, <span style="color: #909183;">[</span>0, 1, dy<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar la traslaci&#243;n usando warpAffine</span>
<span style="color: #a0522d;">translated_img</span> = cv.warpAffine<span style="color: #707183;">(</span>img, M, <span style="color: #7388d6;">(</span>y, x<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen original y la trasladada</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Original'</span>, img<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Trasladada'</span>, translated_img<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgd9bbe5f" class="outline-4">
<h4 id="orgd9bbe5f">2. Rotación (alrededor del centro de la imagen)</h4>
<div class="outline-text-4" id="text-orgd9bbe5f">
<p>
La rotación alrededor del centro de la imagen se puede realizar con la función `cv.getRotationMatrix2D()`.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen en escala de grises</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener el tama&#241;o de la imagen</span>
<span style="color: #a0522d;">x</span>, <span style="color: #a0522d;">y</span> = img.shape

<span style="color: #b22222;"># </span><span style="color: #b22222;">Calcular el centro de la imagen</span>
<span style="color: #a0522d;">center</span> = <span style="color: #707183;">(</span>y // 2, x // 2<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir el &#225;ngulo de rotaci&#243;n (en grados)</span>
<span style="color: #a0522d;">angle</span> = 45

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear la matriz de rotaci&#243;n</span>
<span style="color: #a0522d;">M</span> = cv.getRotationMatrix2D<span style="color: #707183;">(</span>center, angle, 1.0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar la rotaci&#243;n usando warpAffine</span>
<span style="color: #a0522d;">rotated_img</span> = cv.warpAffine<span style="color: #707183;">(</span>img, M, <span style="color: #7388d6;">(</span>y, x<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen original y la rotada</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Original'</span>, img<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Rotada'</span>, rotated_img<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgd237277" class="outline-4">
<h4 id="orgd237277">3. Escalado</h4>
<div class="outline-text-4" id="text-orgd237277">
<p>
El escalado se puede realizar usando la función `cv.resize()`.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen en escala de grises</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 1<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir el factor de escala</span>
<span style="color: #a0522d;">scale_x</span>, <span style="color: #a0522d;">scale_y</span> = 0.5, 0.5

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar el escalado usando cv.resize()</span>
<span style="color: #a0522d;">scaled_img</span> = cv.resize<span style="color: #707183;">(</span>img, <span style="color: #008b8b;">None</span>, fx=scale_x, fy=scale_y<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen original y la escalada</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Original'</span>, img<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Escalada'</span>, scaled_img<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgf66e930" class="outline-4">
<h4 id="orgf66e930">4. Cizallamiento (Shearing)</h4>
<div class="outline-text-4" id="text-orgf66e930">
<p>
El cizallamiento se puede realizar creando una matriz de transformación afín personalizada.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen en escala de grises</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener el tama&#241;o de la imagen</span>
<span style="color: #a0522d;">x</span>, <span style="color: #a0522d;">y</span> = img.shape

<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir el factor de cizallamiento</span>
<span style="color: #a0522d;">shear_factor</span> = 0.5

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear la matriz de cizallamiento</span>
<span style="color: #a0522d;">M</span> = np.float32<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span><span style="color: #909183;">[</span>1, shear_factor, 0<span style="color: #909183;">]</span>, <span style="color: #909183;">[</span>0, 1, 0<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar el cizallamiento usando warpAffine</span>
<span style="color: #a0522d;">sheared_img</span> = cv.warpAffine<span style="color: #707183;">(</span>img, M, <span style="color: #7388d6;">(</span>y, x<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen original y la cizallada</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Original'</span>, img<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Cizallada'</span>, sheared_img<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org80d3019" class="outline-4">
<h4 id="org80d3019">5. Reflexión (Reflection)</h4>
<div class="outline-text-4" id="text-org80d3019">
<p>
En OpenCV, la reflexión de una imagen se realiza con la función `cv.flip()`.
</p>
</div>

<ul class="org-ul">
<li><a id="orgabe10c1"></a>Reflexión horizontal<br />
<div class="outline-text-5" id="text-orgabe10c1">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen en escala de grises</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar la reflexi&#243;n horizontal usando cv.flip()</span>
<span style="color: #a0522d;">reflected_img</span> = cv.flip<span style="color: #707183;">(</span>img, 1<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen original y la reflejada</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Original'</span>, img<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Reflejada Horizontalmente'</span>, reflected_img<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</li>

<li><a id="org8381a7e"></a>Reflexión vertical<br />
<div class="outline-text-5" id="text-org8381a7e">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la imagen en escala de grises</span>
<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar la reflexi&#243;n vertical usando cv.flip()</span>
<span style="color: #a0522d;">reflected_img</span> = cv.flip<span style="color: #707183;">(</span>img, 0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen original y la reflejada</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Original'</span>, img<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Imagen Reflejada Verticalmente'</span>, reflected_img<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-orgce2793b" class="outline-3">
<h3 id="orgce2793b">Primitivas de Dibujo</h3>
<div class="outline-text-3" id="text-orgce2793b">
<div class="org-src-container">
<pre class="src src-python">
<span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #a0522d;">img</span> = np.ones<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>500, 500, 3<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>*255 
cv.circle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>250, 250<span style="color: #7388d6;">)</span>, 50, <span style="color: #7388d6;">(</span>0,234,21<span style="color: #7388d6;">)</span>, -1<span style="color: #707183;">)</span>
cv.circle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>250, 250<span style="color: #7388d6;">)</span>, 30, <span style="color: #7388d6;">(</span>0,0,0<span style="color: #7388d6;">)</span>, -1<span style="color: #707183;">)</span>

cv.line<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>1,1<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>230, 240<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>0,234,21<span style="color: #7388d6;">)</span>, 3   <span style="color: #707183;">)</span>
cv.rectangle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>20,20<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>50,60<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>0,0,0<span style="color: #7388d6;">)</span>, 3 <span style="color: #707183;">)</span>
pts = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span><span style="color: #909183;">[</span>10,5<span style="color: #909183;">]</span>,<span style="color: #909183;">[</span>20,30<span style="color: #909183;">]</span>,<span style="color: #909183;">[</span>70,20<span style="color: #909183;">]</span>,<span style="color: #909183;">[</span>50,10<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span>, np.int32<span style="color: #707183;">)</span>
pts = pts.reshape<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>-1,1,2<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>
cv.polylines<span style="color: #707183;">(</span>img,<span style="color: #7388d6;">[</span>pts<span style="color: #7388d6;">]</span>,<span style="color: #008b8b;">True</span>,<span style="color: #7388d6;">(</span>0,0,0<span style="color: #7388d6;">)</span>, 3<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'img'</span>, img<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">()</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>



</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #a0522d;">img</span> = np.ones<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>500, 500, 3<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>*255 

<span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>400<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   img = np.ones<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>500, 500, 3<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>*255 
<span style="background-color: #f2f2f2;"> </span>   cv.circle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>0+i, 0+i<span style="color: #7388d6;">)</span>, 20, <span style="color: #7388d6;">(</span>0,234,21<span style="color: #7388d6;">)</span>, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'img'</span>, img<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   cv.waitKey<span style="color: #707183;">(</span>40<span style="color: #707183;">)</span>

cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>


</pre>
</div>
</div>
</div>







<div id="outline-container-orgdfe6584" class="outline-3">
<h3 id="orgdfe6584">Parametricas</h3>
<div class="outline-text-3" id="text-orgdfe6584">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a020f0;">import</span> cv2

<span style="color: #b22222;"># </span><span style="color: #b22222;">Funci&#243;n para generar un solo punto de la elipse en funci&#243;n del par&#225;metro t</span>
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">generar_punto_elipse</span><span style="color: #707183;">(</span>a, b, t<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">x</span> = <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>a * 2* np.cos<span style="color: #7388d6;">(</span>t<span style="color: #7388d6;">)</span> + 200<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Desplazamiento para centrar</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">y</span> = <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>b * np.sin<span style="color: #7388d6;">(</span>t<span style="color: #7388d6;">)</span> + 200<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> <span style="color: #707183;">(</span>x, y<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Dimensiones de la imagen</span>
<span style="color: #a0522d;">img_width</span>, <span style="color: #a0522d;">img_height</span> = 800, 800

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una imagen en blanco</span>
<span style="color: #a0522d;">imagen</span> = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>img_height, img_width, 3<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Par&#225;metros de la elipse</span>
a = 200  <span style="color: #b22222;"># </span><span style="color: #b22222;">Semieje mayor</span>
b = 100  <span style="color: #b22222;"># </span><span style="color: #b22222;">Semieje menor</span>
num_puntos = 1000
<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear los valores del par&#225;metro t para la animaci&#243;n</span>
t_vals = np.linspace<span style="color: #707183;">(</span>0, 2 * np.pi, num_puntos<span style="color: #707183;">)</span>
<span style="color: #483d8b;">print</span><span style="color: #707183;">(</span>t_vals<span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle de animaci&#243;n</span>
<span style="color: #a020f0;">for</span> t <span style="color: #a020f0;">in</span> t_vals:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una nueva imagen en blanco en cada iteraci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   imagen = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>img_height, img_width, 3<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Generar el punto en la elipse</span>
<span style="background-color: #f2f2f2;"> </span>   punto = generar_punto_elipse<span style="color: #707183;">(</span>a, b, t<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar el punto en la elipse</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.circle<span style="color: #707183;">(</span>imagen, punto, radius=30, color=<span style="color: #7388d6;">(</span>0, 255, 0<span style="color: #7388d6;">)</span>, thickness=-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar la trayectoria completa de la elipse (opcional, si quieres ver toda la elipse)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> t_tray <span style="color: #a020f0;">in</span> t_vals:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   pt_tray = generar_punto_elipse<span style="color: #707183;">(</span>a, b, t_tray<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv2.circle<span style="color: #707183;">(</span>imagen, pt_tray, radius=1, color=<span style="color: #7388d6;">(</span>255, 255, 255<span style="color: #7388d6;">)</span>, thickness=-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen con el punto en movimiento</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'img'</span>, imagen<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Controlar la velocidad de la animaci&#243;n (en milisegundos)</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.waitKey<span style="color: #707183;">(</span>10<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cerrar la ventana despu&#233;s de la animaci&#243;n</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>

</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a020f0;">import</span> cv2

<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir los par&#225;metros de la circunferencia</span>
<span style="color: #a0522d;">r</span> = 100  <span style="color: #b22222;"># </span><span style="color: #b22222;">radio</span>
<span style="color: #a0522d;">h</span> = 250  <span style="color: #b22222;"># </span><span style="color: #b22222;">centro en x</span>
<span style="color: #a0522d;">k</span> = 250  <span style="color: #b22222;"># </span><span style="color: #b22222;">centro en y</span>
<span style="color: #a0522d;">num_frames</span> = 100  <span style="color: #b22222;"># </span><span style="color: #b22222;">n&#250;mero de frames en la animaci&#243;n</span>
<span style="color: #a0522d;">t_vals</span> = np.linspace<span style="color: #707183;">(</span>0, 2*np.pi, num_frames<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">valores del par&#225;metro t</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una ventana para mostrar la animaci&#243;n</span>
cv2.namedWindow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Animaci&#243;n Circunferencia'</span>, cv2.WINDOW_AUTOSIZE<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Animar la circunferencia</span>
<span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span><span style="color: #483d8b;">len</span><span style="color: #7388d6;">(</span>t_vals<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">t</span> = t_vals<span style="color: #707183;">[</span>i<span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Calcular las coordenadas del punto en la circunferencia</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">x</span> = <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>h + r * np.cos<span style="color: #7388d6;">(</span>t<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">y</span> = <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>k + r * np.sin<span style="color: #7388d6;">(</span>t<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una imagen en blanco</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">frame</span> = np.ones<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>500, 500, 3<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span> * 255
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar la circunferencia</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.circle<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span>h, k<span style="color: #7388d6;">)</span>, r, <span style="color: #7388d6;">(</span>0, 0, 0<span style="color: #7388d6;">)</span>, 2<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar el punto en movimiento</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.circle<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span>x, y<span style="color: #7388d6;">)</span>, 10, <span style="color: #7388d6;">(</span>0, 0, 255<span style="color: #7388d6;">)</span>, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar el frame en la ventana</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Animaci&#243;n Circunferencia'</span>, frame<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Esperar un corto tiempo para crear la animaci&#243;n (ajustar velocidad)</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.waitKey<span style="color: #707183;">(</span>50<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="color: #b22222;"># </span><span style="color: #b22222;">Cerrar la ventana cuando la animaci&#243;n termine</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>

</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a020f0;">import</span> cv2


<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir los par&#225;metros iniciales</span>
<span style="color: #a0522d;">width</span>, <span style="color: #a0522d;">height</span> = 1000, 1000  <span style="color: #b22222;"># </span><span style="color: #b22222;">Ampliar la ventana para ver toda la figura</span>
<span style="color: #a0522d;">img</span> = np.ones<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>height, width, 3<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>*255

<span style="color: #b22222;"># </span><span style="color: #b22222;">Par&#225;metros de la curva de Limacon</span>
<span style="color: #a0522d;">a</span>, <span style="color: #a0522d;">b</span> = 150, 100  <span style="color: #b22222;"># </span><span style="color: #b22222;">Reducir los valores de a y b para que la curva se ajuste mejor</span>
k = 0.7<span style="color: #b22222;"># </span><span style="color: #b22222;">Constante de multiplicaci&#243;n del &#225;ngulo</span>
theta_increment = 0.05  <span style="color: #b22222;"># </span><span style="color: #b22222;">Incremento del &#225;ngulo</span>
max_theta = 2 * np.pi  <span style="color: #b22222;"># </span><span style="color: #b22222;">Un ciclo completo</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Centro de la imagen</span>
<span style="color: #a0522d;">center_x</span>, <span style="color: #a0522d;">center_y</span> = width // 2, height // 2

theta = 0  <span style="color: #b22222;"># </span><span style="color: #b22222;">&#193;ngulo inicial</span>

<span style="color: #a020f0;">while</span> <span style="color: #008b8b;">True</span>:  <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle infinito</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Limpiar la imagen</span>
<span style="background-color: #f2f2f2;"> </span>   img = np.ones<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>width, height, 3<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span> * 255
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar la curva completa desde 0 hasta theta</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> t <span style="color: #a020f0;">in</span> np.arange<span style="color: #707183;">(</span>0, theta, theta_increment<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Calcular las coordenadas param&#233;tricas (x, y) para la curva de Limacon</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   r = a + b * np.cos<span style="color: #707183;">(</span>k * t<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   x = <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>center_x + r * np.cos<span style="color: #7388d6;">(</span>t<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   y = <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>center_y + r * np.sin<span style="color: #7388d6;">(</span>t<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar un c&#237;rculo en la posici&#243;n calculada</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;">#</span><span style="color: #b22222;">cv2.circle(img, (x, y), 3, (0, 234, 0), -1)  # Color rojo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv2.circle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>x-2, y-2<span style="color: #7388d6;">)</span>, 3, <span style="color: #7388d6;">(</span>0, 0, 0<span style="color: #7388d6;">)</span>, -1<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color rojo</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la constante k en la imagen</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;">#</span><span style="color: #b22222;">cv2.putText(img, f"k = {k:.2f}", (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Parametric Animation"</span>, img<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   img = np.ones<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>width, height, 3<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span> * 255
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Incrementar el &#225;ngulo</span>
<span style="background-color: #f2f2f2;"> </span>   theta += theta_increment
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Reiniciar theta si alcanza su valor m&#225;ximo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;">#</span><span style="color: #b22222;">if theta &gt;= max_theta:</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;">#    </span><span style="color: #b22222;">theta = 0  # Reinicia la animaci&#243;n para que se repita</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Pausar para ver la animaci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> cv2.waitKey<span style="color: #707183;">(</span>30<span style="color: #707183;">)</span> &amp; 0xFF == 27:  <span style="color: #b22222;"># </span><span style="color: #b22222;">Esperar 30ms, salir con 'ESC'</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cerrar la ventana al finalizar</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org37fda17" class="outline-3">
<h3 id="org37fda17">Segmentación de color mediante el modelo de color HSV</h3>
<div class="outline-text-3" id="text-org37fda17">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv

<span style="color: #a0522d;">img</span> = cv.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'tr.png'</span>, 1<span style="color: #707183;">)</span>
<span style="color: #a0522d;">hsv</span> = cv.cvtColor<span style="color: #707183;">(</span>img, cv.COLOR_BGR2HSV<span style="color: #707183;">)</span>
<span style="color: #a0522d;">uba</span>=<span style="color: #707183;">(</span>10, 255, 255<span style="color: #707183;">)</span>
<span style="color: #a0522d;">ubb</span>=<span style="color: #707183;">(</span>0, 60 ,60<span style="color: #707183;">)</span>
<span style="color: #a0522d;">uba2</span>=<span style="color: #707183;">(</span>180, 255, 255<span style="color: #707183;">)</span>
<span style="color: #a0522d;">ubb2</span>=<span style="color: #707183;">(</span>172, 60,60<span style="color: #707183;">)</span>
<span style="color: #a0522d;">mask1</span> = cv.inRange<span style="color: #707183;">(</span>hsv, ubb, uba<span style="color: #707183;">)</span>
<span style="color: #a0522d;">mask2</span> = cv.inRange<span style="color: #707183;">(</span>hsv, ubb2, uba2<span style="color: #707183;">)</span>
<span style="color: #a0522d;">mask</span> = mask1+mask2
<span style="color: #a0522d;">res</span> = cv.bitwise_and<span style="color: #707183;">(</span>img, img, mask=mask<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'mask1'</span>, mask1<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'mask2'</span>, mask2<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'mask'</span>, mask<span style="color: #707183;">)</span>
cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'res'</span>, res<span style="color: #707183;">)</span>
cv.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a0522d;">cap</span> = cv.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
<span style="color: #a020f0;">while</span><span style="color: #707183;">(</span><span style="color: #008b8b;">True</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">img</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a0522d;">ret</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'video'</span>, img<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   hsv = cv.cvtColor<span style="color: #707183;">(</span>img, cv.COLOR_BGR2HSV<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">uba</span>=<span style="color: #707183;">(</span>90, 255, 255<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ubb</span>=<span style="color: #707183;">(</span>40, 40 ,40<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">mask</span> = cv.inRange<span style="color: #707183;">(</span>hsv, ubb, uba<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">res</span> = cv.bitwise_and<span style="color: #707183;">(</span>img, img, mask=mask<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'res'</span>, res<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'mask'</span>, mask<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   k =cv.waitKey<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span> &amp; 0xFF
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> k == 27 :
            <span style="color: #a020f0;">break</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">else</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>
cap.release<span style="color: #707183;">()</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</div>











<div id="outline-container-org4d1f3d2" class="outline-3">
<h3 id="org4d1f3d2">Capa de Harry Potter</h3>
<div class="outline-text-3" id="text-org4d1f3d2">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Captura de video desde la c&#225;mara</span>
<span style="color: #a0522d;">cap</span> = cv2.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Permitir que la c&#225;mara se estabilice</span>
cv2.waitKey<span style="color: #707183;">(</span>2000<span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Capturar el fondo durante unos segundos</span>
<span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">background</span> = cap.read<span style="color: #707183;">()</span>
<span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> <span style="color: #a0522d;">ret</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #483d8b;">print</span><span style="color: #707183;">(</span><span style="color: #8b2252;">"Error al capturar el fondo."</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   cap.release<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="color: #a020f0;">while</span> cap.isOpened<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">frame</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> <span style="color: #a0522d;">ret</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir el cuadro a espacio de color HSV</span>
<span style="background-color: #f2f2f2;"> </span>   hsv = cv2.cvtColor<span style="color: #707183;">(</span>frame, cv2.COLOR_BGR2HSV<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Definir el rango de color de la tela (verde, en este caso) en HSV</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">lower_green</span> = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>80, 40, 40<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">upper_green</span> = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>145, 255, 255<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una m&#225;scara que detecta el &#225;rea verde</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">mask</span> = cv2.inRange<span style="color: #707183;">(</span>hsv, lower_green, upper_green<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Refinar la m&#225;scara (puedes ajustar los par&#225;metros para mejorar la detecci&#243;n)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Invertir la m&#225;scara para obtener las &#225;reas que no son verdes</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">mask_inv</span> = cv2.bitwise_not<span style="color: #707183;">(</span>mask<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar la m&#225;scara a la imagen original para mostrar solo las partes no verdes</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">res1</span> = cv2.bitwise_and<span style="color: #707183;">(</span>frame, frame, mask=mask_inv<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar la m&#225;scara al fondo para cubrir las partes verdes</span>
<span style="background-color: #f2f2f2;"> </span>   res2 = cv2.bitwise_and<span style="color: #707183;">(</span>background, background, mask=mask<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Combinar ambas im&#225;genes</span>
<span style="background-color: #f2f2f2;"> </span>   final_output = cv2.addWeighted<span style="color: #707183;">(</span>res1, 1, res2, 1, 0<span style="color: #707183;">)</span> 

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar el resultado final</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Capa de Invisibilidad"</span>, final_output<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'mask'</span>, mask<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Presionar 'q' para salir</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> cv2.waitKey<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span> &amp; 0xFF == <span style="color: #483d8b;">ord</span><span style="color: #707183;">(</span><span style="color: #8b2252;">'q'</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Liberar los recursos</span>
cap.release<span style="color: #707183;">()</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>

</pre>
</div>
</div>
</div>


<div id="outline-container-org18bd2e4" class="outline-3">
<h3 id="org18bd2e4">Efecto Gris np.where</h3>
<div class="outline-text-3" id="text-org18bd2e4">
<p>
La función <b>np.where</b> de NumPy es muy útil cuando se quiere
seleccionar elementos de un arreglo o imagen basado en una
condición. Vamos a desglosar cómo funciona y cómo se aplica en el
contexto de imágenes.
</p>
</div>

<div id="outline-container-org4ee38c9" class="outline-4">
<h4 id="org4ee38c9">Sintaxis básica de np.where:</h4>
<div class="outline-text-4" id="text-org4ee38c9">
<div class="org-src-container">
<pre class="src src-python">np.where<span style="color: #707183;">(</span>condici&#243;n, valor_si_verdadero, valor_si_falso<span style="color: #707183;">)</span>
</pre>
</div>

<ul class="org-ul">
<li><b>condición</b>: Una expresión booleana (True/False) que indica qué elementos cumplen la condición.</li>
<li><b>valor<sub>si</sub><sub>verdadero</sub></b>: El valor que se asigna en las posiciones donde la condición es <b>True</b>.</li>
<li><b>valor<sub>si</sub><sub>falso</sub></b>: El valor que se asigna en las posiciones donde la condición es <b>False</b>.</li>
</ul>
</div>

<ul class="org-ul">
<li><a id="org561bec1"></a>Ejemplo sencillo:<br />
<div class="outline-text-5" id="text-org561bec1">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Creamos un array de ejemplo</span>
<span style="color: #a0522d;">array</span> = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>1, 2, 3, 4, 5<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicamos np.where para cambiar los valores mayores a 3 por 100 y el resto por 0</span>
<span style="color: #a0522d;">resultado</span> = np.where<span style="color: #707183;">(</span>array &gt; 3, 100, 0<span style="color: #707183;">)</span>

<span style="color: #483d8b;">print</span><span style="color: #707183;">(</span>resultado<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Resultado: [  0   0   0 100 100]</span>
</pre>
</div>

<p>
En este ejemplo, la condición `array &gt; 3` se cumple para los elementos 4 y 5, por lo que se cambian por 100, mientras que los otros elementos se cambian por 0.
</p>
</div>
</li>
</ul>
</div>

<div id="outline-container-org7356b5f" class="outline-4">
<h4 id="org7356b5f">Aplicación en procesamiento de imágenes:</h4>
<div class="outline-text-4" id="text-org7356b5f">
<p>
Cuando manipulamos imágenes, cada pixel tiene tres valores (R, G,
B). La idea es usar `np.where` para verificar si un pixel cumple con
la condición de estar en el rango del color que queremos resaltar (por
ejemplo, rojo). Si el pixel está dentro de ese rango, conservamos el
valor original del color. Si no, convertimos ese pixel a escala de
grises.
</p>
</div>

<ul class="org-ul">
<li><a id="org3d0b568"></a>Parte del código relevante:<br />
<div class="outline-text-5" id="text-org3d0b568">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a0522d;">imagen_colores_resaltados</span> = np.where<span style="color: #707183;">(</span>mascara_rojo<span style="color: #7388d6;">[</span>:, :, <span style="color: #008b8b;">None</span><span style="color: #7388d6;">]</span> == 255, imagen, imagen_gris_bgr<span style="color: #707183;">)</span>
</pre>
</div>
</div>
</li>

<li><a id="org70fed38"></a>Desglose:<br />
<div class="outline-text-5" id="text-org70fed38">
<ol class="org-ol">
<li><b>`mascara<sub>rojo</sub>[:, :, None] == 255`</b>:
<ul class="org-ul">
<li>La máscara es un arreglo 2D con los mismos altos y anchos que la
imagen original, donde los valores son 255 para los pixeles que
coinciden con el color rojo, y 0 para los que no.</li>
<li><b>`[:, :, None]`</b>: Añade una tercera dimensión para que la máscara
coincida con la estructura 3D de la imagen original, donde
tenemos tres canales (R, G, B).</li>
<li>La condición `== 255` selecciona los píxeles donde el color rojo fue detectado.</li>
</ul></li>

<li><b>`imagen`</b>:
<ul class="org-ul">
<li>Es la imagen original en color. Se utiliza en las posiciones
donde la máscara detecta el color rojo (condición `True`).</li>
</ul></li>

<li><b>`imagen<sub>gris</sub><sub>bgr</sub>`</b>:
<ul class="org-ul">
<li>Es la versión de la imagen en escala de grises, convertida a
formato BGR. Se usa en las posiciones donde la condición es
`False`, es decir, donde no se detectó el color rojo.</li>
</ul></li>
</ol>
</div>
</li>

<li><a id="orgd5d6b3b"></a>Ejemplo visual:<br />
<div class="outline-text-5" id="text-orgd5d6b3b">
<p>
Imagina que tienes un pixel con los siguientes valores RGB: `(255, 0,
0)` (un rojo intenso). Si este pixel cae dentro del rango de color
rojo, entonces `mascara<sub>rojo</sub>` tendrá el valor 255 para ese pixel. Esto
hará que `np.where` conserve el pixel original en color:
</p>

<ul class="org-ul">
<li><b>Condición True (rojo detectado):</b> Se conserva el pixel original.</li>
<li><b>Condición False (no es rojo):</b> El pixel se convierte a su equivalente en escala de grises.</li>
</ul>

<p>
****y el  Ejemplo simplificado:
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #b22222;"># </span><span style="color: #b22222;">Si la m&#225;scara es:</span>
mascara_rojo = <span style="color: #707183;">[</span><span style="color: #7388d6;">[</span>255, 0<span style="color: #7388d6;">]</span>, 
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #7388d6;">[</span>0, 255<span style="color: #7388d6;">]</span><span style="color: #707183;">]</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">La imagen original en color (simplificada):</span>
<span style="color: #a0522d;">imagen</span> = <span style="color: #707183;">[</span><span style="color: #7388d6;">[</span><span style="color: #909183;">[</span>255, 0, 0<span style="color: #909183;">]</span>, <span style="color: #909183;">[</span>0, 255, 0<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> <span style="color: #7388d6;">[</span><span style="color: #909183;">[</span>0, 0, 255<span style="color: #909183;">]</span>, <span style="color: #909183;">[</span>255, 0, 0<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span><span style="color: #707183;">]</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">La imagen en gris (tambi&#233;n simplificada):</span>
<span style="color: #a0522d;">imagen_gris_bgr</span> = <span style="color: #707183;">[</span><span style="color: #7388d6;">[</span><span style="color: #909183;">[</span>128, 128, 128<span style="color: #909183;">]</span>, <span style="color: #909183;">[</span>128, 128, 128<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>  <span style="color: #7388d6;">[</span><span style="color: #909183;">[</span>128, 128, 128<span style="color: #909183;">]</span>, <span style="color: #909183;">[</span>128, 128, 128<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span><span style="color: #707183;">]</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicando np.where:</span>
resultado = np.where<span style="color: #707183;">(</span>mascara_rojo<span style="color: #7388d6;">[</span>:, :, <span style="color: #008b8b;">None</span><span style="color: #7388d6;">]</span> == 255, imagen, imagen_gris_bgr<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Resultado esperado:</span>
resultado = <span style="color: #707183;">[</span><span style="color: #7388d6;">[</span><span style="color: #909183;">[</span>255, 0, 0<span style="color: #909183;">]</span>, <span style="color: #909183;">[</span>128, 128, 128<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span><span style="color: #7388d6;">[</span><span style="color: #909183;">[</span>128, 128, 128<span style="color: #909183;">]</span>, <span style="color: #909183;">[</span>255, 0, 0<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span><span style="color: #707183;">]</span>
</pre>
</div>

<p>
En el resultado, los pixeles que coinciden con el color rojo permanecen iguales, mientras que los otros se convierten a escala de grises.
</p>
</div>
</li>

<li><a id="org6108e2e"></a>¿Cómo funciona esto para toda la imagen?<br />
<div class="outline-text-5" id="text-org6108e2e">
<p>
`np.where` revisa cada pixel de la imagen:
</p>

<ul class="org-ul">
<li><b><b>Si un pixel es rojo (según la máscara),</b></b> lo toma de la imagen original.</li>
<li><b><b>Si un pixel no es rojo,</b></b> lo toma de la versión en escala de grises.</li>
</ul>



<ul class="org-ul">
<li><b>np.where</b> actúa como un filtro condicional que selecciona valores en base a una máscara booleana.</li>
<li>En este caso, se utiliza para dejar intactos los pixeles que coinciden con el color deseado (rojo) y convertir el resto de la imagen a escala de grises.</li>
</ul>



<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Leer la imagen en formato RGB</span>
<span style="color: #a0522d;">imagen</span> = cv2.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'man1.jpg'</span>, 1<span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir la imagen de RGB a HSV</span>
<span style="color: #a0522d;">imagen_hsv</span> = cv2.cvtColor<span style="color: #707183;">(</span>imagen, cv2.COLOR_BGR2HSV<span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir el rango de color rojo en HSV</span>
<span style="color: #a0522d;">bajo_rojo1</span> = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>0, 40, 40<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="color: #a0522d;">alto_rojo1</span> = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>10, 255, 255<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="color: #a0522d;">bajo_rojo2</span> = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>160, 40, 40<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="color: #a0522d;">alto_rojo2</span> = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>180, 255, 255<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una m&#225;scara para el color rojo</span>
<span style="color: #a0522d;">mascara_rojo1</span> = cv2.inRange<span style="color: #707183;">(</span>imagen_hsv, bajo_rojo1, alto_rojo1<span style="color: #707183;">)</span>
<span style="color: #a0522d;">mascara_rojo2</span> = cv2.inRange<span style="color: #707183;">(</span>imagen_hsv, bajo_rojo2, alto_rojo2<span style="color: #707183;">)</span>
<span style="color: #b22222;">#</span><span style="color: #b22222;">mascara_rojo = mascara_rojo1 + mascara_rojo2</span>
<span style="color: #a0522d;">mascara_rojo</span> = cv2.add<span style="color: #707183;">(</span>mascara_rojo1, mascara_rojo2<span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir la imagen original a escala de grises</span>
<span style="color: #a0522d;">imagen_gris</span> = cv2.cvtColor<span style="color: #707183;">(</span>imagen, cv2.COLOR_BGR2GRAY<span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir la imagen gris a un formato BGR para que coincida con la original</span>
<span style="color: #a0522d;">imagen_gris_bgr</span> = cv2.cvtColor<span style="color: #707183;">(</span>imagen_gris, cv2.COLOR_GRAY2BGR<span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Combinar la imagen en gris con las &#225;reas en rojo</span>
<span style="color: #a0522d;">resultado</span> = np.where<span style="color: #707183;">(</span>mascara_rojo<span style="color: #7388d6;">[</span>:, :, <span style="color: #008b8b;">None</span><span style="color: #7388d6;">]</span> == 255, imagen, imagen_gris_bgr<span style="color: #707183;">)</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen final</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Color resaltado'</span>, resultado<span style="color: #707183;">)</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'mascara_rojo'</span>, mascara_rojo<span style="color: #707183;">)</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'imagen'</span>, imagen<span style="color: #707183;">)</span>
cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'imagen_gris__bgr'</span>, imagen_gris_bgr<span style="color: #707183;">)</span>
cv2.waitKey<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>

</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a0522d;">cap</span> = cv.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>

<span style="color: #a020f0;">while</span><span style="color: #707183;">(</span><span style="color: #008b8b;">True</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">imagen</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a0522d;">ret</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'video'</span>, imagen<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   imagen_hsv = cv.cvtColor<span style="color: #707183;">(</span>imagen, cv.COLOR_BGR2HSV<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">bajo_azul1</span> = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>100, 40, 40<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">alto_azul1</span> = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>140, 255, 255<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> 
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una m&#225;scara para el color rojo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">mascara_azul1</span> = cv.inRange<span style="color: #707183;">(</span>imagen_hsv, bajo_azul1, alto_azul1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> 
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir la imagen original a escala de grises</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">imagen_gris</span> = cv.cvtColor<span style="color: #707183;">(</span>imagen, cv.COLOR_BGR2GRAY<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir la imagen gris a un formato BGR para que coincida con la original</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">imagen_gris_bgr</span> = cv.cvtColor<span style="color: #707183;">(</span>imagen_gris, cv.COLOR_GRAY2BGR<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Combinar la imagen en gris con las &#225;reas en rojo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">resultado</span> = np.where<span style="color: #707183;">(</span>mascara_azul1<span style="color: #7388d6;">[</span>:, :, <span style="color: #008b8b;">None</span><span style="color: #7388d6;">]</span> == 255, imagen, imagen_gris_bgr<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la imagen final</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Color resaltado'</span>, resultado<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   k =cv.waitKey<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span> &amp; 0xFF
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> k == 27 :
            <span style="color: #a020f0;">break</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">else</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>
<span style="background-color: #f2f2f2;"> </span>   
cap.release<span style="color: #707183;">()</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</li>
</ul>
</div>
</div>


<div id="outline-container-org85451b0" class="outline-3">
<h3 id="org85451b0">Flujo optico</h3>
<div class="outline-text-3" id="text-org85451b0">
<div class="org-src-container">
<pre class="src src-python">
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv

<span style="color: #b22222;"># </span><span style="color: #b22222;">Iniciar la captura de video desde la c&#225;mara</span>
<span style="color: #a0522d;">cap</span> = cv.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Par&#225;metros para el flujo &#243;ptico Lucas-Kanade</span>
<span style="color: #a0522d;">lk_params</span> = <span style="color: #483d8b;">dict</span><span style="color: #707183;">(</span>winSize=<span style="color: #7388d6;">(</span>15, 15<span style="color: #7388d6;">)</span>, maxLevel=2,
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>criteria=<span style="color: #7388d6;">(</span>cv.TERM_CRITERIA_EPS | cv.TERM_CRITERIA_COUNT, 10, 0.03<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Leer el primer frame de la c&#225;mara</span>
<span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">first_frame</span> = cap.read<span style="color: #707183;">()</span>
prev_gray = cv.cvtColor<span style="color: #707183;">(</span>first_frame, cv.COLOR_BGR2GRAY<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Posici&#243;n inicial de la pelotita (un &#250;nico punto en el centro de la imagen)</span>
ball_pos = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span><span style="color: #909183;">[</span>500, 500<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span>, dtype=np.float32<span style="color: #707183;">)</span>
ball_pos = ball_pos<span style="color: #707183;">[</span>:, np.newaxis, :<span style="color: #707183;">]</span>

<span style="color: #a020f0;">while</span> <span style="color: #008b8b;">True</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Capturar el siguiente frame</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">frame</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> ret:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">x</span>, <span style="color: #a0522d;">y</span> =frame.shape<span style="color: #707183;">[</span>:2<span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   frame= cv.flip<span style="color: #707183;">(</span>frame,1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir el frame a escala de grises</span>
<span style="background-color: #f2f2f2;"> </span>   gray_frame = cv.cvtColor<span style="color: #707183;">(</span>frame, cv.COLOR_BGR2GRAY<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Calcular el flujo &#243;ptico para mover la pelotita</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">new_ball_pos</span>, <span style="color: #a0522d;">st</span>, <span style="color: #a0522d;">err</span> = cv.calcOpticalFlowPyrLK<span style="color: #707183;">(</span>prev_gray, gray_frame, ball_pos, <span style="color: #008b8b;">None</span>, **lk_params<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Si se detecta el nuevo movimiento, actualizar la posici&#243;n de la pelotita</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> new_ball_pos <span style="color: #a020f0;">is</span> <span style="color: #a020f0;">not</span> <span style="color: #008b8b;">None</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   ball_pos = new_ball_pos

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar la pelotita en su nueva posici&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">a</span>, <span style="color: #a0522d;">b</span> = ball_pos.ravel<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   frame = cv.circle<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span><span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>a<span style="color: #909183;">)</span>, <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>b<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span>, 20, <span style="color: #7388d6;">(</span>0, 255, 0<span style="color: #7388d6;">)</span>, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;">#</span><span style="color: #b22222;">ball_pos = np.array([[500, 500]], dtype=np.float32)</span>

<span style="background-color: #f2f2f2;"> </span>   cv.rectangle<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span>20,20<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>y-20, x-20<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>234,43 ,34<span style="color: #7388d6;">)</span> ,5<span style="color: #707183;">)</span>    
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar solo una ventana con la pelotita en movimiento</span>
<span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Pelota en movimiento'</span>, frame<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Actualizar el frame anterior para el siguiente c&#225;lculo</span>
<span style="background-color: #f2f2f2;"> </span>   prev_gray = gray_frame.copy<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Presionar 'Esc' para salir</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> cv.waitKey<span style="color: #707183;">(</span>30<span style="color: #707183;">)</span> &amp; 0xFF == 27:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Liberar la captura y destruir todas las ventanas</span>
cap.release<span style="color: #707183;">()</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv

<span style="color: #b22222;"># </span><span style="color: #b22222;">Iniciar la captura de video desde la c&#225;mara</span>
<span style="color: #a0522d;">cap</span> = cv.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Par&#225;metros para el flujo &#243;ptico Lucas-Kanade</span>
<span style="color: #a0522d;">lk_params</span> = <span style="color: #483d8b;">dict</span><span style="color: #707183;">(</span>winSize=<span style="color: #7388d6;">(</span>15, 15<span style="color: #7388d6;">)</span>, maxLevel=2,
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>criteria=<span style="color: #7388d6;">(</span>cv.TERM_CRITERIA_EPS | cv.TERM_CRITERIA_COUNT, 10, 0.03<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Leer el primer frame de la c&#225;mara</span>
<span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">first_frame</span> = cap.read<span style="color: #707183;">()</span>
prev_gray = cv.cvtColor<span style="color: #707183;">(</span>first_frame, cv.COLOR_BGR2GRAY<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Posici&#243;n inicial de la pelotita (centro de la imagen)</span>
<span style="color: #a0522d;">h</span>, <span style="color: #a0522d;">w</span> = first_frame.shape<span style="color: #707183;">[</span>:2<span style="color: #707183;">]</span>
ball_pos = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span><span style="color: #909183;">[</span>w // 2, h // 2<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span>, dtype=np.float32<span style="color: #707183;">)</span>
ball_pos = ball_pos<span style="color: #707183;">[</span>:, np.newaxis, :<span style="color: #707183;">]</span>

<span style="color: #a020f0;">while</span> <span style="color: #008b8b;">True</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Capturar el siguiente frame</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">frame</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> ret:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Obtener dimensiones del frame</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">h</span>, <span style="color: #a0522d;">w</span> = frame.shape<span style="color: #707183;">[</span>:2<span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   frame = cv.flip<span style="color: #707183;">(</span>frame, 1<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Voltear la imagen horizontalmente</span>
<span style="background-color: #f2f2f2;"> </span>   gray_frame = cv.cvtColor<span style="color: #707183;">(</span>frame, cv.COLOR_BGR2GRAY<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Calcular el flujo &#243;ptico para mover la pelotita</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">new_ball_pos</span>, <span style="color: #a0522d;">st</span>, <span style="color: #a0522d;">err</span> = cv.calcOpticalFlowPyrLK<span style="color: #707183;">(</span>prev_gray, gray_frame, ball_pos, <span style="color: #008b8b;">None</span>, **lk_params<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Si se detecta el nuevo movimiento, actualizar la posici&#243;n de la pelotita</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> new_ball_pos <span style="color: #a020f0;">is</span> <span style="color: #a020f0;">not</span> <span style="color: #008b8b;">None</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">a</span>, <span style="color: #a0522d;">b</span> = new_ball_pos.ravel<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Evitar que la pelota salga de los l&#237;mites</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   a = <span style="color: #483d8b;">max</span><span style="color: #707183;">(</span>20, <span style="color: #483d8b;">min</span><span style="color: #7388d6;">(</span>a, w - 20<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   b = <span style="color: #483d8b;">max</span><span style="color: #707183;">(</span>20, <span style="color: #483d8b;">min</span><span style="color: #7388d6;">(</span>b, h - 20<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   ball_pos = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span><span style="color: #909183;">[</span>a, b<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span>, dtype=np.float32<span style="color: #707183;">)[</span>:, np.newaxis, :<span style="color: #707183;">]</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar la pelotita en su nueva posici&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">a</span>, <span style="color: #a0522d;">b</span> = ball_pos.ravel<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   frame = cv.circle<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span><span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>a<span style="color: #909183;">)</span>, <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>b<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span>, 20, <span style="color: #7388d6;">(</span>0, 255, 0<span style="color: #7388d6;">)</span>, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   cv.putText<span style="color: #707183;">(</span>frame, f<span style="color: #8b2252;">'(</span>{<span style="color: #483d8b;">int</span>(a)}<span style="color: #8b2252;">, </span>{<span style="color: #483d8b;">int</span>(b)}<span style="color: #8b2252;">)'</span>, <span style="color: #7388d6;">(</span><span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>a<span style="color: #909183;">)</span>, <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>b<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span>, cv.FONT_HERSHEY_SIMPLEX, 0.7, <span style="color: #7388d6;">(</span>0, 25, 235<span style="color: #7388d6;">)</span>, 2<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar un rect&#225;ngulo alrededor de la pantalla</span>
<span style="background-color: #f2f2f2;"> </span>   cv.rectangle<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span>20, 20<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>w - 20, h - 20<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>234, 43, 34<span style="color: #7388d6;">)</span>, 5<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar la ventana con la pelotita en movimiento</span>
<span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Pelota en movimiento'</span>, frame<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Actualizar el frame anterior para el siguiente c&#225;lculo</span>
<span style="background-color: #f2f2f2;"> </span>   prev_gray = gray_frame.copy<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Presionar 'Esc' para salir</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> cv.waitKey<span style="color: #707183;">(</span>30<span style="color: #707183;">)</span> &amp; 0xFF == 27:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Liberar la captura y destruir todas las ventanas</span>
cap.release<span style="color: #707183;">()</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>

</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np 
<span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv

<span style="color: #a0522d;">cap</span> = cv.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>


<span style="color: #a0522d;">lkparm</span> =<span style="color: #483d8b;">dict</span><span style="color: #707183;">(</span>winSize=<span style="color: #7388d6;">(</span>15,15<span style="color: #7388d6;">)</span>, maxLevel=2,
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>criteria=<span style="color: #7388d6;">(</span>cv.TERM_CRITERIA_EPS | cv.TERM_CRITERIA_COUNT, 10, 0.03<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span> 


<span style="color: #a0522d;">_</span>, <span style="color: #a0522d;">vframe</span> = cap.read<span style="color: #707183;">()</span>
vgris = cv.cvtColor<span style="color: #707183;">(</span>vframe, cv.COLOR_BGR2GRAY<span style="color: #707183;">)</span>
p0 = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span><span style="color: #909183;">(</span>100,100<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>200,100<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>300,100<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>400,100<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>500,100<span style="color: #909183;">)</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>  <span style="color: #909183;">(</span>100,200<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>200,200<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>300,200<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>400,200<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>500,200<span style="color: #909183;">)</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>  <span style="color: #909183;">(</span>100,300<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>200,300<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>300,300<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>400,300<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>500,300<span style="color: #909183;">)</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>  <span style="color: #909183;">(</span>100,400<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>200,400<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>300,400<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>400,400<span style="color: #909183;">)</span>, <span style="color: #909183;">(</span>500,400<span style="color: #909183;">)</span><span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>

p0 = np.float32<span style="color: #707183;">(</span>p0<span style="color: #7388d6;">[</span>:, np.newaxis, :<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>

mask = np.zeros_like<span style="color: #707183;">(</span>vframe<span style="color: #707183;">)</span> 
cad =<span style="color: #8b2252;">''</span>

<span style="color: #a020f0;">while</span> <span style="color: #008b8b;">True</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">_</span>, <span style="color: #a0522d;">frame</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   fgris = cv.cvtColor<span style="color: #707183;">(</span>frame, cv.COLOR_BGR2GRAY<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">p1</span>, <span style="color: #a0522d;">st</span>, <span style="color: #a0522d;">err</span> = cv.calcOpticalFlowPyrLK<span style="color: #707183;">(</span>vgris, fgris, p0, <span style="color: #008b8b;">None</span>, **lkparm<span style="color: #707183;">)</span> 
<span style="background-color: #f2f2f2;"> </span>   gridp = 5 
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> p1 <span style="color: #a020f0;">is</span> <span style="color: #008b8b;">None</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   vgris = cv.cvtColor<span style="color: #707183;">(</span>vframe, cv.COLOR_BGR2GRAY<span style="color: #707183;">)</span>
<span style="color: #b22222;">#        </span><span style="color: #b22222;">p0 = np.array([(100,100), (200,100), (300,100), (400,100) ])</span>
<span style="color: #b22222;">#        </span><span style="color: #b22222;">p0 = np.float32(p0[:, np.newaxis, :])</span>
<span style="color: #b22222;">#        </span><span style="color: #b22222;">mask = np.zeros_like(vframe)</span>
<span style="color: #b22222;">#        </span><span style="color: #b22222;">cv.imshow('ventana', frame)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">else</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   bp1 = p1<span style="color: #707183;">[</span>st ==1<span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   bp0 = p0<span style="color: #707183;">[</span>st ==1<span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> i, <span style="color: #707183;">(</span>nv, vj<span style="color: #707183;">)</span> <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">enumerate</span><span style="color: #707183;">(</span><span style="color: #483d8b;">zip</span><span style="color: #7388d6;">(</span>bp1, bp0<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">a</span>, <span style="color: #a0522d;">b</span> = <span style="color: #707183;">(</span><span style="color: #483d8b;">int</span><span style="color: #7388d6;">(</span>x<span style="color: #7388d6;">)</span> <span style="color: #a020f0;">for</span> x <span style="color: #a020f0;">in</span> nv.ravel<span style="color: #7388d6;">()</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">c</span>, <span style="color: #a0522d;">d</span> = <span style="color: #707183;">(</span><span style="color: #483d8b;">int</span><span style="color: #7388d6;">(</span>x<span style="color: #7388d6;">)</span> <span style="color: #a020f0;">for</span> x <span style="color: #a020f0;">in</span> vj.ravel<span style="color: #7388d6;">()</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   dist = np.linalg.norm<span style="color: #707183;">(</span>nv.ravel<span style="color: #7388d6;">()</span> - vj.ravel<span style="color: #7388d6;">()</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.circle<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span>c,d<span style="color: #7388d6;">)</span>, 5, <span style="color: #7388d6;">(</span>255,0,0<span style="color: #7388d6;">)</span>,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.circle<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span>a,b<span style="color: #7388d6;">)</span>, 3, <span style="color: #7388d6;">(</span>0,255,0<span style="color: #7388d6;">)</span>,-1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> i &gt; 0 <span style="color: #a020f0;">and</span> i % gridp != 0: 
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">prev_a</span>, <span style="color: #a0522d;">prev_b</span> = <span style="color: #707183;">(</span><span style="color: #483d8b;">int</span><span style="color: #7388d6;">(</span>x<span style="color: #7388d6;">)</span> <span style="color: #a020f0;">for</span> x <span style="color: #a020f0;">in</span> bp1<span style="color: #7388d6;">[</span>i - 1<span style="color: #7388d6;">]</span>.ravel<span style="color: #7388d6;">()</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.line<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span>a, b<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>prev_a, prev_b<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>0, 255, 0<span style="color: #7388d6;">)</span>, 1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> i &gt;= gridp:  
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">top_a</span>, <span style="color: #a0522d;">top_b</span> = <span style="color: #707183;">(</span><span style="color: #483d8b;">int</span><span style="color: #7388d6;">(</span>x<span style="color: #7388d6;">)</span> <span style="color: #a020f0;">for</span> x <span style="color: #a020f0;">in</span> bp1<span style="color: #7388d6;">[</span>i - gridp<span style="color: #7388d6;">]</span>.ravel<span style="color: #7388d6;">()</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.line<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span>a, b<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>top_a, top_b<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>0, 255, 0<span style="color: #7388d6;">)</span>, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'ventana'</span>, frame<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   vgris = fgris.copy<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span><span style="color: #707183;">(</span>cv.waitKey<span style="color: #7388d6;">(</span>1<span style="color: #7388d6;">)</span> &amp; 0xff<span style="color: #707183;">)</span> == 27:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

cap.release<span style="color: #707183;">()</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</div>


<div id="outline-container-org4fdd644" class="outline-3">
<h3 id="org4fdd644">Ejemplo de clasificación utilizando Haarcascades</h3>
<div class="outline-text-3" id="text-org4fdd644">
<ul class="org-ul">
<li><a href="https://github.com/opencv/opencv/tree/master/data/haarcascades">Clasificadores Haarcascades de la librería Opencv</a></li>
<li><a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_objdetect/py_face_detection/py_face_detection.html">Tutorial Haarcascades</a></li>
<li><a href="https://docs.opencv.org/2.4/doc/user_guide/ug_traincascade.html">Entrenamiento Haarcascades</a></li>
</ul>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv

<span style="color: #a0522d;">rostro</span> = cv.CascadeClassifier<span style="color: #707183;">(</span><span style="color: #8b2252;">'haarcascade_frontalface_alt2.xml'</span><span style="color: #707183;">)</span>
<span style="color: #a0522d;">cap</span> = cv.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>
<span style="color: #a0522d;">x</span>=<span style="color: #a0522d;">y</span>=<span style="color: #a0522d;">w</span>=<span style="color: #a0522d;">h</span>= 0 
<span style="color: #a0522d;">count</span> = 0
<span style="color: #a020f0;">while</span> <span style="color: #008b8b;">True</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">frame</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">gray</span> = cv.cvtColor<span style="color: #707183;">(</span>frame, cv.COLOR_BGR2GRAY<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">rostros</span> = rostro.detectMultiScale<span style="color: #707183;">(</span>gray, 1.3, 5<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span><span style="color: #707183;">(</span>x, y, w, h<span style="color: #707183;">)</span> <span style="color: #a020f0;">in</span> <span style="color: #a0522d;">rostros</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   m1 = <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>h/2<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">n1</span> = <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>w/2<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">frame</span> = cv.rectangle<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span>x,y<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>x+w, y+h<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>0, 255, 0<span style="color: #7388d6;">)</span>, 2<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">frame</span> = cv.circle<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span>x+n1,y+m1<span style="color: #7388d6;">)</span>, <span style="color: #483d8b;">int</span><span style="color: #7388d6;">(</span>w/2<span style="color: #7388d6;">)</span> , <span style="color: #7388d6;">(</span>255, 0 ,0<span style="color: #7388d6;">)</span>, 2 <span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;">#</span><span style="color: #b22222;">img = 180- frame[y:y+h,x:x+w]</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;">#</span><span style="color: #b22222;">count = count + 1   </span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;">#</span><span style="color: #b22222;">name = '/home/likcos/imgs/cara'+str(count)+'.jpg'</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;">#</span><span style="color: #b22222;">cv.imwrite(name, frame)</span>
<span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'rostros'</span>, frame<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;">#</span><span style="color: #b22222;">cv.imshow('cara', img)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">k</span> = cv.waitKey<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> k == 27:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>
cap.release<span style="color: #707183;">()</span>
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2 <span style="color: #a020f0;">as</span> cv 

<span style="color: #a0522d;">rostro</span> = cv.CascadeClassifier<span style="color: #707183;">(</span><span style="color: #8b2252;">'haarcascade_frontalface_alt.xml'</span><span style="color: #707183;">)</span>
<span style="color: #a0522d;">cap</span> = cv.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>

<span style="color: #a020f0;">while</span> <span style="color: #008b8b;">True</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">img</span> = cap.read<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">gris</span> = cv.cvtColor<span style="color: #707183;">(</span>img, cv.COLOR_BGR2GRAY<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">rostros</span> = rostro.detectMultiScale<span style="color: #707183;">(</span>gris, 1.3, 5<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span><span style="color: #707183;">(</span>x,y,w,h<span style="color: #707183;">)</span> <span style="color: #a020f0;">in</span> <span style="color: #a0522d;">rostros</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   res = <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>w+h<span style="color: #7388d6;">)</span>/8<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img</span> = cv.rectangle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>x,y<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>x+w, y+h<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>234, 23,23<span style="color: #7388d6;">)</span>, 5<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img</span> = cv.rectangle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>x,<span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>y+h/2<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>x+w, y+h<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>0,255,0<span style="color: #7388d6;">)</span>,5 <span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img</span> = cv.circle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>x + <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>w*0.3<span style="color: #909183;">)</span>, y + <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>h*0.4<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span> , 21, <span style="color: #7388d6;">(</span>0, 0, 0<span style="color: #7388d6;">)</span>, 2 <span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img</span> = cv.circle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>x + <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>w*0.7<span style="color: #909183;">)</span>, y + <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>h*0.4<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span> , 21, <span style="color: #7388d6;">(</span>0, 0, 0<span style="color: #7388d6;">)</span>, 2 <span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img</span> = cv.circle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>x + <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>w*0.3<span style="color: #909183;">)</span>, y + <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>h*0.4<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span> , 20, <span style="color: #7388d6;">(</span>255, 255, 255<span style="color: #7388d6;">)</span>, -1 <span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img</span> = cv.circle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>x + <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>w*0.7<span style="color: #909183;">)</span>, y + <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>h*0.4<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span> , 20, <span style="color: #7388d6;">(</span>255, 255, 255<span style="color: #7388d6;">)</span>, -1 <span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img</span> = cv.circle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>x + <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>w*0.3<span style="color: #909183;">)</span>, y + <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>h*0.4<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span> , 5, <span style="color: #7388d6;">(</span>0, 0, 255<span style="color: #7388d6;">)</span>, -1 <span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img</span> = cv.circle<span style="color: #707183;">(</span>img, <span style="color: #7388d6;">(</span>x + <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>w*0.7<span style="color: #909183;">)</span>, y + <span style="color: #483d8b;">int</span><span style="color: #909183;">(</span>h*0.4<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span> , 5, <span style="color: #7388d6;">(</span>0, 0, 255<span style="color: #7388d6;">)</span>, -1 <span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   cv.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'img'</span>, img<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> cv.waitKey<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span>== <span style="color: #483d8b;">ord</span><span style="color: #707183;">(</span><span style="color: #8b2252;">'q'</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>
<span style="background-color: #f2f2f2;"> </span>   
cap.release
cv.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar la m&#225;scara que deseas agregar (aseg&#250;rate de que sea PNG con transparencia)</span>
<span style="color: #a0522d;">mascara</span> = cv2.imread<span style="color: #707183;">(</span><span style="color: #8b2252;">'cubre3.png'</span>, cv2.IMREAD_UNCHANGED<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar PNG con transparencia</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Verificar si la imagen tiene un canal alfa</span>
<span style="color: #a020f0;">if</span> mascara.shape<span style="color: #707183;">[</span>2<span style="color: #707183;">]</span> != 4:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #483d8b;">print</span><span style="color: #707183;">(</span><span style="color: #8b2252;">"Error: La imagen no tiene canal alfa."</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar el clasificador preentrenado de rostros</span>
face_cascade = cv2.CascadeClassifier<span style="color: #707183;">(</span><span style="color: #8b2252;">'haarcascade_frontalface_alt2.xml'</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Capturar video desde la c&#225;mara</span>
<span style="color: #a0522d;">video</span> = cv2.VideoCapture<span style="color: #707183;">(</span>0<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Definir un desplazamiento para mover la m&#225;scara</span>
<span style="color: #a0522d;">desplazamiento_x</span> = -100  <span style="color: #b22222;"># </span><span style="color: #b22222;">Mover 50 p&#237;xeles hacia la derecha</span>
<span style="color: #a0522d;">desplazamiento_y</span> = 90  <span style="color: #b22222;"># </span><span style="color: #b22222;">Mover 30 p&#237;xeles hacia arriba</span>

<span style="color: #a020f0;">while</span> <span style="color: #008b8b;">True</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Leer cada frame del video</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ret</span>, <span style="color: #a0522d;">frame</span> = video.read<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> <span style="color: #a0522d;">ret</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir el frame a escala de grises</span>
<span style="background-color: #f2f2f2;"> </span>   frame_gris = cv2.cvtColor<span style="color: #707183;">(</span>frame, cv2.COLOR_BGR2GRAY<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Detectar los rostros en el frame</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">rostros</span> = face_cascade.detectMultiScale<span style="color: #707183;">(</span>frame_gris, scaleFactor=1.1, minNeighbors=5, minSize=<span style="color: #7388d6;">(</span>30, 30<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Procesar cada rostro detectado</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> <span style="color: #707183;">(</span>x, y, w, h<span style="color: #707183;">)</span> <span style="color: #a020f0;">in</span> rostros:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Redimensionar la m&#225;scara para que coincida con el tama&#241;o del rostro detectado</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   mascara_redimensionada = cv2.resize<span style="color: #707183;">(</span>mascara, <span style="color: #7388d6;">(</span>w, h<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv2.rectangle<span style="color: #707183;">(</span>frame, <span style="color: #7388d6;">(</span>x,y<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>x+w, y+h<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>255, 0,0<span style="color: #7388d6;">)</span>, 3<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Separar los canales de la m&#225;scara: color y alfa (transparencia)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   mascara_rgb = mascara_redimensionada<span style="color: #707183;">[</span>:, :, :3<span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   mascara_alpha = mascara_redimensionada<span style="color: #707183;">[</span>:, :, 3<span style="color: #707183;">]</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Asegurarse de que la m&#225;scara alfa sea de tipo uint8</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   mascara_alpha = cv2.convertScaleAbs<span style="color: #707183;">(</span>mascara_alpha<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Aplicar el desplazamiento a las coordenadas x e y</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   x_nuevo = x + desplazamiento_x
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   y_nuevo = y + desplazamiento_y

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Evitar que la m&#225;scara salga del borde de la imagen</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> x_nuevo &lt; 0: x_nuevo = 0
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> y_nuevo &lt; 0: y_nuevo = 0
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> x_nuevo + w &gt; frame.shape<span style="color: #707183;">[</span>1<span style="color: #707183;">]</span>: x_nuevo = frame.shape<span style="color: #707183;">[</span>1<span style="color: #707183;">]</span> - w
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> y_nuevo + h &gt; frame.shape<span style="color: #707183;">[</span>0<span style="color: #707183;">]</span>: y_nuevo = frame.shape<span style="color: #707183;">[</span>0<span style="color: #707183;">]</span> - h

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear una regi&#243;n de inter&#233;s (ROI) en el frame donde colocaremos la m&#225;scara</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   roi = frame<span style="color: #707183;">[</span>y_nuevo:y_nuevo+h, x_nuevo:x_nuevo+w<span style="color: #707183;">]</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Asegurarse de que la ROI y la m&#225;scara tengan el mismo tama&#241;o</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> roi.shape<span style="color: #707183;">[</span>:2<span style="color: #707183;">]</span> == mascara_alpha.shape<span style="color: #707183;">[</span>:2<span style="color: #707183;">]</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Invertir la m&#225;scara alfa para obtener la parte del rostro donde se aplicar&#225; la m&#225;scara</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   mascara_alpha_inv = cv2.bitwise_not<span style="color: #707183;">(</span>mascara_alpha<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Enmascarar la regi&#243;n del rostro en la imagen original</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   fondo = cv2.bitwise_and<span style="color: #707183;">(</span>roi, roi, mask=mascara_alpha_inv<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Enmascarar la m&#225;scara RGB</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   mascara_fg = cv2.bitwise_and<span style="color: #707183;">(</span>mascara_rgb, mascara_rgb, mask=mascara_alpha<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Combinar el fondo (parte del rostro sin m&#225;scara) y la parte con la m&#225;scara</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   resultado = cv2.add<span style="color: #707183;">(</span>fondo, mascara_fg<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Reemplazar la regi&#243;n del rostro con la imagen combinada</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   frame<span style="color: #707183;">[</span>y_nuevo:y_nuevo+h, x_nuevo:x_nuevo+w<span style="color: #707183;">]</span> = resultado

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">else</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #483d8b;">print</span><span style="color: #707183;">(</span><span style="color: #8b2252;">"Error: El tama&#241;o de la ROI no coincide con la m&#225;scara."</span><span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar el frame con la m&#225;scara aplicada</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">'Video con mascara'</span>, frame<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Presionar 'q' para salir del loop</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> cv2.waitKey<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span> &amp; 0xFF == <span style="color: #483d8b;">ord</span><span style="color: #707183;">(</span><span style="color: #8b2252;">'q'</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Liberar la captura de video y cerrar las ventanas</span>
video.release<span style="color: #707183;">()</span>
cv2.destroyAllWindows<span style="color: #707183;">()</span>

</pre>
</div>
</div>
</div>


<div id="outline-container-org9849e62" class="outline-3">
<h3 id="org9849e62">OpenGL</h3>
</div>



<div id="outline-container-org0aeca90" class="outline-3">
<h3 id="org0aeca90">Descripción de la Proyección Isométrica</h3>
<div class="outline-text-3" id="text-org0aeca90">
<p>
La proyección isométrica es un tipo de proyección axonométrica que
representa un objeto 3D en un espacio 2D sin perspectiva. Esto
significa que las líneas paralelas en el espacio 3D siguen siendo
paralelas en la proyección 2D, y los objetos mantienen la misma escala
independientemente de su distancia. En una proyección isométrica, los
tres ejes (x, y, z) aparecen con ángulos de 120° entre sí, creando un
efecto visual que se percibe como 3D, aunque solo se trata de una
imagen 2D.
</p>

<p>
Este tipo de proyección es útil en videojuegos, gráficos isométricos y
aplicaciones de diseño, ya que proporciona una representación en 3D
simple sin distorsión de perspectiva.
</p>
</div>


<div id="outline-container-org4793504" class="outline-4">
<h4 id="org4793504">Ejemplo de Proyección Isométrica en OpenCV</h4>
<div class="outline-text-4" id="text-org4793504">
<p>
Este ejemplo en OpenCV muestra cómo proyectar un cubo 3D en 2D
utilizando una proyección isométrica. Cada vértice del cubo se
proyecta en el plano 2D, y luego se conecta para formar las aristas
del cubo.
</p>
</div>

<ul class="org-ul">
<li><a id="org97c4bd4"></a>Código en Python<br />
<div class="outline-text-5" id="text-org97c4bd4">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> cv2
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a020f0;">import</span> math

<span style="color: #b22222;"># </span><span style="color: #b22222;">Dimensiones de la ventana</span>
<span style="color: #a0522d;">WIDTH</span>, <span style="color: #a0522d;">HEIGHT</span> = 800, 600

<span style="color: #b22222;"># </span><span style="color: #b22222;">V&#233;rtices del cubo en coordenadas 3D</span>
<span style="color: #a0522d;">vertices</span> = np.array<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #909183;">[</span>-1, -1, -1<span style="color: #909183;">]</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #909183;">[</span>1, -1, -1<span style="color: #909183;">]</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #909183;">[</span>1, 1, -1<span style="color: #909183;">]</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #909183;">[</span>-1, 1, -1<span style="color: #909183;">]</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #909183;">[</span>-1, -1, 1<span style="color: #909183;">]</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #909183;">[</span>1, -1, 1<span style="color: #909183;">]</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #909183;">[</span>1, 1, 1<span style="color: #909183;">]</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #909183;">[</span>-1, 1, 1<span style="color: #909183;">]</span>
<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Conexiones de los v&#233;rtices para formar las aristas del cubo</span>
<span style="color: #a0522d;">edges</span> = <span style="color: #707183;">[</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #7388d6;">(</span>0, 1<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>1, 2<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>2, 3<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>3, 0<span style="color: #7388d6;">)</span>,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Base inferior</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #7388d6;">(</span>4, 5<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>5, 6<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>6, 7<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>7, 4<span style="color: #7388d6;">)</span>,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Base superior</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #7388d6;">(</span>0, 4<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>1, 5<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>2, 6<span style="color: #7388d6;">)</span>, <span style="color: #7388d6;">(</span>3, 7<span style="color: #7388d6;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Conexiones entre bases</span>
<span style="color: #707183;">]</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">project_isometric</span><span style="color: #707183;">(</span>vertex<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Funci&#243;n para proyectar un punto 3D a 2D con proyecci&#243;n isom&#233;trica"""</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">x</span>, <span style="color: #a0522d;">y</span>, <span style="color: #a0522d;">z</span> = vertex
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">x2D</span> = x - z
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">y2D</span> = <span style="color: #707183;">(</span>x + 2 * y + z<span style="color: #707183;">)</span> / 2
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>x2D * 100 + WIDTH / 2<span style="color: #707183;">)</span>, <span style="color: #483d8b;">int</span><span style="color: #707183;">(</span>-y2D * 100 + HEIGHT / 2<span style="color: #707183;">)</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Crear ventana</span>
cv2.namedWindow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Cubo Isom&#233;trico"</span><span style="color: #707183;">)</span>

<span style="color: #a020f0;">while</span> <span style="color: #008b8b;">True</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear imagen negra para el fondo</span>
<span style="background-color: #f2f2f2;"> </span>   frame = np.zeros<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>HEIGHT, WIDTH, 3<span style="color: #7388d6;">)</span>, dtype=np.uint8<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar aristas del cubo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> edge <span style="color: #a020f0;">in</span> edges:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   pt1 = project_isometric<span style="color: #707183;">(</span>vertices<span style="color: #7388d6;">[</span>edge<span style="color: #909183;">[</span>0<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   pt2 = project_isometric<span style="color: #707183;">(</span>vertices<span style="color: #7388d6;">[</span>edge<span style="color: #909183;">[</span>1<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   cv2.line<span style="color: #707183;">(</span>frame, pt1, pt2, <span style="color: #7388d6;">(</span>255, 255, 255<span style="color: #7388d6;">)</span>, 2<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Mostrar imagen</span>
<span style="background-color: #f2f2f2;"> </span>   cv2.imshow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Cubo Isom&#233;trico"</span>, frame<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Salir si se presiona 'q'</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> cv2.waitKey<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span> &amp; 0xFF == <span style="color: #483d8b;">ord</span><span style="color: #707183;">(</span><span style="color: #8b2252;">'q'</span><span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">break</span>

cv2.destroyAllWindows<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</li>

<li><a id="org2acda33"></a>Explicación del Código<br />
<div class="outline-text-5" id="text-org2acda33">
<ol class="org-ol">
<li><b><b>Definición de Vértices y Aristas</b></b>:
<ul class="org-ul">
<li>`vertices` define los puntos 3D del cubo en coordenadas `(x, y, z)`.</li>
<li>`edges` define las conexiones entre los vértices para formar las aristas del cubo.</li>
</ul></li>

<li><b><b>Función `project<sub>isometric</sub>`</b></b>:
<ul class="org-ul">
<li>Convierte cada vértice 3D en coordenadas 2D usando una proyección isométrica. La fórmula aplicada crea un efecto 3D sin perspectiva.</li>
</ul></li>

<li><b><b>Bucle de Renderizado</b></b>:
<ul class="org-ul">
<li>Cada fotograma crea una imagen de fondo negro (`frame`) y dibuja las aristas del cubo conectando los puntos proyectados en 2D.</li>
<li>El bucle continúa hasta que se presiona la tecla `'q'`.</li>
</ul></li>
</ol>
</div>
</li>

<li><a id="org5a86581"></a>Salida Esperada<br />
<div class="outline-text-5" id="text-org5a86581">
<p>
La ventana mostrará un cubo en perspectiva isométrica. Las aristas se
dibujan en blanco y el cubo parece tener profundidad, aunque es solo
una representación en 2D.
</p>

<p>
Este ejemplo simula un efecto 3D mediante una proyección isométrica,
útil para aplicaciones de diseño y gráficos 2D en OpenCV.
</p>
</div>
</li>
</ul>
</div>
</div>


<div id="outline-container-orge432357" class="outline-3">
<h3 id="orge432357">Opengl Ejemplo</h3>
<div class="outline-text-3" id="text-orge432357">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> glClear, glClearColor, glBegin, GL_QUADS, glEnd, glVertex2f, glColor3f, GL_COLOR_BUFFER_BIT, GL_TRIANGLES

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear la ventana</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">window</span> = glfw.create_window<span style="color: #707183;">(</span>500, 500, <span style="color: #8b2252;">"OpenGL con GLFW"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Hacer el contexto de OpenGL actual</span>
<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Establecer el color de fondo</span>
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.0, 0.0, 0.0, 1.0<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal de renderizado</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Limpiar la pantalla</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar un tri&#225;ngulo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_TRIANGLES<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 0.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rojo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glVertex2f<span style="color: #707183;">(</span>-0.5,  -0.5<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">V&#233;rtice superior izquierdo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.0, 1.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rojo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.0, 1.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rojo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glVertex2f<span style="color: #707183;">(</span> 0.5,  -0.5<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">V&#233;rtice superior derecho</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.0, 0.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rojo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glVertex2f<span style="color: #707183;">(</span> -0.5, 0.5<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">V&#233;rtice inferior derecho</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Intercambiar buffers y procesar eventos</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Terminar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>

</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> glClear, glClearColor, glBegin, glEnd, glVertex2f, glColor3f, GL_COLOR_BUFFER_BIT, GL_QUADS, glOrtho

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_square</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUADS<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 0.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color rojo</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex2f<span style="color: #707183;">(</span>-0.5,  0.5<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">V&#233;rtice superior izquierdo</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex2f<span style="color: #707183;">(</span> 0.5,  0.5<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">V&#233;rtice superior derecho</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex2f<span style="color: #707183;">(</span> 0.5, -0.5<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">V&#233;rtice inferior derecho</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex2f<span style="color: #707183;">(</span>-0.5, -0.5<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">V&#233;rtice inferior izquierdo</span>
<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear la ventana con un contexto de OpenGL</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">window</span> = glfw.create_window<span style="color: #707183;">(</span>500, 500, <span style="color: #8b2252;">"Cuadrado con GLFW"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Hacer que el contexto de OpenGL sea actual para la ventana</span>
<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configurar la proyecci&#243;n ortogr&#225;fica</span>
<span style="background-color: #f2f2f2;"> </span>   glOrtho<span style="color: #707183;">(</span>-1, 1, -1, 1, -1, 1<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n para un sistema de coordenadas 2D</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Limpiar el buffer de color</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar el cuadrado</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_square<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Intercambiar buffers y procesar eventos</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Terminar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>


</pre>
</div>
</div>
</div>
</div>


<div id="outline-container-org8e86612" class="outline-2">
<h2 id="org8e86612">Introducción a OpenGL</h2>
<div class="outline-text-2" id="text-org8e86612">
<p>
OpenGL (Open Graphics Library) es una API de gráficos que permite a
los desarrolladores crear gráficos en 2D y 3D. Fue desarrollada por
Silicon Graphics en 1992 y, desde entonces, se ha utilizado
ampliamente en aplicaciones que requieren renderizado en tiempo real,
como videojuegos, simulaciones científicas, visualización de datos y
entornos de realidad virtual y aumentada.
</p>
</div>

<div id="outline-container-org18df048" class="outline-3">
<h3 id="org18df048">Características de OpenGL</h3>
<div class="outline-text-3" id="text-org18df048">
<ul class="org-ul">
<li><b><b>Plataforma abierta</b></b>: OpenGL es multiplataforma y funciona en
Windows, macOS, y Linux.</li>
<li><b><b>API de bajo nivel</b></b>: Proporciona primitivas de gráficos básicas
(puntos, líneas, polígonos).</li>
<li><b><b>Hardware acelerado</b></b>: Aprovecha la GPU para acelerar el
renderizado.</li>
<li><b><b>Flexibilidad</b></b>: Es compatible con diversas aplicaciones, desde
gráficos simples en 2D hasta gráficos avanzados en 3D.</li>
</ul>
</div>
</div>

<div id="outline-container-orgc2acf93" class="outline-3">
<h3 id="orgc2acf93">Primeros pasos en OpenGL</h3>
<div class="outline-text-3" id="text-orgc2acf93">
<p>
Para empezar a trabajar con OpenGL, necesitas entender algunos de sus
conceptos y configuraciones básicas.
</p>
</div>

<div id="outline-container-org6a7fa54" class="outline-4">
<h4 id="org6a7fa54">Configuración del Entorno</h4>
<div class="outline-text-4" id="text-org6a7fa54">
<p>
Para utilizar OpenGL en Python, necesitas instalar las siguientes
bibliotecas:
</p>
<div class="org-src-container">
<pre class="src src-shell">  pip install PyOpenGL PyOpenGL_accelerate glfw pygames
  pip install PyOpenGL glfw
</pre>
</div>
</div>
</div>

<div id="outline-container-org8a21921" class="outline-4">
<h4 id="org8a21921">Estructura básica de un programa OpenGL</h4>
<div class="outline-text-4" id="text-org8a21921">
<p>
Un programa básico de OpenGL tiene una estructura general que incluye
la configuración de la ventana, la inicialización del contexto de
OpenGL, el renderizado de objetos y el bucle principal.
</p>
</div>
</div>
</div>

<div id="outline-container-org574bd20" class="outline-3">
<h3 id="org574bd20">Sistema de Coordenadas en OpenGL</h3>
<div class="outline-text-3" id="text-org574bd20">
<p>
En OpenGL, las coordenadas pasan por una serie de transformaciones
para dibujar objetos en pantalla. Aquí están los principales sistemas
de coordenadas:
</p>
</div>

<div id="outline-container-org45769de" class="outline-4">
<h4 id="org45769de">Coordenadas del Objeto</h4>
<div class="outline-text-4" id="text-org45769de">
<p>
Este es el espacio de coordenadas local de cada objeto. Aquí
defines los vértices en relación con el centro del objeto.
</p>
</div>
</div>

<div id="outline-container-org5d0bdc6" class="outline-4">
<h4 id="org5d0bdc6">Coordenadas del Mundo</h4>
<div class="outline-text-4" id="text-org5d0bdc6">
<p>
Transforman las coordenadas del objeto para situarlo en el mundo virtual.
</p>
</div>
</div>

<div id="outline-container-orgc0026a9" class="outline-4">
<h4 id="orgc0026a9">Coordenadas de Vista</h4>
<div class="outline-text-4" id="text-orgc0026a9">
<p>
Ajustan la posición del objeto en relación con la cámara u observador.
</p>
</div>
</div>

<div id="outline-container-org265e574" class="outline-4">
<h4 id="org265e574">Coordenadas de Recorte</h4>
<div class="outline-text-4" id="text-org265e574">
<p>
Aplican la proyección para determinar qué partes del objeto son
visibles y cuáles están fuera del campo de visión.
</p>
</div>
</div>

<div id="outline-container-org495435b" class="outline-4">
<h4 id="org495435b">Coordenadas Normalizadas del Dispositivo (NDC)</h4>
<div class="outline-text-4" id="text-org495435b">
<p>
Las coordenadas se normalizan al rango [-1, 1] en cada eje, para
definir la porción visible de la escena.
</p>
</div>
</div>

<div id="outline-container-org63cc1e7" class="outline-4">
<h4 id="org63cc1e7">Coordenadas de Pantalla</h4>
<div class="outline-text-4" id="text-org63cc1e7">
<p>
Las coordenadas normalizadas se mapean a píxeles en la pantalla
según la resolución de la ventana.
</p>
</div>
</div>
</div>

<div id="outline-container-org916312a" class="outline-3">
<h3 id="org916312a">Primitivas de Dibujo en OpenGL</h3>
<div class="outline-text-3" id="text-org916312a">
<p>
OpenGL permite dibujar figuras básicas conocidas como primitivas,
entre las que se incluyen:
</p>

<ul class="org-ul">
<li><b><b>GL<sub>POINTS</sub></b></b>: Puntos individuales.</li>
<li><b><b>GL<sub>LINES</sub></b></b>: Líneas entre pares de vértices.</li>
<li><b><b>GL<sub>TRIANGLES</sub></b></b>: Triángulos entre grupos de tres vértices.</li>
<li><b><b>GL<sub>QUADS</sub></b></b>: Cuadrados entre grupos de cuatro vértices (obsoleto en OpenGL moderno).</li>
</ul>

<p>
Ejemplo de uso de <b><b>GL<sub>TRIANGLES</sub></b></b> para dibujar un triángulo:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="background-color: #f2f2f2;"> </span> <span style="color: #a020f0;">import</span> glfw
<span style="background-color: #f2f2f2;"> </span> <span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="background-color: #f2f2f2;"> </span> <span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> *

<span style="background-color: #f2f2f2;"> </span> <span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_triangle</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> glBegin<span style="color: #707183;">(</span>GL_TRIANGLES<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> glColor3f<span style="color: #707183;">(</span>1.0, 0.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rojo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> glVertex2f<span style="color: #707183;">(</span>-0.5, -0.5<span style="color: #707183;">)</span>    <span style="color: #b22222;"># </span><span style="color: #b22222;">V&#233;rtice inferior izquierdo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> glColor3f<span style="color: #707183;">(</span>0.0, 1.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Verde</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> glVertex2f<span style="color: #707183;">(</span>0.5, -0.5<span style="color: #707183;">)</span>     <span style="color: #b22222;"># </span><span style="color: #b22222;">V&#233;rtice inferior derecho</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> glColor3f<span style="color: #707183;">(</span>0.0, 0.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Azul</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> glVertex2f<span style="color: #707183;">(</span>0.0, 0.5<span style="color: #707183;">)</span>      <span style="color: #b22222;"># </span><span style="color: #b22222;">V&#233;rtice superior</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> glEnd<span style="color: #707183;">()</span>
</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> glClearColor, glEnable, glClear, glLoadIdentity, glTranslatef, glRotatef, glMatrixMode
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> glBegin, glColor3f, glVertex3f, glEnd, glFlush, glViewport
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, GL_DEPTH_TEST, GL_QUADS, GL_PROJECTION, GL_MODELVIEW
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> gluPerspective
<span style="color: #a020f0;">import</span> sys

<span style="color: #b22222;"># </span><span style="color: #b22222;">Variables globales</span>
<span style="color: #a0522d;">window</span> = <span style="color: #008b8b;">None</span>
<span style="color: #a0522d;">angle</span> = 0  <span style="color: #b22222;"># </span><span style="color: #b22222;">Declaramos angle en el nivel superior</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n inicial de OpenGL</span>
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.0, 0.0, 0.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color de fondo</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar prueba de profundidad para 3D</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de proyecci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>45, 1.0, 0.1, 50.0<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Cambiar a la matriz de modelo para los objetos</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_cube</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> angle
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Limpiar pantalla y buffer de profundidad</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la vista del cubo</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, 0.0, -5<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Alejar el cubo para que sea visible</span>
<span style="background-color: #f2f2f2;"> </span>   glRotatef<span style="color: #707183;">(</span>angle, 0, 0,1<span style="color: #707183;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Rotar el cubo en todos los ejes</span>

<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUADS<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Iniciar el cubo como un conjunto de caras (quads)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Cada conjunto de cuatro v&#233;rtices representa una cara del cubo</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 0.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rojo</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1, 1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1, 1, 1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.0, 1.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Verde</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1,-1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1,-1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1,-1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1,-1,-1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.0, 0.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Azul</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1,-1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1,-1, 1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 1.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Amarillo</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1,-1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1,-1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1, 1,-1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 0.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Magenta</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1,-1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1,-1, 1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.0, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Cyan</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1, 1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1,-1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1,-1,-1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glFlush<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Intercambiar buffers para animaci&#243;n suave</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">angle</span> += 1  <span style="color: #b22222;"># </span><span style="color: #b22222;">Incrementar el &#225;ngulo para rotaci&#243;n</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear ventana de GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">width</span>, <span style="color: #a0522d;">height</span> = 500, 500
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">window</span> = glfw.create_window<span style="color: #707183;">(</span>width, height, <span style="color: #8b2252;">"Cubo 3D Rotando con GLFW"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configurar el contexto de OpenGL en la ventana</span>
<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de viewport y OpenGL</span>
<span style="background-color: #f2f2f2;"> </span>   glViewport<span style="color: #707183;">(</span>0, 0, width, height<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_cube<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Cerrar GLFW al salir</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>

</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> glClearColor, glEnable, glClear, glLoadIdentity, glTranslatef, glRotatef, glMatrixMode
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> glBegin, glColor3f, glVertex3f, glEnd, glFlush, glViewport
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, GL_DEPTH_TEST, GL_QUADS, GL_PROJECTION, GL_MODELVIEW
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> gluPerspective
<span style="color: #a020f0;">import</span> sys

<span style="color: #b22222;"># </span><span style="color: #b22222;">Variables globales</span>
<span style="color: #a0522d;">window</span> = <span style="color: #008b8b;">None</span>
<span style="color: #a0522d;">angle_x</span>, <span style="color: #a0522d;">angle_y</span> = 0, 0  <span style="color: #b22222;"># </span><span style="color: #b22222;">&#193;ngulos de rotaci&#243;n en los ejes X e Y</span>
<span style="color: #a0522d;">last_x</span>, <span style="color: #a0522d;">last_y</span> = <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">&#218;ltima posici&#243;n del rat&#243;n para calcular la diferencia</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n inicial de OpenGL</span>
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.0, 0.0, 0.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color de fondo</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar prueba de profundidad para 3D</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de proyecci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>45, 1.0, 0.1, 50.0<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Cambiar a la matriz de modelo para los objetos</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_cube</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> angle_x, angle_y
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Limpiar pantalla y buffer de profundidad</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la vista del cubo</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, 0.0, -5<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Alejar el cubo para que sea visible</span>
<span style="background-color: #f2f2f2;"> </span>   glRotatef<span style="color: #707183;">(</span>angle_x, 1, 0, 0<span style="color: #707183;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Rotar el cubo en el eje X</span>
<span style="background-color: #f2f2f2;"> </span>   glRotatef<span style="color: #707183;">(</span>angle_y, 0, 1, 0<span style="color: #707183;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Rotar el cubo en el eje Y</span>

<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUADS<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Iniciar el cubo como un conjunto de caras (quads)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Cada conjunto de cuatro v&#233;rtices representa una cara del cubo</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 0.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rojo</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1, 1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1, 1, 1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.0, 1.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Verde</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1,-1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1,-1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1,-1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1,-1,-1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.0, 0.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Azul</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1,-1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1,-1, 1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 1.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Amarillo</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1,-1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1,-1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1, 1,-1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 0.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Magenta</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1,-1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1,-1, 1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.0, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Cyan</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1, 1,-1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1,-1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span> 1,-1,-1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glFlush<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Intercambiar buffers para animaci&#243;n suave</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">mouse_callback</span><span style="color: #707183;">(</span>window, xpos, ypos<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> angle_x, angle_y, last_x, last_y

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Si es la primera vez que movemos el rat&#243;n, inicializamos last_x y last_y</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> last_x <span style="color: #a020f0;">is</span> <span style="color: #008b8b;">None</span> <span style="color: #a020f0;">or</span> last_y <span style="color: #a020f0;">is</span> <span style="color: #008b8b;">None</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">last_x</span>, <span style="color: #a0522d;">last_y</span> = xpos, ypos

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Calcular las diferencias en el movimiento del rat&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">dx</span> = xpos - last_x
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">dy</span> = ypos - last_y

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Ajustar los &#225;ngulos de rotaci&#243;n en funci&#243;n del movimiento del rat&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">angle_x</span> += dy * 0.1  <span style="color: #b22222;"># </span><span style="color: #b22222;">El factor 0.1 ajusta la sensibilidad</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">angle_y</span> += dx * 0.1

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Actualizar las posiciones anteriores del rat&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">last_x</span>, <span style="color: #a0522d;">last_y</span> = xpos, ypos

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear ventana de GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">width</span>, <span style="color: #a0522d;">height</span> = 500, 500
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">window</span> = glfw.create_window<span style="color: #707183;">(</span>width, height, <span style="color: #8b2252;">"Cubo 3D Controlado por Rat&#243;n"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configurar el contexto de OpenGL en la ventana</span>
<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glViewport<span style="color: #707183;">(</span>0, 0, width, height<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configurar el callback de rat&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   glfw.set_cursor_pos_callback<span style="color: #707183;">(</span>window, mouse_callback<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_cube<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Cerrar GLFW al salir</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>


</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> gluPerspective
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a020f0;">import</span> sys

<span style="color: #b22222;"># </span><span style="color: #b22222;">Variables globales para el &#225;ngulo de rotaci&#243;n</span>
<span style="color: #a0522d;">window</span> = <span style="color: #008b8b;">None</span>
<span style="color: #a0522d;">angle_x</span>, <span style="color: #a0522d;">angle_y</span> = 0.0, 0.0  <span style="color: #b22222;"># </span><span style="color: #b22222;">&#193;ngulos de rotaci&#243;n en los ejes X e Y</span>
<span style="color: #a0522d;">last_x</span>, <span style="color: #a0522d;">last_y</span> = <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">&#218;ltima posici&#243;n del rat&#243;n para calcular la diferencia</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Par&#225;metros del toroide</span>
<span style="color: #a0522d;">R</span> = 1.0  <span style="color: #b22222;"># </span><span style="color: #b22222;">Radio mayor (distancia del centro del tubo al centro del toroide)</span>
<span style="color: #a0522d;">r</span> = 0.4  <span style="color: #b22222;"># </span><span style="color: #b22222;">Radio menor (radio del tubo)</span>
<span style="color: #a0522d;">num_major</span> = 30  <span style="color: #b22222;"># </span><span style="color: #b22222;">Segmentos en el c&#237;rculo mayor</span>
<span style="color: #a0522d;">num_minor</span> = 15  <span style="color: #b22222;"># </span><span style="color: #b22222;">Segmentos en el c&#237;rculo menor</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n inicial de OpenGL</span>
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.0, 0.0, 0.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color de fondo</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar prueba de profundidad para 3D</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de proyecci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>45, 1.0, 0.1, 50.0<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Cambiar a la matriz de modelo para los objetos</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_torus</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> angle_x, angle_y
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Limpiar pantalla y buffer de profundidad</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la vista del toroide</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, 0.0, -5<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Alejar el toroide para que sea visible</span>
<span style="background-color: #f2f2f2;"> </span>   glRotatef<span style="color: #707183;">(</span>angle_x, 1, 0, 0<span style="color: #707183;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Rotar el toroide en el eje X</span>
<span style="background-color: #f2f2f2;"> </span>   glRotatef<span style="color: #707183;">(</span>angle_y, 0, 1, 0<span style="color: #707183;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Rotar el toroide en el eje Y</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar el toroide utilizando segmentos</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>num_major<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">theta</span> = 2 * np.pi * i / num_major
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">next_theta</span> = 2 * np.pi * <span style="color: #707183;">(</span>i + 1<span style="color: #707183;">)</span> / num_major

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUAD_STRIP<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> j <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>num_minor + 1<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">phi</span> = 2 * np.pi * j / num_minor
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">cos_theta</span>, <span style="color: #a0522d;">sin_theta</span> = np.cos<span style="color: #707183;">(</span>theta<span style="color: #707183;">)</span>, np.sin<span style="color: #707183;">(</span>theta<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">cos_next_theta</span>, <span style="color: #a0522d;">sin_next_theta</span> = np.cos<span style="color: #707183;">(</span>next_theta<span style="color: #707183;">)</span>, np.sin<span style="color: #707183;">(</span>next_theta<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">cos_phi</span>, <span style="color: #a0522d;">sin_phi</span> = np.cos<span style="color: #707183;">(</span>phi<span style="color: #707183;">)</span>, np.sin<span style="color: #707183;">(</span>phi<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Color din&#225;mico para variaci&#243;n visual</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span><span style="color: #7388d6;">(</span>i % 2<span style="color: #7388d6;">)</span> * 0.5 + 0.5, <span style="color: #7388d6;">(</span>j % 2<span style="color: #7388d6;">)</span> * 0.5 + 0.5, 0.5<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Primera esquina</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">x</span> = <span style="color: #707183;">(</span>R + r * cos_phi<span style="color: #707183;">)</span> * cos_theta
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">y</span> = r * sin_phi
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">z</span> = <span style="color: #707183;">(</span>R + r * cos_phi<span style="color: #707183;">)</span> * sin_theta
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>x, y, z<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Segunda esquina</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">x</span> = <span style="color: #707183;">(</span>R + r * cos_phi<span style="color: #707183;">)</span> * cos_next_theta
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">z</span> = <span style="color: #707183;">(</span>R + r * cos_phi<span style="color: #707183;">)</span> * sin_next_theta
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>x, y, z<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Intercambiar buffers para animaci&#243;n suave</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">mouse_callback</span><span style="color: #707183;">(</span>window, xpos, ypos<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> angle_x, angle_y, last_x, last_y

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Si es la primera vez que movemos el rat&#243;n, inicializamos last_x y last_y</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> last_x <span style="color: #a020f0;">is</span> <span style="color: #008b8b;">None</span> <span style="color: #a020f0;">or</span> last_y <span style="color: #a020f0;">is</span> <span style="color: #008b8b;">None</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">last_x</span>, <span style="color: #a0522d;">last_y</span> = xpos, ypos

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Calcular las diferencias en el movimiento del rat&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">dx</span> = xpos - last_x
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">dy</span> = ypos - last_y

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Ajustar los &#225;ngulos de rotaci&#243;n en funci&#243;n del movimiento del rat&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">angle_x</span> += dy * 0.2  <span style="color: #b22222;"># </span><span style="color: #b22222;">Factor de sensibilidad en Y</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">angle_y</span> += dx * 0.2  <span style="color: #b22222;"># </span><span style="color: #b22222;">Factor de sensibilidad en X</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Actualizar las posiciones anteriores del rat&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">last_x</span>, <span style="color: #a0522d;">last_y</span> = xpos, ypos

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear ventana de GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">width</span>, <span style="color: #a0522d;">height</span> = 500, 500
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">window</span> = glfw.create_window<span style="color: #707183;">(</span>width, height, <span style="color: #8b2252;">"Toroide 3D Controlado por Rat&#243;n"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configurar el contexto de OpenGL en la ventana</span>
<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glViewport<span style="color: #707183;">(</span>0, 0, width, height<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configurar el callback de rat&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   glfw.set_cursor_pos_callback<span style="color: #707183;">(</span>window, mouse_callback<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_torus<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Cerrar GLFW al salir</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>

</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> gluNewQuadric, gluSphere, gluPerspective
<span style="color: #a020f0;">import</span> sys
<span style="color: #a020f0;">import</span> math

<span style="color: #b22222;"># </span><span style="color: #b22222;">Variables globales para el &#225;ngulo de rotaci&#243;n y posici&#243;n de la esfera</span>
<span style="color: #a0522d;">window</span> = <span style="color: #008b8b;">None</span>
<span style="color: #a0522d;">rotation_angle</span> = 0.0  <span style="color: #b22222;"># </span><span style="color: #b22222;">&#193;ngulo de rotaci&#243;n de la esfera</span>
<span style="color: #a0522d;">movement_offset</span> = 0.0  <span style="color: #b22222;"># </span><span style="color: #b22222;">Offset para el movimiento de vaiv&#233;n</span>
<span style="color: #a0522d;">movement_speed</span> = 0.05  <span style="color: #b22222;"># </span><span style="color: #b22222;">Velocidad del movimiento de vaiv&#233;n</span>
<span style="color: #a0522d;">movement_direction</span> = 1  <span style="color: #b22222;"># </span><span style="color: #b22222;">Direcci&#243;n del movimiento (1 a la derecha, -1 a la izquierda)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.5, 0.8, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Fondo negro</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>            <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar prueba de profundidad</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_LIGHTING<span style="color: #707183;">)</span>              <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar iluminaci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_LIGHT0<span style="color: #707183;">)</span>                <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar la luz 0</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la perspectiva</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>45, 1.0, 0.1, 50.0<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la luz</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">light_pos</span> = <span style="color: #707183;">[</span>1.0, 1.0, 1.0, 0.0<span style="color: #707183;">]</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posici&#243;n de la luz</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">light_color</span> = <span style="color: #707183;">[</span>1.0, 1.0, 1.0, 1.0<span style="color: #707183;">]</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color de la luz blanca</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ambient_light</span> = <span style="color: #707183;">[</span>0.2, 0.2, 0.2, 1.0<span style="color: #707183;">]</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Luz ambiental</span>

<span style="background-color: #f2f2f2;"> </span>   glLightfv<span style="color: #707183;">(</span>GL_LIGHT0, GL_POSITION, light_pos<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLightfv<span style="color: #707183;">(</span>GL_LIGHT0, GL_DIFFUSE, light_color<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLightfv<span style="color: #707183;">(</span>GL_LIGHT0, GL_AMBIENT, ambient_light<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de las propiedades de material</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">material_diffuse</span> = <span style="color: #707183;">[</span>1, 0.2, 1.0, 0.0<span style="color: #707183;">]</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color difuso (azul claro)</span>
<span style="background-color: #f2f2f2;"> </span>   glMaterialfv<span style="color: #707183;">(</span>GL_FRONT, GL_DIFFUSE, material_diffuse<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_sphere</span><span style="color: #707183;">(</span>radius=1, slices=32, stacks=32<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> rotation_angle, movement_offset
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>movement_offset, 0.0, -50<span style="color: #707183;">)</span>      <span style="color: #b22222;"># </span><span style="color: #b22222;">Mover la esfera en vaiv&#233;n</span>
<span style="background-color: #f2f2f2;"> </span>   glRotatef<span style="color: #707183;">(</span>rotation_angle, 0, 1, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rotar la esfera sobre su eje Y</span>

<span style="background-color: #f2f2f2;"> </span>   quadric = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluSphere<span style="color: #707183;">(</span>quadric, radius, slices, stacks<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar la esfera</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">update_motion</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> rotation_angle, movement_offset, movement_direction

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Actualizar el &#225;ngulo de rotaci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   rotation_angle += 1
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> rotation_angle &gt;= 360:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   rotation_angle = 0  <span style="color: #b22222;"># </span><span style="color: #b22222;">Reiniciar el &#225;ngulo despu&#233;s de una vuelta completa</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Actualizar el movimiento de vaiv&#233;n</span>
<span style="background-color: #f2f2f2;"> </span>   movement_offset += movement_speed * movement_direction
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> movement_offset &gt; 3.0:       <span style="color: #b22222;"># </span><span style="color: #b22222;">Limite derecho</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   movement_direction = -1     <span style="color: #b22222;"># </span><span style="color: #b22222;">Cambiar direcci&#243;n hacia la izquierda</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">elif</span> movement_offset &lt; -3.0:    <span style="color: #b22222;"># </span><span style="color: #b22222;">Limite izquierdo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   movement_direction = 1      <span style="color: #b22222;"># </span><span style="color: #b22222;">Cambiar direcci&#243;n hacia la derecha</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear ventana de GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">width</span>, <span style="color: #a0522d;">height</span> = 500, 500
<span style="background-color: #f2f2f2;"> </span>   window = glfw.create_window<span style="color: #707183;">(</span>width, height, <span style="color: #8b2252;">"Esfera en Movimiento y Rotaci&#243;n"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glViewport<span style="color: #707183;">(</span>0, 0, width, height<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_sphere<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   update_motion<span style="color: #707183;">()</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Actualizar el movimiento y rotaci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>

</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> gluNewQuadric, gluSphere, gluPerspective, gluCylinder
<span style="color: #a020f0;">import</span> sys

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.5, 0.7, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Fondo de cielo</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la perspectiva</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>45, 1.0, 0.1, 50.0<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_sphere</span><span style="color: #707183;">(</span>radius=1, x=0, y=0, z=0<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>x, y, z<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   quadric = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluSphere<span style="color: #707183;">(</span>quadric, radius, 32, 32<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_cone</span><span style="color: #707183;">(</span>base=0.1, height=0.5, x=0, y=0, z=0<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>x, y, z<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glRotatef<span style="color: #707183;">(</span>-90, 1, 0, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Orientar el cono hacia adelante</span>
<span style="background-color: #f2f2f2;"> </span>   quadric = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluCylinder<span style="color: #707183;">(</span>quadric, base, 0, height, 32, 32<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_snowman</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, -1.5, -8<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Alejar al mu&#241;eco de nieve</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Cuerpo</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   draw_sphere<span style="color: #707183;">(</span>1.0, 0, 0, 0<span style="color: #707183;">)</span>     <span style="color: #b22222;"># </span><span style="color: #b22222;">Base</span>
<span style="background-color: #f2f2f2;"> </span>   draw_sphere<span style="color: #707183;">(</span>0.75, 0, 1.2, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Cuerpo medio</span>
<span style="background-color: #f2f2f2;"> </span>   draw_sphere<span style="color: #707183;">(</span>0.5, 0, 2.2, 0<span style="color: #707183;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Cabeza</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Ojos</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0, 0, 0<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   draw_sphere<span style="color: #707183;">(</span>0.05, -0.15, 2.3, 0.4<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Ojo izquierdo</span>
<span style="background-color: #f2f2f2;"> </span>   draw_sphere<span style="color: #707183;">(</span>0.05, 0.15, 2.3, 0.4<span style="color: #707183;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Ojo derecho</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Nariz (cono)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1, 0.5, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color naranja</span>
<span style="background-color: #f2f2f2;"> </span>   draw_cone<span style="color: #707183;">(</span>0.05, 0.2, 0, 2.2, 0.5<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Nariz</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window
<span style="background-color: #f2f2f2;"> </span>   window = glfw.create_window<span style="color: #707183;">(</span>500, 500, <span style="color: #8b2252;">"Mu&#241;eco de Nieve en OpenGL"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_snowman<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>
</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> gluNewQuadric, gluSphere, gluPerspective, gluCylinder
<span style="color: #a020f0;">import</span> sys
<span style="color: #a020f0;">import</span> math

<span style="color: #b22222;"># </span><span style="color: #b22222;">Variables globales</span>
<span style="color: #a0522d;">window</span> = <span style="color: #008b8b;">None</span>
<span style="color: #a0522d;">jump_offset</span> = 0.0       <span style="color: #b22222;"># </span><span style="color: #b22222;">Para el movimiento de salto vertical</span>
<span style="color: #a0522d;">jump_speed</span> = 0.05       <span style="color: #b22222;"># </span><span style="color: #b22222;">Velocidad del salto</span>
<span style="color: #a0522d;">jump_direction</span> = 1      <span style="color: #b22222;"># </span><span style="color: #b22222;">Direcci&#243;n del salto (1 hacia arriba, -1 hacia abajo)</span>
<span style="color: #a0522d;">rotation_angle</span> = 0.0    <span style="color: #b22222;"># </span><span style="color: #b22222;">&#193;ngulo de rotaci&#243;n del mu&#241;eco de nieve</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.5, 0.7, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Fondo de cielo</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la perspectiva</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>45, 1.0, 0.1, 50.0<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_sphere</span><span style="color: #707183;">(</span>radius=1, x=0, y=0, z=0<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>x, y, z<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   quadric = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluSphere<span style="color: #707183;">(</span>quadric, radius, 32, 32<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_cone</span><span style="color: #707183;">(</span>base=0.1, height=0.5, x=0, y=0, z=0<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>x, y, z<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glRotatef<span style="color: #707183;">(</span>-90, 1, 0, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Orientar el cono hacia adelante</span>
<span style="background-color: #f2f2f2;"> </span>   quadric = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluCylinder<span style="color: #707183;">(</span>quadric, base, 0, height, 32, 32<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_snowman</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> jump_offset, rotation_angle

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Limpiar la pantalla y la profundidad</span>
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configurar posici&#243;n de la c&#225;mara</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0 + jump_offset, -1.5 , -8<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posici&#243;n del mu&#241;eco de nieve y altura</span>
<span style="background-color: #f2f2f2;"> </span>   glRotatef<span style="color: #707183;">(</span>rotation_angle, 0, 0, 1<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rotaci&#243;n en el eje Y</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Cuerpo</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   draw_sphere<span style="color: #707183;">(</span>1.0, 0, 0, 0<span style="color: #707183;">)</span>     <span style="color: #b22222;"># </span><span style="color: #b22222;">Base</span>
<span style="background-color: #f2f2f2;"> </span>   draw_sphere<span style="color: #707183;">(</span>0.75, 0, 1.2, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Cuerpo medio</span>
<span style="background-color: #f2f2f2;"> </span>   draw_sphere<span style="color: #707183;">(</span>0.5, 0, 2.2, 0<span style="color: #707183;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Cabeza</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Ojos</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0, 0, 0<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   draw_sphere<span style="color: #707183;">(</span>0.05, -0.15, 2.3, 0.4<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Ojo izquierdo</span>
<span style="background-color: #f2f2f2;"> </span>   draw_sphere<span style="color: #707183;">(</span>0.05, 0.15, 2.3, 0.4<span style="color: #707183;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Ojo derecho</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Nariz (cono)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1, 0.5, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color naranja</span>
<span style="background-color: #f2f2f2;"> </span>   draw_cone<span style="color: #707183;">(</span>0.05, 0.2, 0, 2.2, 0.5<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Nariz</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">update_motion</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> jump_offset, jump_direction, rotation_angle

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Actualizar el &#225;ngulo de rotaci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   rotation_angle += 1  <span style="color: #b22222;"># </span><span style="color: #b22222;">Incrementa para que el mu&#241;eco gire</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> rotation_angle &gt;= 360:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   rotation_angle = 0  <span style="color: #b22222;"># </span><span style="color: #b22222;">Reiniciar el &#225;ngulo despu&#233;s de una vuelta completa</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Actualizar el movimiento de salto</span>
<span style="background-color: #f2f2f2;"> </span>   jump_offset += jump_speed * jump_direction
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> jump_offset &gt; 1.0:        <span style="color: #b22222;"># </span><span style="color: #b22222;">Limite superior del salto</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   jump_direction = -1      <span style="color: #b22222;"># </span><span style="color: #b22222;">Cambiar direcci&#243;n hacia abajo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">elif</span> jump_offset &lt; 0.0:      <span style="color: #b22222;"># </span><span style="color: #b22222;">Limite inferior del salto</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   jump_direction = 1       <span style="color: #b22222;"># </span><span style="color: #b22222;">Cambiar direcci&#243;n hacia arriba</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear ventana de GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">width</span>, <span style="color: #a0522d;">height</span> = 500, 500
<span style="background-color: #f2f2f2;"> </span>   window = glfw.create_window<span style="color: #707183;">(</span>width, height, <span style="color: #8b2252;">"Mu&#241;eco de Nieve en Movimiento"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glViewport<span style="color: #707183;">(</span>0, 0, width, height<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_snowman<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   update_motion<span style="color: #707183;">()</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Actualizar el movimiento en cada cuadro</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>

</pre>
</div>
</div>
</div>


<div id="outline-container-org7f24568" class="outline-3">
<h3 id="org7f24568">Tutorial de gluPerspective en OpenGL</h3>
<div class="outline-text-3" id="text-org7f24568">
<p>
Este tutorial describe cómo utilizar la función <code>gluPerspective</code> en
OpenGL para definir la proyección en perspectiva en una escena 3D. La
proyección en perspectiva simula cómo los humanos ven el mundo, con
objetos cercanos que se ven más grandes y objetos lejanos que se ven
más pequeños.
</p>
</div>

<div id="outline-container-org6cef578" class="outline-4">
<h4 id="org6cef578">¿Qué es gluPerspective?</h4>
<div class="outline-text-4" id="text-org6cef578">
<p>
La función <code>gluPerspective</code> establece una proyección en perspectiva para
la cámara, creando una "pirámide de visión" o "frustum" en la que los
objetos más lejanos se ven más pequeños, proporcionando una sensación
de profundidad en la escena.
</p>
</div>
</div>



<div id="outline-container-orgc81565d" class="outline-4">
<h4 id="orgc81565d">Sintaxis</h4>
<div class="outline-text-4" id="text-orgc81565d">
<div class="org-src-container">
<pre class="src src-python">gluPerspective<span style="color: #707183;">(</span>fovY, aspect, zNear, zFar<span style="color: #707183;">)</span>
</pre>
</div>

<ul class="org-ul">
<li><code>fovY</code>: El campo de visión vertical en grados. Un valor mayor de <code>fovY</code>
hace que la vista sea más amplia.</li>
<li><code>aspect</code>: La relación de aspecto de la ventana (ancho/alto). Asegura
que la imagen no se vea estirada.</li>
<li><code>zNear</code>: La distancia mínima visible desde la cámara. Los objetos más
cercanos a la cámara que <code>zNear</code> no se renderizan.</li>
<li><code>zFar</code>: La distancia máxima visible desde la cámara. Los objetos más
lejanos que <code>zFar</code> no se renderizan.</li>
</ul>
</div>
</div>

<div id="outline-container-orgf65911c" class="outline-4">
<h4 id="orgf65911c">Ejemplo Básico de Uso de gluPerspective</h4>
<div class="outline-text-4" id="text-orgf65911c">
<p>
Este ejemplo muestra cómo configurar <code>gluPerspective</code> en una escena de OpenGL en Python, utilizando PyOpenGL y GLFW.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> gluPerspective

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.0, 0.0, 0.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Fondo negro</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>            <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar prueba de profundidad</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la proyecci&#243;n en perspectiva</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>        <span style="color: #b22222;"># </span><span style="color: #b22222;">Cambiar a la matriz de proyecci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>                   <span style="color: #b22222;"># </span><span style="color: #b22222;">Resetear la matriz de proyecci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>45, 4/3, 0.1, 50.0<span style="color: #707183;">)</span> <span style="color: #b22222;"># </span><span style="color: #b22222;">Configurar perspectiva</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>         <span style="color: #b22222;"># </span><span style="color: #b22222;">Cambiar a la matriz de modelo/vista</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, 0.0, -5<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Alejar el objeto de la c&#225;mara</span>

<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUADS<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1, 0, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rojo</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 1, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, -1, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, -1, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">window</span> = glfw.create_window<span style="color: #707183;">(</span>800, 600, <span style="color: #8b2252;">"Ejemplo de gluPerspective"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glViewport<span style="color: #707183;">(</span>0, 0, 800, 600<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>
</pre>
</div>
</div>
</div>
</div>


<div id="outline-container-org2d11dc2" class="outline-3">
<h3 id="org2d11dc2">Objetos de Glut</h3>
<div class="outline-text-3" id="text-org2d11dc2">
<ul class="org-ul">
<li>casa</li>
</ul>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> gluPerspective, gluLookAt
<span style="color: #a020f0;">import</span> sys

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Configuraci&#243;n inicial de OpenGL"""</span>
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.5, 0.8, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Fondo azul cielo</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>           <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar prueba de profundidad</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la perspectiva</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>60, 1.0, 0.1, 100.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Campo de visi&#243;n m&#225;s amplio</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_cube</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja el cubo (base de la casa)"""</span>
<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUADS<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.8, 0.5, 0.2<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Marr&#243;n para todas las caras</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Frente</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 0, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 0, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, 1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Atr&#225;s</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 0, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 0, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 1, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, -1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Izquierda</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 0, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 0, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, -1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Derecha</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 0, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 0, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 1, -1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Arriba</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.9, 0.6, 0.3<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color diferente para el techo</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 1, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, 1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Abajo</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.6, 0.4, 0.2<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Suelo m&#225;s oscuro</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 0, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 0, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 0, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 0, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_roof</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja el techo (pir&#225;mide)"""</span>
<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_TRIANGLES<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.9, 0.1, 0.1<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rojo brillante</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Frente</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>0, 2, 0<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Atr&#225;s</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 1, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>0, 2, 0<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Izquierda</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>0, 2, 0<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Derecha</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 1, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 1, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>0, 2, 0<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_ground</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja un plano para representar el suelo o calle"""</span>
<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUADS<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.3, 0.3, 0.3<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Gris oscuro para la calle</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Coordenadas del plano</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-10, 0, 10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>10, 0, 10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>10, 0, -10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-10, 0, -10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_house</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja una casa sobre un plano"""</span>
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la c&#225;mara</span>
<span style="background-color: #f2f2f2;"> </span>   gluLookAt<span style="color: #707183;">(</span>4, 3, 8,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posici&#243;n de la c&#225;mara</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> 0, 1, 0,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Punto al que mira</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> 0, 1, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Vector hacia arriba</span>

<span style="background-color: #f2f2f2;"> </span>   draw_ground<span style="color: #707183;">()</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja el suelo</span>
<span style="background-color: #f2f2f2;"> </span>   draw_cube<span style="color: #707183;">()</span>    <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja la base de la casa</span>
<span style="background-color: #f2f2f2;"> </span>   draw_roof<span style="color: #707183;">()</span>    <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja el techo</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear ventana de GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">width</span>, <span style="color: #a0522d;">height</span> = 800, 600
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">window</span> = glfw.create_window<span style="color: #707183;">(</span>width, height, <span style="color: #8b2252;">"Casa 3D con Base"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glViewport<span style="color: #707183;">(</span>0, 0, width, height<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_house<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>

</pre>
</div>


<ul class="org-ul">
<li>casas</li>
</ul>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> gluPerspective, gluLookAt
<span style="color: #a020f0;">import</span> sys

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Configuraci&#243;n inicial de OpenGL"""</span>
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.5, 0.8, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Fondo azul cielo</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>           <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar prueba de profundidad</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la perspectiva</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>60, 1, 6, 100.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Campo de visi&#243;n m&#225;s amplio</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_cube</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja el cubo (base de la casa)"""</span>
<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUADS<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.8, 0.5, 0.2<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Marr&#243;n para todas las caras</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Frente</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 0, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 0, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 5, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 5, 1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Atr&#225;s     X  Y   Z</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 0, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 0, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 5, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 5, -1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Izquierda</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 0, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 0, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 5, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 5, -1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Derecha</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 0, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 0, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 5, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 5, -1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Arriba</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.9, 0.6, 0.3<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color diferente para el techo</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 5, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 5, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 5, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 5, 1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Abajo</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.6, 0.4, 0.2<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Suelo m&#225;s oscuro</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1,0 , -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 0, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 0, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 0, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_roof</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja el techo (pir&#225;mide)"""</span>
<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_TRIANGLES<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.9, 0.1, 0.1<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rojo brillante</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Frente</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 5, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 5, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>0, 9, 0<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Atr&#225;s     x  y   z </span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 5, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 5, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>0, 9, 0<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Izquierda</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 5, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-1, 5, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>0, 9, 0<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Derecha</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 5, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>1, 5, 1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>0, 9, 0<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_ground</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja un plano para representar el suelo o calle"""</span>
<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUADS<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.3, 0.3, 0.3<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Gris oscuro para la calle</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Coordenadas del plano</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-20, 0, 20<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>20, 0, 20<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>20, 0, -20<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-20, 0, -20<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_house</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja una casa (base + techo)"""</span>
<span style="background-color: #f2f2f2;"> </span>   draw_cube<span style="color: #707183;">()</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Base de la casa</span>
<span style="background-color: #f2f2f2;"> </span>   draw_roof<span style="color: #707183;">()</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Techo</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_scene</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja toda la escena con 4 casas"""</span>
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la c&#225;mara</span>
<span style="background-color: #f2f2f2;"> </span>   gluLookAt<span style="color: #707183;">(</span>10, 8, 15,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posici&#243;n de la c&#225;mara</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> 0, 0, 0,    <span style="color: #b22222;"># </span><span style="color: #b22222;">Punto al que mira</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> 0, 1, 0<span style="color: #707183;">)</span>    <span style="color: #b22222;"># </span><span style="color: #b22222;">Vector hacia arriba</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar el suelo</span>
<span style="background-color: #f2f2f2;"> </span>   draw_ground<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar las casas en diferentes posiciones</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">positions</span> = <span style="color: #707183;">[</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #7388d6;">(</span>-5, 0, -5<span style="color: #7388d6;">)</span>,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Casa 1</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #7388d6;">(</span>5, 0, -5<span style="color: #7388d6;">)</span>,   <span style="color: #b22222;"># </span><span style="color: #b22222;">Casa 2</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #7388d6;">(</span>-5, 0, 5<span style="color: #7388d6;">)</span>,   <span style="color: #b22222;"># </span><span style="color: #b22222;">Casa 3</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #7388d6;">(</span>5, 0, 5<span style="color: #7388d6;">)</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #7388d6;">(</span>0, 0, 0<span style="color: #7388d6;">)</span>,
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> pos <span style="color: #a020f0;">in</span> positions:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>*pos<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Mover la casa a la posici&#243;n actual</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_house<span style="color: #707183;">()</span>        <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar la casa</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear ventana de GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">width</span>, <span style="color: #a0522d;">height</span> = 800, 600
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">window</span> = glfw.create_window<span style="color: #707183;">(</span>width, height, <span style="color: #8b2252;">"Escena con 4 casas"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glViewport<span style="color: #707183;">(</span>0, 0, width, height<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_scene<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>

</pre>
</div>

<ul class="org-ul">
<li>Arbol</li>
</ul>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> gluPerspective, gluLookAt, gluNewQuadric, gluCylinder, gluSphere
<span style="color: #a020f0;">import</span> sys

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Configuraci&#243;n inicial de OpenGL"""</span>
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.5, 0.8, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Fondo azul cielo</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>           <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar prueba de profundidad</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la perspectiva</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>60, 1.0, 0.1, 100.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Campo de visi&#243;n m&#225;s amplio</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_trunk</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja el tronco del &#225;rbol como un cilindro"""</span>
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.6, 0.3, 0.1<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Marr&#243;n para el tronco</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, 0.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posicionar el tronco</span>
<span style="background-color: #f2f2f2;"> </span>   glRotatef<span style="color: #707183;">(</span>-90, 1, 0, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rota para orientar el cilindro verticalmente</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">quadric</span> = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluCylinder<span style="color: #707183;">(</span>quadric, 0.3, 0.3, 2.0, 32, 32<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Radio y altura del cilindro</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_foliage</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja las hojas del &#225;rbol como una esfera"""</span>
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.1, 0.8, 0.1<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Verde para las hojas</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, 2.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posicionar las hojas encima del tronco</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">quadric</span> = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluSphere<span style="color: #707183;">(</span>quadric, 1.0, 32, 32<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Radio de la esfera</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_ground</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja un plano para representar el suelo"""</span>
<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUADS<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.3, 0.3, 0.3<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Gris oscuro para el suelo</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-10, 0, 10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>10, 0, 10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>10, 0, -10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-10, 0, -10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_tree</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja un &#225;rbol completo"""</span>
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la c&#225;mara</span>
<span style="background-color: #f2f2f2;"> </span>   gluLookAt<span style="color: #707183;">(</span>4, 3, 8,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posici&#243;n de la c&#225;mara</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> 0, 1, 0,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Punto al que mira</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> 0, 1, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Vector hacia arriba</span>

<span style="background-color: #f2f2f2;"> </span>   draw_ground<span style="color: #707183;">()</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja el suelo</span>
<span style="background-color: #f2f2f2;"> </span>   draw_trunk<span style="color: #707183;">()</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja el tronco</span>
<span style="background-color: #f2f2f2;"> </span>   draw_foliage<span style="color: #707183;">()</span> <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja las hojas</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear ventana de GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">width</span>, <span style="color: #a0522d;">height</span> = 800, 600
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">window</span> = glfw.create_window<span style="color: #707183;">(</span>width, height, <span style="color: #8b2252;">"&#193;rbol 3D con Tronco y Hojas"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glViewport<span style="color: #707183;">(</span>0, 0, width, height<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_tree<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>


</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">import</span> sys

<span style="color: #b22222;"># </span><span style="color: #b22222;">Variables globales para controlar la posici&#243;n del cuadrado</span>
<span style="color: #a0522d;">square_x</span> = 0.0
<span style="color: #a0522d;">square_y</span> = 0.0
<span style="color: #a0522d;">speed</span> = 0.05  <span style="color: #b22222;"># </span><span style="color: #b22222;">Velocidad de movimiento</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Configuraci&#243;n inicial de OpenGL"""</span>
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.0, 0.0, 0.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Fondo negro</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glOrtho<span style="color: #707183;">(</span>-1, 1, -1, 1, -1, 1<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Configurar un sistema de coordenadas 2D</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_square</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja un cuadrado en la posici&#243;n actual"""</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> square_x, square_y

<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.0, 1.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color verde</span>
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>square_x, square_y, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Trasladar el cuadrado</span>
<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUADS<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex2f<span style="color: #707183;">(</span>-0.1, -0.1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex2f<span style="color: #707183;">(</span>0.1, -0.1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex2f<span style="color: #707183;">(</span>0.1, 0.1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex2f<span style="color: #707183;">(</span>-0.1, 0.1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">key_callback</span><span style="color: #707183;">(</span>window, key, scancode, action, mods<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Procesa las entradas de teclado"""</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> square_x, square_y, speed

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> action == glfw.PRESS <span style="color: #a020f0;">or</span> action == glfw.REPEAT:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> key == glfw.KEY_UP:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   square_y += speed  <span style="color: #b22222;"># </span><span style="color: #b22222;">Mover hacia arriba</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">elif</span> key == glfw.KEY_DOWN:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   square_y -= speed  <span style="color: #b22222;"># </span><span style="color: #b22222;">Mover hacia abajo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">elif</span> key == glfw.KEY_LEFT:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   square_x -= speed  <span style="color: #b22222;"># </span><span style="color: #b22222;">Mover a la izquierda</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">elif</span> key == glfw.KEY_RIGHT:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   square_x += speed  <span style="color: #b22222;"># </span><span style="color: #b22222;">Mover a la derecha</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #483d8b;">print</span><span style="color: #707183;">(</span><span style="color: #8b2252;">"No se pudo inicializar GLFW"</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear ventana</span>
<span style="background-color: #f2f2f2;"> </span>   window = glfw.create_window<span style="color: #707183;">(</span>800, 600, <span style="color: #8b2252;">"Prueba de Teclado"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #483d8b;">print</span><span style="color: #707183;">(</span><span style="color: #8b2252;">"No se pudo crear la ventana"</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glfw.set_key_callback<span style="color: #707183;">(</span>window, key_callback<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Configurar callback de teclado</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_square<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>


</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> gluPerspective, gluLookAt, gluNewQuadric, gluCylinder, gluSphere
<span style="color: #a020f0;">import</span> sys

<span style="color: #b22222;"># </span><span style="color: #b22222;">Variables globales para la c&#225;mara</span>
<span style="color: #a0522d;">camera_pos</span> = <span style="color: #707183;">[</span>4.0, 3.0, 8.0<span style="color: #707183;">]</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posici&#243;n de la c&#225;mara</span>
<span style="color: #a0522d;">camera_target</span> = <span style="color: #707183;">[</span>0.0, 1.0, 0.0<span style="color: #707183;">]</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Punto al que mira</span>
<span style="color: #a0522d;">camera_up</span> = <span style="color: #707183;">[</span>0.0, 1.0, 0.0<span style="color: #707183;">]</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Vector hacia arriba</span>

<span style="color: #b22222;"># </span><span style="color: #b22222;">Variables para el movimiento</span>
<span style="color: #a0522d;">camera_speed</span> = 0.2  <span style="color: #b22222;"># </span><span style="color: #b22222;">Velocidad de movimiento</span>
<span style="color: #a0522d;">keys</span> = <span style="color: #707183;">{}</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Diccionario para controlar el estado de las teclas</span>


<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Configuraci&#243;n inicial de OpenGL"""</span>
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.5, 0.8, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Fondo azul cielo</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>           <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar prueba de profundidad</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la perspectiva</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>60, 1.0, 0.1, 100.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Campo de visi&#243;n m&#225;s amplio</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>


<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_trunk</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja el tronco del &#225;rbol como un cilindro"""</span>
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.6, 0.3, 0.1<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Marr&#243;n para el tronco</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, 0.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posicionar el tronco</span>
<span style="background-color: #f2f2f2;"> </span>   glRotatef<span style="color: #707183;">(</span>-90, 1, 0, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rota para orientar el cilindro verticalmente</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">quadric</span> = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluCylinder<span style="color: #707183;">(</span>quadric, 0.3, 0.3, 2.0, 32, 32<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Radio y altura del cilindro</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>


<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_foliage</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja las hojas del &#225;rbol como una esfera"""</span>
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.1, 0.8, 0.1<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Verde para las hojas</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, 2.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posicionar las hojas encima del tronco</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">quadric</span> = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluSphere<span style="color: #707183;">(</span>quadric, 1.0, 32, 32<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Radio de la esfera</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>


<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_ground</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja un plano para representar el suelo"""</span>
<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUADS<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>0.3, 0.3, 0.3<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Gris oscuro para el suelo</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-10, 0, 10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>10, 0, 10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>10, 0, -10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glVertex3f<span style="color: #707183;">(</span>-10, 0, -10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>


<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_scene</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja la escena completa"""</span>
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la c&#225;mara</span>
<span style="background-color: #f2f2f2;"> </span>   gluLookAt<span style="color: #707183;">(</span>camera_pos<span style="color: #7388d6;">[</span>0<span style="color: #7388d6;">]</span>, camera_pos<span style="color: #7388d6;">[</span>1<span style="color: #7388d6;">]</span>, camera_pos<span style="color: #7388d6;">[</span>2<span style="color: #7388d6;">]</span>,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posici&#243;n de la c&#225;mara</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> camera_target<span style="color: #7388d6;">[</span>0<span style="color: #7388d6;">]</span>, camera_target<span style="color: #7388d6;">[</span>1<span style="color: #7388d6;">]</span>, camera_target<span style="color: #7388d6;">[</span>2<span style="color: #7388d6;">]</span>,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Punto al que mira</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> camera_up<span style="color: #7388d6;">[</span>0<span style="color: #7388d6;">]</span>, camera_up<span style="color: #7388d6;">[</span>1<span style="color: #7388d6;">]</span>, camera_up<span style="color: #7388d6;">[</span>2<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Vector hacia arriba</span>

<span style="background-color: #f2f2f2;"> </span>   draw_ground<span style="color: #707183;">()</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja el suelo</span>
<span style="background-color: #f2f2f2;"> </span>   draw_trunk<span style="color: #707183;">()</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja el tronco</span>
<span style="background-color: #f2f2f2;"> </span>   draw_foliage<span style="color: #707183;">()</span> <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja las hojas</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>


<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">process_input</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Procesa el estado de las teclas para mover la c&#225;mara"""</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> camera_pos

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> keys.get<span style="color: #707183;">(</span>glfw.KEY_W, <span style="color: #008b8b;">False</span><span style="color: #707183;">)</span>:  <span style="color: #b22222;"># </span><span style="color: #b22222;">Mover hacia adelante</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">camera_pos</span><span style="color: #707183;">[</span>2<span style="color: #707183;">]</span> -= camera_speed
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> keys.get<span style="color: #707183;">(</span>glfw.KEY_S, <span style="color: #008b8b;">False</span><span style="color: #707183;">)</span>:  <span style="color: #b22222;"># </span><span style="color: #b22222;">Mover hacia atr&#225;s</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">camera_pos</span><span style="color: #707183;">[</span>2<span style="color: #707183;">]</span> += camera_speed
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> keys.get<span style="color: #707183;">(</span>glfw.KEY_A, <span style="color: #008b8b;">False</span><span style="color: #707183;">)</span>:  <span style="color: #b22222;"># </span><span style="color: #b22222;">Mover a la izquierda</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">camera_pos</span><span style="color: #707183;">[</span>0<span style="color: #707183;">]</span> -= camera_speed
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> keys.get<span style="color: #707183;">(</span>glfw.KEY_D, <span style="color: #008b8b;">False</span><span style="color: #707183;">)</span>:  <span style="color: #b22222;"># </span><span style="color: #b22222;">Mover a la derecha</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">camera_pos</span><span style="color: #707183;">[</span>0<span style="color: #707183;">]</span> += camera_speed
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> keys.get<span style="color: #707183;">(</span>glfw.KEY_UP, <span style="color: #008b8b;">False</span><span style="color: #707183;">)</span>:  <span style="color: #b22222;"># </span><span style="color: #b22222;">Subir</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">camera_pos</span><span style="color: #707183;">[</span>1<span style="color: #707183;">]</span> += camera_speed
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> keys.get<span style="color: #707183;">(</span>glfw.KEY_DOWN, <span style="color: #008b8b;">False</span><span style="color: #707183;">)</span>:  <span style="color: #b22222;"># </span><span style="color: #b22222;">Bajar</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">camera_pos</span><span style="color: #707183;">[</span>1<span style="color: #707183;">]</span> -= camera_speed


<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">key_callback</span><span style="color: #707183;">(</span>window, key, scancode, action, mods<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Actualiza el estado de las teclas"""</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> action == glfw.PRESS:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   keys<span style="color: #707183;">[</span><span style="color: #a0522d;">key</span><span style="color: #707183;">]</span> = <span style="color: #008b8b;">True</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">elif</span> action == glfw.RELEASE:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   keys<span style="color: #707183;">[</span><span style="color: #a0522d;">key</span><span style="color: #707183;">]</span> = <span style="color: #008b8b;">False</span>


<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear ventana de GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">width</span>, <span style="color: #a0522d;">height</span> = 800, 600
<span style="background-color: #f2f2f2;"> </span>   window = glfw.create_window<span style="color: #707183;">(</span>width, height, <span style="color: #8b2252;">"Mover Escena Completa"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> window:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glViewport<span style="color: #707183;">(</span>0, 0, width, height<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configurar callback de teclado</span>
<span style="background-color: #f2f2f2;"> </span>   glfw.set_key_callback<span style="color: #707183;">(</span>window, key_callback<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   process_input<span style="color: #707183;">()</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Procesar teclas presionadas</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_scene<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>


<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>

</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> gluPerspective, gluLookAt, gluNewQuadric, gluCylinder, gluSphere
<span style="color: #a020f0;">from</span> PIL <span style="color: #a020f0;">import</span> Image
<span style="color: #a020f0;">import</span> sys

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Configuraci&#243;n inicial de OpenGL"""</span>
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.5, 0.8, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Fondo azul cielo</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>           <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar prueba de profundidad</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_LIGHTING<span style="color: #707183;">)</span>             <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar luces</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_LIGHT0<span style="color: #707183;">)</span>               <span style="color: #b22222;"># </span><span style="color: #b22222;">Luz b&#225;sica</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_COLOR_MATERIAL<span style="color: #707183;">)</span>       <span style="color: #b22222;"># </span><span style="color: #b22222;">Materiales de color para reflejar luz</span>
<span style="background-color: #f2f2f2;"> </span>   glShadeModel<span style="color: #707183;">(</span>GL_SMOOTH<span style="color: #707183;">)</span>           <span style="color: #b22222;"># </span><span style="color: #b22222;">Sombreado suave</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_TEXTURE_2D<span style="color: #707183;">)</span>           <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar texturas</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la perspectiva</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>60, 1.0, 0.1, 100.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Campo de visi&#243;n m&#225;s amplio</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Luz ambiental y difusa</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">light_pos</span> = <span style="color: #707183;">[</span>10, 10, 10, 1.0<span style="color: #707183;">]</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posici&#243;n de la luz</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">light_ambient</span> = <span style="color: #707183;">[</span>0.3, 0.3, 0.3, 1.0<span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">light_diffuse</span> = <span style="color: #707183;">[</span>0.8, 0.8, 0.8, 1.0<span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   glLightfv<span style="color: #707183;">(</span>GL_LIGHT0, GL_POSITION, light_pos<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLightfv<span style="color: #707183;">(</span>GL_LIGHT0, GL_AMBIENT, light_ambient<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLightfv<span style="color: #707183;">(</span>GL_LIGHT0, GL_DIFFUSE, light_diffuse<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">load_texture</span><span style="color: #707183;">(</span>filename<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Carga una textura desde un archivo de imagen"""</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img</span> = Image.<span style="color: #483d8b;">open</span><span style="color: #707183;">(</span>filename<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img_data</span> = img.tobytes<span style="color: #707183;">(</span><span style="color: #8b2252;">"raw"</span>, <span style="color: #8b2252;">"RGB"</span>, 0, -1<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">texture_id</span> = glGenTextures<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glBindTexture<span style="color: #707183;">(</span>GL_TEXTURE_2D, texture_id<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glTexParameteri<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexParameteri<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexParameteri<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexParameteri<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glTexImage2D<span style="color: #707183;">(</span>GL_TEXTURE_2D, 0, GL_RGB, img.width, img.height, 0, GL_RGB, GL_UNSIGNED_BYTE, img_data<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> texture_id

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_trunk</span><span style="color: #707183;">(</span>texture_id<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja el tronco del &#225;rbol como un cilindro con textura"""</span>
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glBindTexture<span style="color: #707183;">(</span>GL_TEXTURE_2D, texture_id<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Vincula la textura</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color blanco para mostrar la textura</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, 0.0, 0.0<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glRotatef<span style="color: #707183;">(</span>-90, 1, 0, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Orienta el cilindro verticalmente</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">quadric</span> = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluQuadricTexture<span style="color: #707183;">(</span>quadric, GL_TRUE<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluCylinder<span style="color: #707183;">(</span>quadric, 0.3, 0.3, 2.0, 32, 32<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_foliage</span><span style="color: #707183;">(</span>texture_id<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja las hojas del &#225;rbol como una esfera con textura"""</span>
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glBindTexture<span style="color: #707183;">(</span>GL_TEXTURE_2D, texture_id<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Vincula la textura</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color blanco para mostrar la textura</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, 2.0, 0.0<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">quadric</span> = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluQuadricTexture<span style="color: #707183;">(</span>quadric, GL_TRUE<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluSphere<span style="color: #707183;">(</span>quadric, 1.0, 32, 32<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_ground</span><span style="color: #707183;">(</span>texture_id<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja un plano para representar el suelo con textura"""</span>
<span style="background-color: #f2f2f2;"> </span>   glBindTexture<span style="color: #707183;">(</span>GL_TEXTURE_2D, texture_id<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Vincula la textura</span>
<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUADS<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Color blanco para mostrar la textura</span>
<span style="background-color: #f2f2f2;"> </span>   glTexCoord2f<span style="color: #707183;">(</span>0.0, 0.0<span style="color: #707183;">)</span>; glVertex3f<span style="color: #707183;">(</span>-10, 0, 10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexCoord2f<span style="color: #707183;">(</span>1.0, 0.0<span style="color: #707183;">)</span>; glVertex3f<span style="color: #707183;">(</span>10, 0, 10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexCoord2f<span style="color: #707183;">(</span>1.0, 1.0<span style="color: #707183;">)</span>; glVertex3f<span style="color: #707183;">(</span>10, 0, -10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexCoord2f<span style="color: #707183;">(</span>0.0, 1.0<span style="color: #707183;">)</span>; glVertex3f<span style="color: #707183;">(</span>-10, 0, -10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_tree</span><span style="color: #707183;">(</span>trunk_texture, foliage_texture, ground_texture<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja un &#225;rbol completo"""</span>
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la c&#225;mara</span>
<span style="background-color: #f2f2f2;"> </span>   gluLookAt<span style="color: #707183;">(</span>4, 3, 8,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posici&#243;n de la c&#225;mara</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> 0, 1, 0,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Punto al que mira</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> 0, 1, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Vector hacia arriba</span>

<span style="background-color: #f2f2f2;"> </span>   draw_ground<span style="color: #707183;">(</span>ground_texture<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja el suelo</span>
<span style="background-color: #f2f2f2;"> </span>   draw_trunk<span style="color: #707183;">(</span>trunk_texture<span style="color: #707183;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja el tronco</span>
<span style="background-color: #f2f2f2;"> </span>   draw_foliage<span style="color: #707183;">(</span>foliage_texture<span style="color: #707183;">)</span> <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja las hojas</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear ventana de GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">width</span>, <span style="color: #a0522d;">height</span> = 800, 600
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">window</span> = glfw.create_window<span style="color: #707183;">(</span>width, height, <span style="color: #8b2252;">"&#193;rbol 3D con Texturas y Luz"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> <span style="color: #a0522d;">window</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glViewport<span style="color: #707183;">(</span>0, 0, width, height<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Carga de texturas</span>
<span style="background-color: #f2f2f2;"> </span>   trunk_texture = load_texture<span style="color: #707183;">(</span><span style="color: #8b2252;">"trunk.jpg"</span><span style="color: #707183;">)</span>      <span style="color: #b22222;"># </span><span style="color: #b22222;">Textura para el tronco</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">foliage_texture</span> = load_texture<span style="color: #707183;">(</span><span style="color: #8b2252;">"foliage.jpg"</span><span style="color: #707183;">)</span> <span style="color: #b22222;"># </span><span style="color: #b22222;">Textura para las hojas</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ground_texture</span> = load_texture<span style="color: #707183;">(</span><span style="color: #8b2252;">"groud.jpg"</span><span style="color: #707183;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Textura para el suelo</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_tree<span style="color: #707183;">(</span>trunk_texture, foliage_texture, ground_texture<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>

</pre>
</div>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">import</span> glfw
<span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> gluPerspective, gluLookAt, gluNewQuadric, gluCylinder, gluSphere
<span style="color: #a020f0;">import</span> struct

<span style="color: #b22222;"># </span><span style="color: #b22222;">Funci&#243;n para cargar una textura BMP</span>
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">load_texture</span><span style="color: #707183;">(</span>filename<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Carga un archivo BMP y genera una textura de OpenGL"""</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">with</span> <span style="color: #483d8b;">open</span><span style="color: #707183;">(</span>filename, <span style="color: #8b2252;">"rb"</span><span style="color: #707183;">)</span> <span style="color: #a020f0;">as</span> <span style="color: #a0522d;">f</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   header = f.read<span style="color: #707183;">(</span>54<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Cabecera BMP de 54 bytes</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">width</span>, <span style="color: #a0522d;">height</span> = struct.unpack<span style="color: #707183;">(</span><span style="color: #8b2252;">"ii"</span>, header<span style="color: #7388d6;">[</span>18:26<span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">data_offset</span> = struct.unpack<span style="color: #707183;">(</span><span style="color: #8b2252;">"I"</span>, header<span style="color: #7388d6;">[</span>10:14<span style="color: #7388d6;">]</span><span style="color: #707183;">)[</span>0<span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   f.seek<span style="color: #707183;">(</span>data_offset<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">data</span> = f.read<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">almacena p&#237;xeles en orden BGR, los convertimos a RGB</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">image_data</span> = <span style="color: #483d8b;">bytearray</span><span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> <span style="color: #483d8b;">range</span><span style="color: #707183;">(</span>0, <span style="color: #483d8b;">len</span><span style="color: #7388d6;">(</span>data<span style="color: #7388d6;">)</span>, 3<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   image_data.extend<span style="color: #707183;">(</span><span style="color: #7388d6;">[</span>data<span style="color: #909183;">[</span>i + 2<span style="color: #909183;">]</span>, data<span style="color: #909183;">[</span>i + 1<span style="color: #909183;">]</span>, data<span style="color: #909183;">[</span>i<span style="color: #909183;">]</span><span style="color: #7388d6;">]</span><span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">texture_id</span> = glGenTextures<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glBindTexture<span style="color: #707183;">(</span>GL_TEXTURE_2D, texture_id<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexImage2D<span style="color: #707183;">(</span>GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, image_data<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   glTexParameteri<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexParameteri<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexParameteri<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexParameteri<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> texture_id

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Configuraci&#243;n inicial de OpenGL"""</span>
<span style="background-color: #f2f2f2;"> </span>   glClearColor<span style="color: #707183;">(</span>0.5, 0.8, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Fondo azul cielo</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>           <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar prueba de profundidad</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_TEXTURE_2D<span style="color: #707183;">)</span>           <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar texturas</span>
<span style="background-color: #f2f2f2;"> </span>   glShadeModel<span style="color: #707183;">(</span>GL_SMOOTH<span style="color: #707183;">)</span>           <span style="color: #b22222;"># </span><span style="color: #b22222;">Sombreado suave</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la perspectiva</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>60, 1.0, 0.1, 100.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Campo de visi&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_trunk</span><span style="color: #707183;">(</span>texture_id<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja el tronco del &#225;rbol como un cilindro texturizado"""</span>
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glBindTexture<span style="color: #707183;">(</span>GL_TEXTURE_2D, texture_id<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Blanco para mostrar la textura</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, 0.0, 0.0<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glRotatef<span style="color: #707183;">(</span>-90, 1, 0, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rotar para orientar verticalmente</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">quadric</span> = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluQuadricTexture<span style="color: #707183;">(</span>quadric, GL_TRUE<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluCylinder<span style="color: #707183;">(</span>quadric, 0.3, 0.3, 2.0, 32, 32<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_foliage</span><span style="color: #707183;">(</span>texture_id<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja las hojas del &#225;rbol como una esfera texturizada"""</span>
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glBindTexture<span style="color: #707183;">(</span>GL_TEXTURE_2D, texture_id<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Blanco para mostrar la textura</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, 2.0, 0.0<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">quadric</span> = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluQuadricTexture<span style="color: #707183;">(</span>quadric, GL_TRUE<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluSphere<span style="color: #707183;">(</span>quadric, 1.0, 32, 32<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_ground</span><span style="color: #707183;">(</span>texture_id<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja un plano para representar el suelo con textura"""</span>
<span style="background-color: #f2f2f2;"> </span>   glBindTexture<span style="color: #707183;">(</span>GL_TEXTURE_2D, texture_id<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glBegin<span style="color: #707183;">(</span>GL_QUADS<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Blanco para mostrar la textura</span>
<span style="background-color: #f2f2f2;"> </span>   glTexCoord2f<span style="color: #707183;">(</span>0.0, 0.0<span style="color: #707183;">)</span>; glVertex3f<span style="color: #707183;">(</span>-10, 0, 10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexCoord2f<span style="color: #707183;">(</span>1.0, 0.0<span style="color: #707183;">)</span>; glVertex3f<span style="color: #707183;">(</span>10, 0, 10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexCoord2f<span style="color: #707183;">(</span>1.0, 1.0<span style="color: #707183;">)</span>; glVertex3f<span style="color: #707183;">(</span>10, 0, -10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexCoord2f<span style="color: #707183;">(</span>0.0, 1.0<span style="color: #707183;">)</span>; glVertex3f<span style="color: #707183;">(</span>-10, 0, -10<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnd<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">draw_tree</span><span style="color: #707183;">(</span>trunk_texture, foliage_texture, ground_texture<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #8b2252;">"""Dibuja un &#225;rbol completo"""</span>
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la c&#225;mara</span>
<span style="background-color: #f2f2f2;"> </span>   gluLookAt<span style="color: #707183;">(</span>4, 3, 8,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posici&#243;n de la c&#225;mara</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> 0, 1, 0,  <span style="color: #b22222;"># </span><span style="color: #b22222;">Punto al que mira</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span> 0, 1, 0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Vector hacia arriba</span>

<span style="background-color: #f2f2f2;"> </span>   draw_ground<span style="color: #707183;">(</span>ground_texture<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja el suelo</span>
<span style="background-color: #f2f2f2;"> </span>   draw_trunk<span style="color: #707183;">(</span>trunk_texture<span style="color: #707183;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja el tronco</span>
<span style="background-color: #f2f2f2;"> </span>   draw_foliage<span style="color: #707183;">(</span>foliage_texture<span style="color: #707183;">)</span> <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibuja las hojas</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.swap_buffers<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> window

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> glfw.init<span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear ventana de GLFW</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">width</span>, <span style="color: #a0522d;">height</span> = 800, 600
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">window</span> = glfw.create_window<span style="color: #707183;">(</span>width, height, <span style="color: #8b2252;">"&#193;rbol con Texturas"</span>, <span style="color: #008b8b;">None</span>, <span style="color: #008b8b;">None</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> <span style="color: #a0522d;">window</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.make_context_current<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glViewport<span style="color: #707183;">(</span>0, 0, width, height<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   init<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Carga de texturas BMP</span>
<span style="background-color: #f2f2f2;"> </span>   trunk_texture = load_texture<span style="color: #707183;">(</span><span style="color: #8b2252;">"trunk.bmp"</span><span style="color: #707183;">)</span>      <span style="color: #b22222;"># </span><span style="color: #b22222;">Textura para el tronco</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">foliage_texture</span> = load_texture<span style="color: #707183;">(</span><span style="color: #8b2252;">"foliage.bmp"</span><span style="color: #707183;">)</span> <span style="color: #b22222;"># </span><span style="color: #b22222;">Textura para las hojas</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">ground_texture</span> = load_texture<span style="color: #707183;">(</span><span style="color: #8b2252;">"groud.bmp"</span><span style="color: #707183;">)</span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Textura para el suelo</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> trunk_texture <span style="color: #a020f0;">or</span> <span style="color: #a020f0;">not</span> foliage_texture <span style="color: #a020f0;">or</span> <span style="color: #a020f0;">not</span> ground_texture:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="color: #483d8b;">print</span><span style="color: #707183;">(</span><span style="color: #8b2252;">"Error al cargar texturas."</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   sys.<span style="color: #008b8b;">exit</span><span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Bucle principal</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">while</span> <span style="color: #a020f0;">not</span> glfw.window_should_close<span style="color: #707183;">(</span>window<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   draw_tree<span style="color: #707183;">(</span>trunk_texture, foliage_texture, ground_texture<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   glfw.poll_events<span style="color: #707183;">()</span>

<span style="background-color: #f2f2f2;"> </span>   glfw.terminate<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>


</pre>
</div>

<p>
texturas blanco y negro
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLUT <span style="color: #a020f0;">import</span> *

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">load_texture</span><span style="color: #707183;">(</span>image_path<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">texture_id</span> = glGenTextures<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glBindTexture<span style="color: #707183;">(</span>GL_TEXTURE_2D, texture_id<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar imagen de textura</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">from</span> PIL <span style="color: #a020f0;">import</span> Image
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img</span> = Image.<span style="color: #483d8b;">open</span><span style="color: #707183;">(</span>image_path<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img_data</span> = img.tobytes<span style="color: #707183;">(</span><span style="color: #8b2252;">"raw"</span>, <span style="color: #8b2252;">"RGB"</span>, 0, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   glTexImage2D<span style="color: #707183;">(</span>GL_TEXTURE_2D, 0, GL_RGB, img.width, img.height, 0,
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>GL_RGB, GL_UNSIGNED_BYTE, img_data<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexParameterf<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexParameterf<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> texture_id

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">display</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_TEXTURE_2D<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear un objeto cuadr&#225;tico</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">quadric</span> = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluQuadricTexture<span style="color: #707183;">(</span>quadric, GL_TRUE<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Habilitar texturas</span>
<span style="background-color: #f2f2f2;"> </span>   gluQuadricNormals<span style="color: #707183;">(</span>quadric, GLU_SMOOTH<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar una esfera con textura</span>
<span style="background-color: #f2f2f2;"> </span>   glBindTexture<span style="color: #707183;">(</span>GL_TEXTURE_2D, texture_id<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   gluSphere<span style="color: #707183;">(</span>quadric, 1.0, 32, 32<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   gluDeleteQuadric<span style="color: #707183;">(</span>quadric<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glDisable<span style="color: #707183;">(</span>GL_TEXTURE_2D<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glutSwapBuffers<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> texture_id
<span style="background-color: #f2f2f2;"> </span>   glutInit<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glutInitDisplayMode<span style="color: #707183;">(</span>GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glutInitWindowSize<span style="color: #707183;">(</span>800, 600<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glutCreateWindow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Textura"</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">texture_id</span> = load_texture<span style="color: #707183;">(</span><span style="color: #8b2252;">"/home/likcos/Materias/Graficacion/code/foliage.bmp"</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glutDisplayFunc<span style="color: #707183;">(</span>display<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glutMainLoop<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>

</pre>
</div>

<p>
texturas de color 
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> OpenGL.GLUT <span style="color: #a020f0;">import</span> *
<span style="color: #a020f0;">from</span> PIL <span style="color: #a020f0;">import</span> Image

<span style="color: #b22222;">#</span><span style="color: #b22222;">pip install Pillow</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">load_texture</span><span style="color: #707183;">(</span>image_path<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Generar y enlazar una textura</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">texture_id</span> = glGenTextures<span style="color: #707183;">(</span>1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glBindTexture<span style="color: #707183;">(</span>GL_TEXTURE_2D, texture_id<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Cargar imagen desde el archivo</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img</span> = Image.<span style="color: #483d8b;">open</span><span style="color: #707183;">(</span>image_path<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img</span> = img.convert<span style="color: #707183;">(</span><span style="color: #8b2252;">"RGB"</span><span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Convertir a RGB expl&#237;citamente</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">img_data</span> = img.tobytes<span style="color: #707183;">(</span><span style="color: #8b2252;">"raw"</span>, <span style="color: #8b2252;">"RGB"</span>, 0, -1<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configurar la textura</span>
<span style="background-color: #f2f2f2;"> </span>   glTexImage2D<span style="color: #707183;">(</span>GL_TEXTURE_2D, 0, GL_RGB, img.width, img.height, 0,
<span style="background-color: #f2f2f2;"> </span>   GL_RGB, GL_UNSIGNED_BYTE, img_data<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexParameteri<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexParameteri<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexParameteri<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glTexParameteri<span style="color: #707183;">(</span>GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">return</span> texture_id

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">init_lighting</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de iluminaci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_LIGHTING<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Habilitar iluminaci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_LIGHT0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Activar la luz 0</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_COLOR_MATERIAL<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Habilitar el material basado en colores</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n de la luz</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">light_pos</span> = <span style="color: #707183;">[</span>1.0, 1.0, 1.0, 0.0<span style="color: #707183;">]</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Posici&#243;n de la luz</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">light_ambient</span> = <span style="color: #707183;">[</span>0.2, 0.2, 0.2, 1.0<span style="color: #707183;">]</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Luz ambiental</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">light_diffuse</span> = <span style="color: #707183;">[</span>0.8, 0.8, 0.8, 1.0<span style="color: #707183;">]</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Luz difusa</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">light_specular</span> = <span style="color: #707183;">[</span>1.0, 1.0, 1.0, 1.0<span style="color: #707183;">]</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Luz especular</span>

<span style="background-color: #f2f2f2;"> </span>   glLightfv<span style="color: #707183;">(</span>GL_LIGHT0, GL_POSITION, light_pos<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLightfv<span style="color: #707183;">(</span>GL_LIGHT0, GL_AMBIENT, light_ambient<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLightfv<span style="color: #707183;">(</span>GL_LIGHT0, GL_DIFFUSE, light_diffuse<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLightfv<span style="color: #707183;">(</span>GL_LIGHT0, GL_SPECULAR, light_specular<span style="color: #707183;">)</span>

<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Configuraci&#243;n del material</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">material_specular</span> = <span style="color: #707183;">[</span>1.0, 1.0, 1.0, 1.0<span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">material_shininess</span> = <span style="color: #707183;">[</span>50.0<span style="color: #707183;">]</span>
<span style="background-color: #f2f2f2;"> </span>   glMaterialfv<span style="color: #707183;">(</span>GL_FRONT, GL_SPECULAR, material_specular<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glMaterialfv<span style="color: #707183;">(</span>GL_FRONT, GL_SHININESS, material_shininess<span style="color: #707183;">)</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">display</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   glClear<span style="color: #707183;">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_TEXTURE_2D<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Crear un objeto cuadr&#225;tico</span>
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">quadric</span> = gluNewQuadric<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluQuadricTexture<span style="color: #707183;">(</span>quadric, GL_TRUE<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Habilitar texturas para el objeto</span>
<span style="background-color: #f2f2f2;"> </span>   gluQuadricNormals<span style="color: #707183;">(</span>quadric, GLU_SMOOTH<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   glBindTexture<span style="color: #707183;">(</span>GL_TEXTURE_2D, texture_id<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Enlazar la textura cargada</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar la esfera peque&#241;a</span>
<span style="background-color: #f2f2f2;"> </span>   glPushMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glColor3f<span style="color: #707183;">(</span>1.0, 1.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;">#  </span><span style="color: #b22222;">no altere la textura</span>
<span style="background-color: #f2f2f2;"> </span>   glTranslatef<span style="color: #707183;">(</span>0.0, 0.0, -2.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Mover la esfera para que sea visible</span>
<span style="background-color: #f2f2f2;"> </span>   gluSphere<span style="color: #707183;">(</span>quadric, 0.5, 32, 32<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Esfera con radio 0.5</span>
<span style="background-color: #f2f2f2;"> </span>   glPopMatrix<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   gluDeleteQuadric<span style="color: #707183;">(</span>quadric<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Liberar el recurso del cuadr&#225;tico</span>
<span style="background-color: #f2f2f2;"> </span>   glDisable<span style="color: #707183;">(</span>GL_TEXTURE_2D<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glutSwapBuffers<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">reshape</span><span style="color: #707183;">(</span>width, height<span style="color: #707183;">)</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> height == 0:
<span style="background-color: #f2f2f2;"> </span>   <span style="background-color: #f2f2f2;"> </span>   height = 1
<span style="background-color: #f2f2f2;"> </span>   aspect = width / height
<span style="background-color: #f2f2f2;"> </span>   glViewport<span style="color: #707183;">(</span>0, 0, width, height<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_PROJECTION<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   gluPerspective<span style="color: #707183;">(</span>45.0, aspect, 0.1, 50.0<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glMatrixMode<span style="color: #707183;">(</span>GL_MODELVIEW<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glLoadIdentity<span style="color: #707183;">()</span>

<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">main</span><span style="color: #707183;">()</span>:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">global</span> texture_id
<span style="background-color: #f2f2f2;"> </span>   glutInit<span style="color: #707183;">()</span>
<span style="background-color: #f2f2f2;"> </span>   glutInitDisplayMode<span style="color: #707183;">(</span>GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glutInitWindowSize<span style="color: #707183;">(</span>800, 600<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glutCreateWindow<span style="color: #707183;">(</span><span style="color: #8b2252;">"Esfera con textura e iluminaci&#243;n"</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   glEnable<span style="color: #707183;">(</span>GL_DEPTH_TEST<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Habilitar prueba de profundidad</span>
<span style="background-color: #f2f2f2;"> </span>   texture_id = load_texture<span style="color: #707183;">(</span><span style="color: #8b2252;">"/home/likcos/Materias/Graficacion/code/tex1.png"</span><span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   init_lighting<span style="color: #707183;">()</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Inicializar iluminaci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span>   
<span style="background-color: #f2f2f2;"> </span>   glutDisplayFunc<span style="color: #707183;">(</span>display<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glutReshapeFunc<span style="color: #707183;">(</span>reshape<span style="color: #707183;">)</span>
<span style="background-color: #f2f2f2;"> </span>   glutMainLoop<span style="color: #707183;">()</span>

<span style="color: #a020f0;">if</span> <span style="color: #483d8b;">__name__</span> == <span style="color: #8b2252;">"__main__"</span>:
<span style="background-color: #f2f2f2;"> </span>   main<span style="color: #707183;">()</span>

</pre>
</div>
</div>
</div>


<div id="outline-container-org9ac9378" class="outline-3">
<h3 id="org9ac9378">Transformaciones en OpenGL</h3>
<div class="outline-text-3" id="text-org9ac9378">
<p>
Las transformaciones de OpenGL son fundamentales para mover, rotar y escalar los objetos en la escena.
</p>
</div>

<div id="outline-container-org24f7b70" class="outline-4">
<h4 id="org24f7b70">Traslación</h4>
<div class="outline-text-4" id="text-org24f7b70">
<p>
Mueve un objeto de una posición a otra.
</p>
</div>
</div>

<div id="outline-container-orgda80c48" class="outline-4">
<h4 id="orgda80c48">Rotación</h4>
<div class="outline-text-4" id="text-orgda80c48">
<p>
Gira un objeto alrededor de un eje.
</p>
</div>
</div>

<div id="outline-container-org1de38d3" class="outline-4">
<h4 id="org1de38d3">Escalado</h4>
<div class="outline-text-4" id="text-org1de38d3">
<p>
Cambia el tamaño del objeto.
</p>

<p>
Ejemplo de cómo aplicar una transformación de escalado y rotación:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="background-color: #f2f2f2;"> </span> <span style="color: #a020f0;">from</span> OpenGL.GL <span style="color: #a020f0;">import</span> *
<span style="background-color: #f2f2f2;"> </span> <span style="color: #a020f0;">from</span> OpenGL.GLU <span style="color: #a020f0;">import</span> *
<span style="background-color: #f2f2f2;"> </span> 
<span style="background-color: #f2f2f2;"> </span> glPushMatrix<span style="color: #707183;">()</span>         <span style="color: #b22222;"># </span><span style="color: #b22222;">Guardar la matriz actual</span>
<span style="background-color: #f2f2f2;"> </span> glTranslatef<span style="color: #707183;">(</span>1.0, 0.0, 0.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Traslaci&#243;n</span>
<span style="background-color: #f2f2f2;"> </span> glRotatef<span style="color: #707183;">(</span>45, 0.0, 0.0, 1.0<span style="color: #707183;">)</span>  <span style="color: #b22222;"># </span><span style="color: #b22222;">Rotaci&#243;n de 45 grados</span>
<span style="background-color: #f2f2f2;"> </span> glScalef<span style="color: #707183;">(</span>2.0, 2.0, 1.0<span style="color: #707183;">)</span>      <span style="color: #b22222;"># </span><span style="color: #b22222;">Escalar el objeto</span>
<span style="background-color: #f2f2f2;"> </span> draw_triangle<span style="color: #707183;">()</span>              <span style="color: #b22222;"># </span><span style="color: #b22222;">Dibujar el objeto transformado</span>
<span style="background-color: #f2f2f2;"> </span> glPopMatrix<span style="color: #707183;">()</span>         <span style="color: #b22222;"># </span><span style="color: #b22222;">Restaurar la matriz original</span>
</pre>
</div>
</div>
</div>
</div>



<div id="outline-container-org3f4c65f" class="outline-3">
<h3 id="org3f4c65f">Iluminación y Materiales</h3>
<div class="outline-text-3" id="text-org3f4c65f">
<p>
En OpenGL, puedes aplicar iluminación y definir materiales para que los objetos interactúen con la luz de manera realista.
</p>
</div>

<div id="outline-container-orgcd58640" class="outline-4">
<h4 id="orgcd58640">Tipos de luces</h4>
<div class="outline-text-4" id="text-orgcd58640">
<ul class="org-ul">
<li><b><b>Luz ambiental</b></b>: Luz sin una dirección específica que ilumina
toda la escena.</li>
<li><b><b>Luz direccional</b></b>: Luz que proviene de una dirección específica,
como la luz solar.</li>
<li><b><b>Luz de punto</b></b>: Luz que emana de un punto específico, como una
lámpara.</li>
<li><b><b>Luz de foco</b></b>: Luz que se emite en un ángulo específico, similar
a un reflector.</li>
</ul>
</div>
</div>

<div id="outline-container-org6ffbb21" class="outline-4">
<h4 id="org6ffbb21">Materiales</h4>
<div class="outline-text-4" id="text-org6ffbb21">
<p>
Puedes definir propiedades de los materiales, como el color y la
reflectividad, para cada objeto.
</p>
</div>
</div>
</div>

<div id="outline-container-org5498b78" class="outline-3">
<h3 id="org5498b78">Sombras y Efectos Avanzados</h3>
<div class="outline-text-3" id="text-org5498b78">
<p>
OpenGL también permite generar sombras y efectos avanzados como transparencia, texturas y sombreado por vértices.
</p>
</div>
</div>

<div id="outline-container-org82abc04" class="outline-3">
<h3 id="org82abc04">OpenGL Moderno: Shaders y el Pipeline Gráfico</h3>
<div class="outline-text-3" id="text-org82abc04">
<p>
OpenGL moderno (a partir de OpenGL 3.0) ha evolucionado hacia un modelo basado en shaders. Los shaders son pequeños programas que se ejecutan en la GPU y permiten controlar de manera detallada el comportamiento del pipeline gráfico.
</p>
</div>

<div id="outline-container-org9f34a79" class="outline-4">
<h4 id="org9f34a79">Vertex Shader</h4>
<div class="outline-text-4" id="text-org9f34a79">
<p>
Procesa cada vértice y aplica transformaciones para determinar su posición en la pantalla.
</p>
</div>
</div>

<div id="outline-container-orgc48b544" class="outline-4">
<h4 id="orgc48b544">Fragment Shader</h4>
<div class="outline-text-4" id="text-orgc48b544">
<p>
Calcula el color final de cada píxel en la superficie de los objetos.
</p>
</div>
</div>

<div id="outline-container-org96605df" class="outline-4">
<h4 id="org96605df">Geometry Shader</h4>
<div class="outline-text-4" id="text-org96605df">
<p>
Opcional, permite manipular primitivas completas (como puntos, líneas o triángulos).
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="background-color: #f2f2f2;"> </span> <span style="color: #b22222;"># </span><span style="color: #b22222;">Ejemplo de vertex shader simple en GLSL (OpenGL Shading Language)</span>
<span style="background-color: #f2f2f2;"> </span> <span style="color: #8b2252;">"""</span>
<span style="color: #8b2252; background-color: #f2f2f2;"> </span><span style="color: #8b2252;"> #version 330 core</span>
<span style="color: #8b2252; background-color: #f2f2f2;"> </span><span style="color: #8b2252;"> layout(location = 0) in vec3 position;</span>
<span style="color: #8b2252; background-color: #f2f2f2;"> </span><span style="color: #8b2252;"> uniform mat4 model;</span>
<span style="color: #8b2252; background-color: #f2f2f2;"> </span><span style="color: #8b2252;"> uniform mat4 view;</span>
<span style="color: #8b2252; background-color: #f2f2f2;"> </span><span style="color: #8b2252;"> uniform mat4 projection;</span>
<span style="color: #8b2252; background-color: #f2f2f2;"> </span><span style="color: #8b2252;"> void main() {</span>
<span style="color: #8b2252; background-color: #f2f2f2;"> </span><span style="color: #8b2252;">   </span><span style="color: #8b2252; background-color: #f2f2f2;"> </span><span style="color: #8b2252;"> gl_Position = projection * view * model * vec4(position, 1.0);</span>
<span style="color: #8b2252; background-color: #f2f2f2;"> </span><span style="color: #8b2252;"> }</span>
<span style="color: #8b2252; background-color: #f2f2f2;"> </span><span style="color: #8b2252;"> """</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org0c83f93" class="outline-3">
<h3 id="org0c83f93">Conclusión</h3>
<div class="outline-text-3" id="text-org0c83f93">
<p>
OpenGL es una herramienta poderosa y flexible para el renderizado de
gráficos en 2D y 3D. Aunque es de bajo nivel y puede requerir trabajo
adicional para construir escenas complejas, su compatibilidad
multiplataforma y la aceleración por hardware lo convierten en una
opción popular en una variedad de aplicaciones.
</p>

<p>
Con el tiempo, OpenGL ha evolucionado hacia un modelo basado en
shaders, lo que permite un control mucho mayor sobre el pipeline
gráfico, haciendo posible gráficos de alta calidad y efectos avanzados
en tiempo real.
</p>
</div>
</div>
</div>





<div id="outline-container-org9712a11" class="outline-2">
<h2 id="org9712a11">Proyecto Final</h2>
<div class="outline-text-2" id="text-org9712a11">
<p>
El flujo óptico es el patrón del movimiento aparente de los objetos,
superficies y bordes en una escena causado por el movimiento relativo
entre un observador (un ojo o una cámara) y la escena.2​3​ El concepto
de flujo óptico se estudió por primera vez en la década de 1940 y,
finalmente, fue publicado por el psicólogo estadounidense James
J. Gibson4​ como parte de su teoría de la affordance (una acción que un
individuo puede potencialmente realizar en su ambiente). Las
aplicaciones del flujo óptico tales como la detección de movimiento,
la segmentación de objetos, el tiempo hasta la colisión y el enfoque
de cálculo de expansiones, la codificación del movimiento compensado y
la medición de la disparidad estereoscópica utilizan este movimiento
de las superficies y bordes de los objetos.
</p>

<p>
Actividades
</p>

<ol class="org-ol">
<li>Desarrollar un programa que utilice el flujo óptico, para aplicar a
una imagen o una primitiva de dibujo, las transformaciones
geométricas vistas en clase, (Traslación, Escalamiento, Rotación)</li>
</ol>


<ol class="org-ol">
<li>Desarrollar un programa que utilice opengl, para modelar un entorno
completo tipo mundo minecraft de alguna ciudad, paisaje, bosque,
etc. Donde se deben de incluir por lo menos 15 modelos diferentes,
diseñados con primitivas de opengl de igual manera se debe de mover
todo el entorno modelado mediante el flujo óptico aplicando las
transformaciones geométricas vistas en clase, (Traslación,
Escalamiento, Rotación), para esta actividad pueden hacer equipos
máximo de 5 personas.</li>
</ol>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Autor: Eduardo Alcaraz</p>
<p class="date">Created: 2025-03-19 mié 13:14</p>
<p class="validation"><a href="https://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
